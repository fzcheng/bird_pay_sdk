package com.cheyooh.service.sdk.action.notify;

import java.net.URLEncoder;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;

import org.apache.commons.lang.StringUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Cmd;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.ResultXJContent;
import com.cheyooh.service.sdk.cfg.Cfg;
import com.cheyooh.service.sdk.db.dao.SdkNotifyMmdoMapper;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdo;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdoExample;
import com.cheyooh.service.sdk.tools.HmacSHA1Encryption;

public class XiaomiQmxdgNotify extends AbstractNotifyService<Cmd> {
	private static final String payChannelCode = "sdkxiaomipay";
	private static final String RESPONSE_BODY = "{\"errcode\":\"%d\"}";
	private static final String encryptKey = "Br7HYCf+h0L+EWSBcLVXUQ==";
	//0表示异常
	private int errcode=0;
	@Override
	protected Result verify(Cmd cmd) {
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#execute(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@Override
	protected Result execute(Cmd cmd) {
		DAL dal = DALFactory.createDAL();
		try {
			String appId = cmd.getServiceContext().getRequest()
					.getParameter("appId");
			if (StringUtils.isEmpty(appId)) {
				appId = "";
			}

			String cpOrderId = cmd.getServiceContext().getRequest()
					.getParameter("cpOrderId");
			if (StringUtils.isEmpty(cpOrderId)) {
				cpOrderId = "";
			}

			String cpUserInfo = cmd.getServiceContext().getRequest()
					.getParameter("cpUserInfo");
			if (StringUtils.isEmpty(cpUserInfo)) {
				cpUserInfo = "";
			}

			String uid = cmd.getServiceContext().getRequest()
					.getParameter("uid");
			if (StringUtils.isEmpty(uid)) {
				uid = "";
			}

			String orderId = cmd.getServiceContext().getRequest()
					.getParameter("orderId");
			if (StringUtils.isEmpty(orderId)) {
				orderId = "";
			}

			String orderStatus = cmd.getServiceContext().getRequest()
					.getParameter("orderStatus");
			if (StringUtils.isEmpty(orderStatus)) {
				orderStatus = "";
			}

			String payFee = cmd.getServiceContext().getRequest()
					.getParameter("payFee");
			if (StringUtils.isEmpty(payFee)) {
				payFee = "";
			}

			String productCode = cmd.getServiceContext().getRequest()
					.getParameter("productCode");
			if (StringUtils.isEmpty(productCode)) {
				productCode = "";
			}

			String productName = cmd.getServiceContext().getRequest()
					.getParameter("productName");
			if (StringUtils.isEmpty(productName)) {
				productName = "";
			}

			String productCount = cmd.getServiceContext().getRequest()
					.getParameter("productCount");
			if (StringUtils.isEmpty(productCount)) {
				productCount = "";
			}

			String payTime = cmd.getServiceContext().getRequest()
					.getParameter("payTime");
			if (StringUtils.isEmpty(payTime)) {
				payTime = "";
			}

			String orderConsumeType = cmd.getServiceContext().getRequest()
					.getParameter("orderConsumeType");
			if (StringUtils.isEmpty(orderConsumeType)) {
				orderConsumeType = "";
			}

			String partnerGiftConsume = cmd.getServiceContext().getRequest()
					.getParameter("partnerGiftConsume");
			if (StringUtils.isEmpty(partnerGiftConsume)) {
				partnerGiftConsume = "";
			}

			String signature = cmd.getServiceContext().getRequest()
					.getParameter("signature");
			if (StringUtils.isEmpty(signature)) {
				signature = "";
			}

			logger.info("the xiaomi pay notify orderId =" + orderId
					+ ", cpOrderId =" + cpOrderId);

			String signature1 = getSignature(appId, cpOrderId, cpUserInfo, uid,
					orderId, orderStatus, payFee, productCode, productName,
					productCount, payTime, orderConsumeType, partnerGiftConsume);
			
			SdkNotifyMmdoMapper sdkNotifyMmdoMapper = dal
					.getMapper(SdkNotifyMmdoMapper.class);
			SdkNotifyMmdoExample sdkNotifyMmdoExample=new SdkNotifyMmdoExample();
			sdkNotifyMmdoExample.createCriteria().andPayChannelCodeEqualTo(payChannelCode).andLinkidEqualTo(orderId);
			SdkNotifyMmdo sdkNotifyMmdo=sdkNotifyMmdoMapper.selectOne(sdkNotifyMmdoExample);
			if(sdkNotifyMmdo!=null){
				logger.info("the xiaomi pay notify errcode ="+errcode);
				//1表示已经处理过了
				errcode=1;
			}else{
				if(signature1.equals(signature)){
					SdkNotifyMmdo notifyMmdo = new SdkNotifyMmdo();
					notifyMmdo.setLinkid(orderId);
					notifyMmdo.setSpid(productCode);
					// notifyMmdo.setCmd(cmd);
					// notifyMmdo.setMobile(mobile);
					// notifyMmdo.setSpnum(spnum);
					// notifyMmdo.setKey(key);
					// notifyMmdo.setOperationType(operationType);
					// notifyMmdo.setAdditionalStatus(additionalStatus);
					// notifyMmdo.setOrderNo(orderNo);
					// notifyMmdo.setStatusDetail(statusDetail);
					notifyMmdo.setGameId(250);
					Integer p = parseInteger(payFee);
					float amount = p / 100;
					notifyMmdo.setAmount(amount);
					Date d=StrToDate(payTime);
					notifyMmdo.setCreateTime(d);
					notifyMmdo.setPayChannelCode(payChannelCode);
					Integer notifyStatus = 0;
					if ("TRADE_SUCCESS".equals(orderStatus)) {
						notifyStatus = 1;
					}
					notifyMmdo.setNotifyStatus(notifyStatus);
					notifyMmdo.setOriginalcode(orderStatus);
					sdkNotifyMmdoMapper.insertSelective(notifyMmdo);
					errcode=200;
				}else {
					errcode=1525;
				}
			}
			dal.commit();
			return response(errcode);
		} catch (Exception e) {
			logger.error("the xiaomi pay notify error!", e);
			return response(errcode);
		} finally {
			dal.close();
		}
	}

	private Integer parseInteger(String str) {
		Integer num = null;
		try {
			if (StringUtils.isNotBlank(str)) {
				num = Integer.valueOf(str);
			}
		} catch (NumberFormatException e) {
			logger.warn("parse number string error! str = " + str);
		}
		return num;
	}

	private Result response(int status) {
		String res = String.format(RESPONSE_BODY, status);
		return new Result(new ResultXJContent(res, res));
	}

	private String getSignature(String appId, String cpOrderId,
			String cpUserInfo, String uid, String orderId, String orderStatus,
			String payFee, String productCode, String productName,
			String productCount, String payTime, String orderConsumeType,
			String partnerGiftConsume) {
		String result = "";
		try {
			SortedMap<String, String> map = new TreeMap<String, String>();
			if (StringUtils.isNotEmpty(appId) && StringUtils.isNotBlank(appId)) {
				map.put("appId", appId);
			}
			if (StringUtils.isNotEmpty(cpOrderId)
					&& StringUtils.isNotBlank(cpOrderId)) {
				map.put("cpOrderId", cpOrderId);
			}
			if (StringUtils.isNotEmpty(cpUserInfo)
					&& StringUtils.isNotBlank(cpUserInfo)) {
				map.put("cpUserInfo", cpUserInfo);
			}
			if (StringUtils.isNotEmpty(uid) && StringUtils.isNotBlank(uid)) {
				map.put("uid", uid);
			}
			if (StringUtils.isNotEmpty(orderId)
					&& StringUtils.isNotBlank(orderId)) {
				map.put("orderId", orderId);
			}
			if (StringUtils.isNotEmpty(orderStatus)
					&& StringUtils.isNotBlank(orderStatus)) {
				map.put("orderStatus", orderStatus);
			}
			if (StringUtils.isNotEmpty(payFee)
					&& StringUtils.isNotBlank(payFee)) {
				map.put("payFee", payFee);
			}
			if (StringUtils.isNotEmpty(productCode)
					&& StringUtils.isNotBlank(productCode)) {
				map.put("productCode", productCode);
			}
			if (StringUtils.isNotEmpty(productName)
					&& StringUtils.isNotBlank(productName)) {
				map.put("productName", productName);
			}
			if (StringUtils.isNotEmpty(productCount)
					&& StringUtils.isNotBlank(productCount)) {
				map.put("productCount", productCount);
			}
			if (StringUtils.isNotEmpty(payTime)
					&& StringUtils.isNotBlank(payTime)) {
				map.put("payTime", payTime);
			}
			if (StringUtils.isNotEmpty(orderConsumeType)
					&& StringUtils.isNotBlank(orderConsumeType)) {
				map.put("orderConsumeType", orderConsumeType);
			}
			if (StringUtils.isNotEmpty(partnerGiftConsume)
					&& StringUtils.isNotBlank(partnerGiftConsume)) {
				map.put("partnerGiftConsume", partnerGiftConsume);
			}
			String s1 = "";
			int i = 0;
			int count = map.size();
			for (Map.Entry<String, String> me : map.entrySet()) {
				s1 = s1 + me.getKey() + "=" + me.getValue();
				i++;
				if (i < count) {
					s1 = s1 + "&";
				}
			}
			logger.debug("the xiaomi pay notify plaintext is :" + s1);
			result = HmacSHA1Encryption.HmacSHA1Encrypt(s1, encryptKey);
			return result;
		} catch (Exception e) {
			logger.error("the xiaomi pay notify getSignature error =" + e);
			return "";
		}
	}

	/**
	 * 测试方法
	 * @param appId
	 * @param cpOrderId
	 * @param cpUserInfo
	 * @param uid
	 * @param orderId
	 * @param orderStatus
	 * @param payFee
	 * @param productCode
	 * @param productName
	 * @param productCount
	 * @param payTime
	 * @param orderConsumeType
	 * @param partnerGiftConsume
	 * @return
	 */
	private String getContent(String appId, String cpOrderId,
			String cpUserInfo, String uid, String orderId, String orderStatus,
			String payFee, String productCode, String productName,
			String productCount, String payTime, String orderConsumeType,
			String partnerGiftConsume){
		HttpClient httpclient = new DefaultHttpClient();
		String result="";
		try {
			String sendUrl = Cfg.cfg.getString("sdk.sdkxiaomipay.url");
//			logger.debug("the sdkxiaomipay send api = " + sendUrl);
			logger.info("the sdkxiaomipay send api = " + sendUrl);
			StringBuffer query = new StringBuffer(sendUrl);
			query.append("appId=").append(appId);
			query.append("&cpOrderId=").append(cpOrderId);
			query.append("&uid=").append(uid);
			query.append("&orderId=").append(orderId);
			query.append("&orderStatus=").append(orderStatus);
			query.append("&productCode=").append(productCode);
			query.append("&productName=").append(productName);
			query.append("&productCount=").append(productCount);
			query.append("&payFee=").append(payFee);
			String time=URLEncoder.encode(payTime, "utf-8");
			query.append("&payTime=").append(time);
			HttpGet httpget = new HttpGet(query.toString());
//			logger.debug("the sdkxiaomipay send url = " + query.toString());
			logger.info("the sdkxiaomipay send url =" + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.info("the sdkxiaomipay send response content - content = "
					+ content);
			result=content;
			return result;
		} catch (Exception e) {
			logger.error("the sdkxiaomipay request error is :" + e, e);
			return "";
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
	}
	
	/**
	* 日期转换成字符串
	* @param date 
	* @return str
	*/
	public static String DateToStr(Date date) {
	  
	   SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	   String str = format.format(date);
	   return str;
	} 

	/**
	* 字符串转换成日期
	* @param str
	* @return date
	*/
	public static Date StrToDate(String str) {
	  
	   SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	   Date date = null;
	   try {
	    date = format.parse(str);
	   } catch (ParseException e) {
	    e.printStackTrace();
	   }
	   return date;
	}
	
	public static void main(String args[]) throws Exception {
		XiaomiQmxdgNotify x = new XiaomiQmxdgNotify();
		String appId = "2882303761517408680";
		String cpOrderId = "16b7c830-399d-4db8-9d2f-888fc9ffe192";
		String cpUserInfo = "";
		String uid = "16888858";
		String orderId = "21144789915052907019";
		String orderStatus = "TRADE_SUCCESS";
		String payFee = "400";
		String productCode = "q007";
		String productName = "400金币";
		String productCount = "1";
		Date d=new Date();
//		String payTime = "2015-11-19 10:14:35";
		String payTime =DateToStr(d);
		String orderConsumeType = "";
		String partnerGiftConsume = "";
		// String result = x.getSignature(appId, cpOrderId, cpUserInfo, uid,
		// orderId, orderStatus, payFee, productCode, productName,
		// productCount, payTime, orderConsumeType, partnerGiftConsume);
		String result = x.getContent(appId, cpOrderId, cpUserInfo, uid,
				orderId, orderStatus, payFee, productCode, productName,
				productCount, payTime, orderConsumeType, partnerGiftConsume);
		System.out.println(result);
	}
}
