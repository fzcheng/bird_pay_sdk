package com.cheyooh.service.sdk.action.notify;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Date;

import org.nuxeo.common.xmap.XMap;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Cmd;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.ResultXJContent;
import com.cheyooh.service.sdk.db.dao.SdkNotifyMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMapper;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdo;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdoExample;
import com.cheyooh.service.sdk.db.entity.SdkOrder;
import com.cheyooh.service.sdk.idata.gameserver.XmlCmccGamebaseNotifyReq;
import com.cheyooh.service.sdk.idata.gameserver.XmlCmccGamebaseNotifyResp;
import com.cheyooh.service.sdk.idata.gameserver.XmlMobileMmNotifyReq;
import com.cheyooh.service.sdk.idata.gameserver.XmlMobileMmNotifyResp;

public class CmccGamebaseNotify extends AbstractNotifyService<Cmd> {
	
	private String resultMsg="";
	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#verify(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@Override
	protected Result verify(Cmd cmd) {
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#execute(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@Override
	protected Result execute(Cmd cmd) {
		XmlCmccGamebaseNotifyResp resp = new XmlCmccGamebaseNotifyResp();
		DAL dal = DALFactory.createDAL();
		try {
			InputStream in = cmd.getServiceContext().getRequest()
					.getInputStream();
			BufferedReader reader = new BufferedReader(new InputStreamReader(
					in, "UTF-8"));
			StringBuffer xmlBuff = new StringBuffer();
			String line;
			while ((line = reader.readLine()) != null) {
				xmlBuff.append(line);
			}
			String xml = xmlBuff.toString();
			
			XmlCmccGamebaseNotifyReq notify = parseNotify(xml);

			String orderNo=notify.getCpparam();
			logger.info("the cmccgamebase notify orderNo ="+orderNo+", the xml is : " + xml);
			
			SdkNotifyMmdoMapper sdkNotifyMmdoMapper = dal.getMapper(SdkNotifyMmdoMapper.class);
			SdkNotifyMmdoExample sdkNotifyMmdoExample=new SdkNotifyMmdoExample();
			sdkNotifyMmdoExample.createCriteria().andOrderNoEqualTo(orderNo);
			SdkNotifyMmdo sdkNotifyMmdo=sdkNotifyMmdoMapper.selectOne(sdkNotifyMmdoExample);
			
			if(sdkNotifyMmdo!=null){
				int notifyStatus=0;
				if("0".equals(notify.gethRet())){
					notifyStatus=1;
				}else {
					notifyStatus=0;
				}
				sdkNotifyMmdo.setOriginalcode(notify.gethRet());
				sdkNotifyMmdo.setStatusDetail(notify.getStatus());
				sdkNotifyMmdo.setNotifyStatus(notifyStatus);
				sdkNotifyMmdoMapper.updateByPrimaryKey(sdkNotifyMmdo);
				resp.sethRet("0");
				resp.setMessage("Successful");
			}else {
				logger.error("the cmccgamebase notify can not found the order, orderNo ="
						+ notify.getCpparam());
				resp.sethRet("1");
				resp.setMessage("There is not this orderNo!");
			}
			
//			SdkNotifyMmdo notifyMmdo = new SdkNotifyMmdo();
//			notifyMmdo.setAmount(notify.getPrice() / 100f);
//			notifyMmdo.setCmd(notify.getPayCode());
//			notifyMmdo.setCreateTime(new Date());
//			notifyMmdo.setGameId(gameId);
//			// notifyMmdo.setKey(key);
//			notifyMmdo.setLinkid(notify.getTradeId());
//			notifyMmdo.setMobile(notify.getFeeMsisdn());
//			notifyMmdo.setOperationType(CHINA_MOBILE);
//			notifyMmdo.setSpid(notify.getPayCode());
//			notifyMmdo.setPayChannelCode(MOBILEMMPM);
//			// notifyMmdo.setSpnum(spnum);
//			SdkNotifyMmdoMapper notifyMmdoDao = dal
//					.getMapper(SdkNotifyMmdoMapper.class);
//			notifyMmdoDao.insertSelective(notifyMmdo);
//
//			resp.setMsgType(notify.getMsgType());
//			resp.setVersion(notify.getVersion());
//			resp.sethRet(0);

			dal.commit();
		} catch (Exception e) {
			resp.sethRet("1");
			resp.setMessage("the cmccgamebase notify error!");
			logger.error("the cmccgamebase notify error, the error is :" + e);
		} finally {
			dal.close();
		}
		return response(resp.toXml());
	}

	private XmlCmccGamebaseNotifyReq parseNotify(String xml) throws Exception {
		XMap xmap = new XMap();
		xmap.register(XmlCmccGamebaseNotifyReq.class);

		ByteArrayInputStream in = new ByteArrayInputStream(
				xml.getBytes("UTF-8"));
		XmlCmccGamebaseNotifyReq notify = (XmlCmccGamebaseNotifyReq) xmap.load(in);

		return notify;
	}

	private Result response(String msg) {
		return new Result(new ResultXJContent(msg, msg));
	}
}
