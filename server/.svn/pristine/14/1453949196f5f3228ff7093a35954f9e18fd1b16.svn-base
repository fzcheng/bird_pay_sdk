/**
 * 
 */
package com.cheyooh.service.sdk.action.notify;

import java.io.ByteArrayInputStream;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;

import org.nuxeo.common.xmap.XMap;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Cmd;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.ResultXJContent;
import com.cheyooh.service.sdk.cfg.Cfg;
import com.cheyooh.service.sdk.db.dao.SdkGameMapper;
import com.cheyooh.service.sdk.db.dao.SdkNotifyMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkTelephoneMapper;
import com.cheyooh.service.sdk.db.entity.SdkGame;
import com.cheyooh.service.sdk.db.entity.SdkGameExample;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdo;
import com.cheyooh.service.sdk.db.entity.SdkOrder;
import com.cheyooh.service.sdk.db.entity.SdkOrderExample;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdo;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdoExample;
import com.cheyooh.service.sdk.db.entity.SdkTelephone;
import com.cheyooh.service.sdk.db.entity.SdkTelephoneExample;
import com.cheyooh.service.sdk.idata.gameserver.XmlLoveCartoonNotifyReq;
import com.cheyooh.service.sdk.idata.gameserver.XmlLoveCartoonNotifyRes;
import com.cheyooh.service.sdk.tools.GenerateTool;
import com.ffcs.cryto.Cryto;

/**
 * @author Merlin
 * 
 */
public class LoveCartoonNotify extends AbstractNotifyService<Cmd> {
	// China_Mobile
	// China_Unicom
	private static final Integer CHINA_TELECOM = 3;
	private static final String MMPMLOVECARTOON = "mmpmlovecartoon";

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#verify(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@Override
	protected Result verify(Cmd cmd) {
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#execute(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@Override
	protected Result execute(Cmd cmd) {
		XmlLoveCartoonNotifyRes res = new XmlLoveCartoonNotifyRes();
		DAL dal = DALFactory.createDAL();
		try {
			HttpServletRequest request = cmd.getServiceContext().getRequest();
			String xml = request.getParameter("requestData");
			logger.debug("the love cartoon notify xml = " + xml);

			XmlLoveCartoonNotifyReq notify = parseNotify(xml);

			if (!isSign(notify)) {
				res.setStatus(2);
				res.setTradeNo(notify.getTradeNo());
				return response(res.toXml());
			}

			SdkNotifyMmdo notifyMmdo = new SdkNotifyMmdo();
			try {
				notifyMmdo.setAmount(Float.parseFloat(notify.getPrice()));
			} catch (Exception e) {
				logger.warn("read the love cartoon parse price error!", e);
			}
			notifyMmdo.setLinkid(notify.getTradeNo());
			notifyMmdo.setSpid(parseSpid(notify.getExtension()));
			notifyMmdo.setCmd(notify.getExtension());
			notifyMmdo.setCreateTime(new Date());
			notifyMmdo.setMobile(notify.getBuyerId());
			notifyMmdo.setOperationType(CHINA_TELECOM);
			notifyMmdo.setPayChannelCode(MMPMLOVECARTOON);

			if (notify.getExtension().contains("-")) {
				// 没有上行信息
				// notifyMmdo.setSpnum(spnum);
				notifyMmdo.setGameId(parseGameId(notify.getExtension()));
				// notifyMmdo.setKey(key);
				notifyMmdo.setAdditionalStatus(0);
				
				// 为sdk_mmdo_order表添加一条记录
				SdkOrderMmdoMapper mmdoMapper = dal
						.getMapper(SdkOrderMmdoMapper.class);
				SdkOrderMmdo mmdo = new SdkOrderMmdo();
				mmdo.setReqOrderAmount(Float.parseFloat(notify.getPrice()));
				mmdo.setReqSendContent(parseSpid(notify.getExtension()));
				mmdo.setRespSendContent(notify.getExtension());
//				mmdo.setReqSendNumber(destAddr);
//				mmdo.setRespSendNumber(destAddr);
				Date time = new Date(); 
				mmdo.setReqTime(time);
				mmdo.setGameId(parseGameId(notify.getExtension()));
				mmdo.setOperationType(CHINA_TELECOM);
				mmdo.setIpAddr(cmd.getRequestHost());
				mmdo.setPayChannelCode(MMPMLOVECARTOON);
				mmdo.setRespStatus(1);
				mmdoMapper.insertSelective(mmdo);

				// 为sdk_order表添加一条记录 
				String order_no =GenerateTool.createOrderNo();
				notifyMmdo.setOrderNo(order_no);
				SdkOrder order = new SdkOrder();
				order.setOrderNo(order_no);
				SdkGameMapper sdkGameMapper = dal
						.getMapper(SdkGameMapper.class);
				SdkGameExample sdkGameExample = new SdkGameExample();
				sdkGameExample.createCriteria().andGameIdEqualTo(parseGameId(notify.getExtension()));
				SdkGame sdkGame = sdkGameMapper.selectOne(sdkGameExample);
				if (sdkGame != null) {
					order.setOrderName(sdkGame.getName());
					order.setCpId(sdkGame.getCpId());
				}
				order.setGameId(parseGameId(notify.getExtension()));
				order.setOrderDesc(notify.getPrice() + "元");
				order.setType(9);
				order.setPayId(mmdo.getPayId());
				order.setAmount(Float.parseFloat(notify.getPrice()));
				order.setChannel("");
				order.setStatus(1);
				order.setCreateTime(time);
				order.setNotifyStatus(0); 
				order.setNotifyTime(time);
				order.setCompleteTime(time);
				SdkOrderMapper mapperOrder = dal
						.getMapper(SdkOrderMapper.class);
				mapperOrder.insert(order);
			} else {
				// 有上行信息
				String orderNo = parseOrderNo(notify.getExtension());
				notifyMmdo.setOrderNo(orderNo);
				SdkOrderMapper sdkOrderMapper = dal
						.getMapper(SdkOrderMapper.class);
				SdkOrderExample sdkOrderExample = new SdkOrderExample();
				sdkOrderExample.createCriteria().andOrderNoEqualTo(orderNo);
				SdkOrder sdkOrder = sdkOrderMapper.selectOne(sdkOrderExample);
				if (sdkOrder != null) {
					SdkOrderMmdoMapper sdkOrderMmdoMapper = dal
							.getMapper(SdkOrderMmdoMapper.class);
					SdkOrderMmdoExample sdkOrderMmdoExample = new SdkOrderMmdoExample();
					sdkOrderMmdoExample.createCriteria().andPayIdEqualTo(
							sdkOrder.getPayId());
					SdkOrderMmdo sdkOrderMmdo = sdkOrderMmdoMapper
							.selectOne(sdkOrderMmdoExample);
					if (sdkOrderMmdo != null) {
						notifyMmdo.setSpnum(sdkOrderMmdo.getRespSendNumber());
						notifyMmdo.setGameId(sdkOrderMmdo.getGameId());
						SdkTelephoneMapper sdkTelephoneMapper = dal
								.getMapper(SdkTelephoneMapper.class);
						SdkTelephoneExample sdkTelephoneExample = new SdkTelephoneExample();
						sdkTelephoneExample.createCriteria().andImsiEqualTo(
								sdkOrderMmdo.getRespImsi());
						SdkTelephone sdkTelephone = sdkTelephoneMapper
								.selectOne(sdkTelephoneExample);
						if (sdkTelephone != null) {
							notifyMmdo.setKey(String.valueOf(sdkTelephone
									.getProvinceNo()));
						}
						notifyMmdo.setAdditionalStatus(sdkOrderMmdo
								.getAdditionalStatus());
					}
				}

			}

			SdkNotifyMmdoMapper notifyMmdoDao = dal
					.getMapper(SdkNotifyMmdoMapper.class);
			notifyMmdoDao.insertSelective(notifyMmdo);

			dal.commit();

			res.setStatus(0);
			res.setTradeNo(notify.getTradeNo());

		} catch (Exception e) {
			logger.error("read the love cartoon pay notify error!", e);
			res.setStatus(1);
		} finally {
			dal.close();
		}
		return response(res.toXml());
	}

	private XmlLoveCartoonNotifyReq parseNotify(String xml) throws Exception {
		XMap xmap = new XMap();
		xmap.register(XmlLoveCartoonNotifyReq.class);

		ByteArrayInputStream in = new ByteArrayInputStream(
				xml.getBytes("UTF-8"));
		XmlLoveCartoonNotifyReq notify = (XmlLoveCartoonNotifyReq) xmap
				.load(in);

		return notify;
	}

	private boolean isSign(XmlLoveCartoonNotifyReq notify) {
		String signStr = notify.getBehavior() + notify.getTradeStatus()
				+ notify.getTradeNo() + notify.getBuyerId()
				+ notify.getExtension();
		String sign = Cryto.encryptBase643DES(signStr,
				Cfg.cfg.getString("sdk.lovecartoon.key"));
		sign = sign.replaceAll("\\+|\\s", "");
		String notifySign = notify.getSign().replaceAll("\\+|\\s", "");
		logger.debug("the sign = " + sign + ", notify sign = " + notifySign);
		boolean isRight = sign.equals(notifySign);
		if (!isRight) {
			logger.error("the love cartoon sign error! sign = " + sign
					+ ", notify sign = " + notifySign);
		}
		return isRight;
	}

	private Integer parseGameId(String extension) {
		if (extension == null) {
			return null;
		}

		String[] cmdArray = extension.split("-");
		if (cmdArray.length < 2) {
			return null;
		}

		Integer gameId;
		try {
			String gameIdStr = cmdArray[1].substring(cmdArray[1].length() - 3,
					cmdArray[1].length());
			gameId = Integer.valueOf(gameIdStr);
		} catch (Exception e) {
			gameId = null;
		}
		return gameId;
	}

	private String parseSpid(String extension) {
		String result;
		if (extension == null) {
			return null;
		}
		try {
			result = extension.substring(0, 23);
		} catch (Exception e) {
			logger.error("the love cartoon pay notify spid error!", e);
			return null;
		}
		return result;
	}

	private String parseOrderNo(String extension) {
		String result;
		if (extension == null) {
			return null;
		}
		try {
			result = extension.substring(23);
		} catch (Exception e) {
			logger.error("the love cartoon pay notify orderNo error!", e);
			return null;
		}
		return result;
	}

	private Result response(String msg) {
		return new Result(new ResultXJContent(msg, msg));
	}
}
