package com.cheyooh.service.sdk.action.notify;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Cmd;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.ResultXJContent;
import com.cheyooh.service.sdk.db.dao.SdkGameEmbedsdkMapper;
import com.cheyooh.service.sdk.db.dao.SdkNotifyMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkNotifyUcsasdkMapper;
import com.cheyooh.service.sdk.db.entity.SdkGameEmbedsdk;
import com.cheyooh.service.sdk.db.entity.SdkGameEmbedsdkExample;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdo;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdoExample;
import com.cheyooh.service.sdk.db.entity.SdkNotifyUcsasdk;
import com.cheyooh.service.sdk.idata.gameserver.JsonSdkucsapayDataRes;
import com.cheyooh.service.sdk.idata.gameserver.JsonSdkucsapayRes;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;


public class UcsaSDKNotify extends AbstractNotifyService<Cmd> {
	private static final String payChannelCode = "sdkucsapay";
//	private String encryptKey = "7980d88b3cf183b8f88e50c59ba39cd7";
	private String encryptKey ="";
	private String success_mgs = "SUCCESS";
	private String fail_mgs = "FAILURE";
	private String result = fail_mgs;
	private int gameid=0;

	private static final ObjectMapper mapper = new ObjectMapper();
	static {
		// mapper.setPropertyNamingStrategy(PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES);
		// or jackson 2.0
		mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,
				false);
		mapper.setSerializationInclusion(Include.NON_NULL);
		// jackson 1.9 and before
		// mapper.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES,
		// false);
	}

	@Override
	protected Result verify(Cmd cmd) {
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#execute(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@Override
	protected Result execute(Cmd cmd) {
		DAL dal = DALFactory.createDAL();
		try {
			HttpServletRequest request = cmd.getServiceContext().getRequest();
			InputStream in = request.getInputStream();
			BufferedReader reader = new BufferedReader(new InputStreamReader(
					in, "UTF-8"));
			StringBuffer jsonBuff = new StringBuffer();
			String line;
			while ((line = reader.readLine()) != null) {
				jsonBuff.append(line);
			}

			String jsonStr = jsonBuff.toString();
			logger.info("the sdkucsapay pay notify jsonString ="+jsonStr);
			JsonSdkucsapayRes resJson = mapper.readValue(jsonStr,
					JsonSdkucsapayRes.class);

			Map<String,String> ucsaMap=new HashMap<String,String>();
			
			String sign = resJson.getSign();
			if (StringUtils.isEmpty(sign)) {
				sign = "";
			}
			
			String ver = resJson.getVer();
			if (StringUtils.isEmpty(ver)) {
				ver = "";
			}

			String tradeId = resJson.getData().getTradeId();
			if (StringUtils.isEmpty(tradeId)) {
				tradeId = "";
			}
			ucsaMap.put("tradeId", tradeId);

			String tradeTime = resJson.getData().getTradeTime();
			if (StringUtils.isEmpty(tradeTime)) {
				tradeTime = "";
			}
			ucsaMap.put("tradeTime", tradeTime);
			
			String orderId = resJson.getData().getOrderId();
			if (StringUtils.isEmpty(orderId)) {
				orderId = "";
			}
			ucsaMap.put("orderId", orderId);

			String gameId = resJson.getData().getGameId();
			if (StringUtils.isEmpty(gameId)) {
				gameId = "";
			}
			ucsaMap.put("gameId", gameId);

			String amount = resJson.getData().getAmount();
			if (StringUtils.isEmpty(amount)) {
				amount = "";
			}
			ucsaMap.put("amount", amount);

			String payType = resJson.getData().getPayType();
			if (StringUtils.isEmpty(payType)) {
				payType = "";
			}
			ucsaMap.put("payType", payType);

			String attachInfo = resJson.getData().getAttachInfo();
			if (StringUtils.isEmpty(attachInfo)) {
				attachInfo = "";
			}
			ucsaMap.put("attachInfo", attachInfo);

			String orderStatus = resJson.getData().getOrderStatus();
			if (StringUtils.isEmpty(orderStatus)) {
				orderStatus = "";
			}
			ucsaMap.put("orderStatus", orderStatus);

			String failedDesc = resJson.getData().getFailedDesc();
			if (StringUtils.isEmpty(failedDesc)) {
				failedDesc = "";
			}
			ucsaMap.put("failedDesc", failedDesc);
			
			SdkGameEmbedsdkMapper sdkGameEmbedsdkMapper = dal
					.getMapper(SdkGameEmbedsdkMapper.class);
			SdkGameEmbedsdkExample sdkGameEmbedsdkExample = new SdkGameEmbedsdkExample();
			sdkGameEmbedsdkExample.createCriteria()
					.andPayChannelCodeEqualTo(payChannelCode)
					.andAppidEqualTo(gameId);
			SdkGameEmbedsdk sdkGameEmbedsdk = sdkGameEmbedsdkMapper
					.selectOne(sdkGameEmbedsdkExample);
			if (sdkGameEmbedsdk != null) {
				logger.debug("已获取到支付密钥 =" + sdkGameEmbedsdk.getAppsecret());
				logger.debug("已获取到游戏ID =" + sdkGameEmbedsdk.getGameId());
				encryptKey = sdkGameEmbedsdk.getAppsecret();
				gameid = sdkGameEmbedsdk.getGameId();
			}
			

			String signature1 = getSign(ucsaMap,encryptKey);
			
			if(signature1.equals(sign)){
				//验证成功
				logger.info("Ucsa九游验证成功,the sdkucsapay pay notify tradeId ="
						+ resJson.getData().getTradeId());
				SdkNotifyMmdoMapper sdkNotifyMmdoMapper = dal
						.getMapper(SdkNotifyMmdoMapper.class);
				SdkNotifyMmdoExample sdkNotifyMmdoExample = new SdkNotifyMmdoExample();
				sdkNotifyMmdoExample.createCriteria()
						.andPayChannelCodeEqualTo(payChannelCode)
						.andLinkidEqualTo(tradeId);
				SdkNotifyMmdo sdkNotifyMmdo = sdkNotifyMmdoMapper
						.selectOne(sdkNotifyMmdoExample);
				if (sdkNotifyMmdo != null) {
					// 表示已有订单
					if (sdkNotifyMmdo.getNotifyStatus() == 1) {
						// 表示已有订单成功处理过
						result = success_mgs;
					} else {
						// 表示已有订单未成功处理
						if ("0".equals(result)) {
							// 表示订单成功，修改相关状态
							sdkNotifyMmdo.setNotifyStatus(1);
							result = success_mgs;
						} else {
							// 表示订单失败，修改相关状态
							result = success_mgs;
						}
						sdkNotifyMmdoMapper
								.updateByPrimaryKeySelective(sdkNotifyMmdo);
					}
				} else {
					// 表示未处理过的订单，待处理

					// 在UC九游表回调表添加记录sdk_notify_ucsasdk
					SdkNotifyUcsasdk sdkNotifyUcsasdk=new SdkNotifyUcsasdk();
					sdkNotifyUcsasdk.setTradeid(tradeId);
					Date tradetimeDate=StrToDate(tradeTime);
					sdkNotifyUcsasdk.setTradetime(tradetimeDate);
					sdkNotifyUcsasdk.setOrderid(orderId);
					sdkNotifyUcsasdk.setGameid(gameId);
					Float amountFloat=Float.parseFloat(amount);
					sdkNotifyUcsasdk.setAmount(amountFloat);
					sdkNotifyUcsasdk.setPaytype(payType);
					sdkNotifyUcsasdk.setAttachinfo(attachInfo);
					sdkNotifyUcsasdk.setOrderstatus(orderStatus);
					sdkNotifyUcsasdk.setFaileddesc(failedDesc);
					sdkNotifyUcsasdk.setVer(ver);
					sdkNotifyUcsasdk.setSignature(sign);
					SdkNotifyUcsasdkMapper sdkNotifyUcsasdkMapper=dal.getMapper(SdkNotifyUcsasdkMapper.class);
					sdkNotifyUcsasdkMapper.insert(sdkNotifyUcsasdk);
					

					// 在sdk_notify_mmdo表添加记录
					SdkNotifyMmdo notifyMmdo = new SdkNotifyMmdo();
					notifyMmdo.setLinkid(tradeId);
					//notifyMmdo.setSpid(payType);
					// notifyMmdo.setCmd(cmd);
					// notifyMmdo.setMobile(mobile);
					// notifyMmdo.setSpnum(spnum);
					// notifyMmdo.setKey(key);
					notifyMmdo.setGameId(gameid);
					notifyMmdo.setAmount(amountFloat);
					int operationType=0;
					if("305".equals(payType)){
						operationType=1;
					}else if("306".equals(payType)){
						operationType=2;
					}else if("307".equals(payType)){
						operationType=3;
					}else{
						operationType=0;
					}
					notifyMmdo.setOperationType(operationType);
					notifyMmdo.setPayChannelCode(payChannelCode);
					// notifyMmdo.setAdditionalStatus(additionalStatus);
					// notifyMmdo.setOrderNo(orderNo);
					notifyMmdo.setStatusDetail(failedDesc);
					notifyMmdo.setCreateTime(tradetimeDate);
					Integer notifyStatus = 0;
					if ("S".equals(orderStatus)) {
						notifyStatus = 1;
					}
					notifyMmdo.setNotifyStatus(notifyStatus);
					notifyMmdo.setOriginalcode(orderStatus);
					sdkNotifyMmdoMapper.insertSelective(notifyMmdo);
					result = success_mgs;
				}
			}else{
				//验证失败
				logger.info("Ucsa九游验证失败,the sdkucsapay pay notify tradeId ="
						+ resJson.getData().getTradeId());
				result = fail_mgs;
			}
			dal.commit();
			return response(result);
		} catch (Exception e) {
			logger.error("the sdkucsapay pay notify error!", e);
			result = fail_mgs;
			return response(result);
		} finally {
			dal.close();
		}
	}

	private Result response(String result) {
		return new Result(new ResultXJContent(result, result));
	}

	/**
	 * 获取MD5字符串,传过来的参数有9个
	 * 
	 * @param tradeId
	 * @param tradeTime
	 * @param orderId
	 * @param gameId
	 * @param amount
	 * @param payType
	 * @param attachInfo
	 * @param orderStatus
	 * @param failedDesc
	 * @return
	 */
	private String getSign(Map<String,String> map,String encryptKey) {
		String result = "";
		try {
			SortedMap<String, String> ucsaMap = new TreeMap<String, String>();
			for (String key : map.keySet()) {
				if("orderId".equals(key)){
					if(StringUtils.isNotEmpty(map.get("orderId"))&&StringUtils.isNotBlank(map.get("orderId"))){
						ucsaMap.put(key, map.get(key));
					}else{
						ucsaMap.remove(key);
					}
				}else if("attachInfo".equals(key)){
					if(StringUtils.isNotEmpty(map.get("attachInfo"))&&StringUtils.isNotBlank(map.get("attachInfo"))){
						ucsaMap.put(key, map.get(key));
					}else{
						ucsaMap.remove(key);
					}
				}else{
					ucsaMap.put(key, map.get(key));
				}
			}

			String s1 = "";
			for (Map.Entry<String, String> me : ucsaMap.entrySet()) {
				s1 = s1 + me.getKey() + "=" + me.getValue();
			}
			s1 = s1 + encryptKey;
			logger.debug("the sdkucsapay pay notify plaintext is :" + s1);
			result = DigestUtils.md5Hex(s1).toLowerCase();
			return result;
		} catch (Exception e) {
			logger.error("the sdkucsapay pay notify getSignature error =" + e);
			return "";
		}
	}

	/**
	 * 测试方法
	 * 
	 * @param appId
	 * @param cpOrderId
	 * @param cpUserInfo
	 * @param uid
	 * @param orderId
	 * @param orderStatus
	 * @param payFee
	 * @param productCode
	 * @param productName
	 * @param productCount
	 * @param payTime
	 * @param orderConsumeType
	 * @param partnerGiftConsume
	 * @return
	 */
	private String getContent(Map<String, String> map) {
		HttpClient httpclient = new DefaultHttpClient();
		String result = "";
		try {
			String sendUrl ="http://dev.leyogame.cn/api/m/UcsaSDKNotify";
			logger.debug("the sdkucsapay send api = " + sendUrl);
			HttpPost post = new HttpPost(sendUrl);
			
			JsonSdkucsapayDataRes res = new JsonSdkucsapayDataRes();
			for (String key : map.keySet()) {
				switch (key) {
				case "tradeId": {
					res.setTradeId(map.get(key));
					break;
				}
				case "tradeTime": {
					res.setTradeTime(map.get(key));
					break;
				}
				case "orderId": {
					res.setOrderId(map.get(key));
					break;
				}
				case "gameId": {
					res.setGameId(map.get(key));
					break;
				}
				case "amount": {
					res.setAmount(map.get(key));
					break;
				}
				case "payType": {
					res.setPayType(map.get(key));
					break;
				}
				case "attachInfo": {
					res.setAttachInfo(map.get(key));
					break;
				}
				case "orderStatus": {
					res.setOrderStatus(map.get(key));
					break;
				}
				case "failedDesc": {
					res.setFailedDesc(map.get(key));
					break;
				}
				default:
					break;
				}
			}
			
			JsonSdkucsapayRes r=new JsonSdkucsapayRes();
//			r.setVer("1.0");
			r.setVer(map.get("ver"));
			r.setData(res);
//			r.setSign("02b9238021851a818f9e0f94fddd26b7");
			r.setSign(map.get("sign"));
			
			String jsonBody = mapper.writeValueAsString(r);
			logger.info("the sdkucsapay send request json is :"+jsonBody);
			post.setEntity(new StringEntity(jsonBody, "UTF-8"));
			HttpResponse response = httpclient.execute(post);

			HttpEntity entity = response.getEntity();
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.info("the sdkucsapay send response content - content = "
					+ content);
			result = content;
			return result;
		} catch (Exception e) {
			logger.error("the sdkucsapay request error is :" + e, e);
			return "";
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
	}

	/**
	 * 日期转换成字符串
	 * 
	 * @param date
	 * @return str
	 */
	public static String DateToStr(Date date) {

		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String str = format.format(date);
		return str;
	}

	/**
	 * 字符串转换成日期
	 * 
	 * @param str
	 * @return date
	 */
	public static Date StrToDate(String str) {

		SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmss");
		Date date = null;
		try {
			date = format.parse(str);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return date;
	}

	public static void main(String args[]) throws Exception {
		UcsaSDKNotify test = new UcsaSDKNotify();
		Map<String, String> map = new HashMap<String, String>();		
		map.put("tradeId", "20151210172842004392");
		map.put("tradeTime","20151210172856");
		map.put("orderId", "1449739720124");
		map.put("gameId", "600398");
		map.put("amount", "4.00");
		map.put("payType", "999");
		map.put("attachInfo", "");
		map.put("orderStatus", "S");
		map.put("failedDesc", "");
		map.put("ver", "1.0");
		map.put("sign", "02b9238021851a818f9e0f94fddd26b7");
		
		String s=test.getContent(map);
		System.out.println("-----"+s);
		
//		String s1 = test.getSign(map,encryptKey);
//		System.out.println(s1);

//		String s2 = "code=value2name=value3personid=value1202cb962234w4ers2aa";
//		String s3 = DigestUtils.md5Hex(s2).toLowerCase();
//		System.out.println("----------" + s3);
	}
}
