package com.cheyooh.service.sdk.action.notify;

import java.util.Date;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang.StringUtils;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Cmd;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.ResultXJContent;
import com.cheyooh.service.framework.idata.StatusCode;
import com.cheyooh.service.sdk.cfg.Cfg;
import com.cheyooh.service.sdk.db.dao.SdkCmccReadIdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkNotifyMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkPhoneSegmentMapper;
import com.cheyooh.service.sdk.db.dao.SdkTelephoneMapper;
import com.cheyooh.service.sdk.db.entity.SdkCmccReadIdo;
import com.cheyooh.service.sdk.db.entity.SdkCmccReadIdoExample;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdo;
import com.cheyooh.service.sdk.db.entity.SdkOrder;
import com.cheyooh.service.sdk.db.entity.SdkOrderExample;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdo;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdoExample;
import com.cheyooh.service.sdk.db.entity.SdkPhoneSegment;
import com.cheyooh.service.sdk.db.entity.SdkPhoneSegmentExample;
import com.cheyooh.service.sdk.db.entity.SdkTelephone;
import com.cheyooh.service.sdk.db.entity.SdkTelephoneExample;

public class CuccxxResultNotify extends AbstractNotifyService<Cmd> {
	private static final String CUCC_XX = "cuccxx";
	private static final String key = Cfg.cfg.getString("sdk.cuccxx.key");

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#verify(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@Override
	protected Result verify(Cmd cmd) {
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#execute(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@Override
	protected Result execute(Cmd cmd) {
		DAL dal = DALFactory.createDAL();
		String orderNo="";
		try {
			String serviceid = cmd.getServiceContext().getRequest()
					.getParameter("serviceid");
			if (serviceid.equals("validateorderid")) {
				String orderid = cmd.getServiceContext().getRequest()
						.getParameter("orderid");
				if(StringUtils.isEmpty(orderid)){
					orderid="";
				}else{
					orderNo=orderid.substring(0, 16);
				}
				logger.info("the Cuccxx orderid notify is :"+orderid);
				logger.debug("the Cuccxx orderid notify is :"+orderid);
				String signMsg = cmd.getServiceContext().getRequest()
						.getParameter("signMsg");
				logger.info("the Cuccxx signMsg notify is :"+signMsg);
				logger.debug("the Cuccxx signMsg notify is :"+signMsg);
				
				SdkOrderMapper ordermapper = dal
						.getMapper(SdkOrderMapper.class);
				SdkOrderExample orderexample = new SdkOrderExample();
				orderexample.createCriteria().andOrderNoEqualTo(orderNo);
				SdkOrder sdkorder = ordermapper.selectOne(orderexample);
				if (sdkorder != null) {
					String sign = DigestUtils.md5Hex(orderid + key);
					if (sign.equals(signMsg)) {
						logger.debug("the Cuccxx ValidateOrderid notify is :ok");
						
						return success();
					}
				}
			} else if (serviceid.equals("notifyresult")) {
				String orderid = cmd.getServiceContext().getRequest()
						.getParameter("orderid");
				if(StringUtils.isEmpty(orderid)){
					orderid="";
				}else{
					orderNo=orderid.substring(0, 16);
				}
				String phonenum = cmd.getServiceContext().getRequest()
						.getParameter("phonenum");
				String hRet = cmd.getServiceContext().getRequest()
						.getParameter("hRet");
				logger.debug("the cuccxx hRet = " + hRet);
				logger.info("the cuccxx hRet = " + hRet);
				String status = cmd.getServiceContext().getRequest()
						.getParameter("status");
				String signMsg = cmd.getServiceContext().getRequest()
						.getParameter("signMsg");
				
				if (StringUtils.isEmpty(hRet) || hRet.equals("1")) {
					logger.debug("the cuccxx orderNo is " + orderid
							+ ",hRet is " + hRet + ",phonenum is " + phonenum
							+ ",status is " + status + ",signMsg is " + signMsg);
					return StatusCode.ERR_NOTFOUND().setMessage("支付失败！");
				}

				logger.debug("the cuccxx orderNo = " + orderNo);

				SdkOrderMapper sdkOrderMapper = dal
						.getMapper(SdkOrderMapper.class);
				SdkOrderExample sdkOrderExample = new SdkOrderExample();
				sdkOrderExample.createCriteria().andOrderNoEqualTo(orderNo);
				SdkOrder sdkorder = sdkOrderMapper.selectOne(sdkOrderExample);

				SdkNotifyMmdo sdkNotifyMmdo = new SdkNotifyMmdo();
				sdkNotifyMmdo.setLinkid(orderNo);
				if (sdkorder != null) {
					SdkOrderMmdoMapper sdkOrderMmdoMapper = dal
							.getMapper(SdkOrderMmdoMapper.class);
					SdkOrderMmdoExample sdkOrderMmdoExample = new SdkOrderMmdoExample();
					sdkOrderMmdoExample.createCriteria().andPayIdEqualTo(
							sdkorder.getPayId());
					SdkOrderMmdo sdkOrderMmdo = sdkOrderMmdoMapper
							.selectOne(sdkOrderMmdoExample);
					if (sdkOrderMmdo != null) {
						sdkNotifyMmdo.setSpid(sdkOrderMmdo.getReqSendNumber());
						sdkNotifyMmdo.setCmd(sdkOrderMmdo.getRespSendContent());
						sdkNotifyMmdo.setMobile(phonenum);
						sdkNotifyMmdo.setSpnum(sdkOrderMmdo.getReqSendNumber());
						SdkPhoneSegmentMapper sdkPhoneSegmentMapper = dal
								.getMapper(SdkPhoneSegmentMapper.class);
						SdkPhoneSegmentExample sdkPhoneSegmentExample = new SdkPhoneSegmentExample();
						sdkPhoneSegmentExample.createCriteria()
								.andPhoneSegmentCodeEqualTo(
										parseInteger(phonenum.substring(0, 7)));
						SdkPhoneSegment sdkPhoneSegment = sdkPhoneSegmentMapper
								.selectOne(sdkPhoneSegmentExample);
						if (sdkPhoneSegment != null) {
							sdkNotifyMmdo.setKey(sdkPhoneSegment
									.getProvinceNo().toString());
						}
						sdkNotifyMmdo.setGameId(sdkOrderMmdo.getGameId());
						sdkNotifyMmdo.setAmount(sdkOrderMmdo
								.getReqOrderAmount());
						sdkNotifyMmdo.setCreateTime(new Date());
						sdkNotifyMmdo.setOperationType(2);
						sdkNotifyMmdo.setPayChannelCode(CUCC_XX);
						SdkNotifyMmdoMapper sdkNotifyMmdoMapper = dal
								.getMapper(SdkNotifyMmdoMapper.class);
						sdkNotifyMmdoMapper.insertSelective(sdkNotifyMmdo);
					}
				}
				dal.commit();
				return success();
			}
		} catch (Exception e) {
			logger.error("the Cuccxx notify error!", e);
			fail("Exception: " + e.getMessage() + ", class: ".getClass());
		} finally {
			dal.close();
		}
		return fail("fail");
	}

	private Result success() {
		
		return new Result(new ResultXJContent("ok", "ok"));
	}

	private Result fail(String msg) {
		// log
		return new Result(new ResultXJContent(msg, msg));
	}

	private Integer parseInteger(String str) {
		Integer num = null;
		try {
			if (StringUtils.isNotBlank(str)) {
				num = Integer.valueOf(str);
			}
		} catch (NumberFormatException e) {
			logger.warn("parse number string error! str = " + str);
		}
		return num;
	}
}
