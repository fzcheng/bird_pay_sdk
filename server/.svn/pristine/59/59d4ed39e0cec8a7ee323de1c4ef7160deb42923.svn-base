package com.cheyooh.service.sdk.action.notify;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.ServletRequest;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.ResultXJContent;
import com.cheyooh.service.sdk.cfg.Cfg;
import com.cheyooh.service.sdk.db.dao.SdkOrderMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMo9Mapper;
import com.cheyooh.service.sdk.db.entity.SdkOrder;
import com.cheyooh.service.sdk.db.entity.SdkOrderMo9;
import com.cheyooh.service.sdk.idata.CmdMo9Order;
import com.mokredit.payment.Md5Encrypt;

public class Mo9Notify  extends AbstractNotifyService<CmdMo9Order>{

	@Override
	protected Result verify(CmdMo9Order cmd) {
		try{
			// 获得通知参数			 
			Map<String,String> params = getParams(cmd.getServiceContext().getRequest());
			/**签名*/
			String sign = params.get("sign").toString();
			String key=Cfg.cfg.getString("sdk.pay.mo9.RSA_PRIVATE");
			String expect=Md5Encrypt.sign(params, key);
			if(!sign.equalsIgnoreCase(expect))
			{/***签名验证通过*/
				logger.error("签名错误, 期望值: "+expect);
				return fail();
			}
		}catch(Exception e){
			// 获得通知参数			 
			logger.info("验证异常:"+e.toString(),e);	
			return fail();
		}
		
		return null;
	}

	@Override
	protected Result execute(CmdMo9Order cmd) {
		 DAL dal=DALFactory.createDAL();
		 try{
			 SdkOrderMo9Mapper mo9Mapper=dal.getMapper(SdkOrderMo9Mapper.class);
			 SdkOrderMapper orderMapper=dal.getMapper(SdkOrderMapper.class);
			 String tradeNo=cmd.getExtra_param();
			  
			 logger.info("tradeNo:"+tradeNo);
			 SdkOrder order=orderMapper.selectByPrimaryKey(tradeNo);
			 if(order!=null){
				 SdkOrderMo9 orderMo9=mo9Mapper.selectByPrimaryKey(order.getPayId());
				 if(orderMo9!=null){
					 setupOrderStatus(cmd,order,orderMo9);
					 mo9Mapper.updateByPrimaryKeySelective(orderMo9);
					 orderMapper.updateByPrimaryKeySelective(order);
					 dal.commit();
					 
					 NotifyOrder.doNotify(order);
					 
					 logger.info("Paid status: "+order.getStatus()+"("+cmd.getTrade_status()+"), payid: "+order.getPayId());
					 
					 return success();
				 }else{
					 return fail();
				 }
			 }else {
				 return fail();
			}
		 }catch(Exception e){			 
			 logger.error(e);
			 return fail();
		 }finally{
			 dal.close();
		 }

	}
	
	private void setupOrderStatus(CmdMo9Order cmd, SdkOrder order,
			SdkOrderMo9 orderMo9) {
		orderMo9.setNotifyTime(new Date());
		orderMo9.setNotifyCl(cmd.getLc());
		orderMo9.setNotifyCurrency(cmd.getCurrency());
		orderMo9.setNotifyNotifyRegTime(String.valueOf(new Date(System.currentTimeMillis())));
		orderMo9.setNotifyOutTradeNo(cmd.getTrade_no());
		orderMo9.setNotifyTradeStatus(cmd.getTrade_status());
		order.setCompleteTime(orderMo9.getNotifyTime());
		if (cmd.getTrade_status().equals("TRADE_SUCCESS")) {
			order.setStatus(1);
		}else {
			order.setStatus(3);
		}
		order.setStatusDetail("MO9."+cmd.getTrade_status());
		
		orderMo9.setNotifySubject(cmd.getItem_name());
		orderMo9.setNotifyTotalFee(Float.valueOf(cmd.getAmount()));
		orderMo9.setNotifyTradeNo(cmd.getTrade_no());
		
	}

	private Result success(){
		return new Result(new ResultXJContent("OK","OK"));
	}
	private Result fail(){
		return new Result(new ResultXJContent("fail","fail"));
	}

	/**
	 * 从HTTP请求中提取NOTIFY参数，
	 */
	private Map<String,String> getParams(ServletRequest req)
	{
		Map<String,String> payParams= new HashMap<String,String>();
		payParams.put("pay_to_email",req.getParameter("pay_to_email"));
		payParams.put("payer_id", req.getParameter("payer_id"));
		payParams.put("trade_no",req.getParameter("trade_no"));
		payParams.put("trade_status",req.getParameter("trade_status"));
		payParams.put("sign",req.getParameter("sign"));
		payParams.put("amount",req.getParameter("amount"));	
		payParams.put("currency", req.getParameter("currency"));
		payParams.put("req_amount",req.getParameter("req_amount"));
		payParams.put("req_currency",req.getParameter("req_currency"));
		payParams.put("item_name",req.getParameter("item_name"));
		payParams.put("lc",req.getParameter("lc"));
		payParams.put("invoice",req.getParameter("invoice"));
		/**extra_param为可选字段,如果你的支付请求中不包含该参数，则不需要提取.*/
		payParams.put("extra_param",req.getParameter("extra_param"));
		/**app_id为可选字段,如果你的支付请求中不包含该参数，则不需要提取.*/
		payParams.put("app_id",req.getParameter("app_id"));
		return payParams;
	}

}
