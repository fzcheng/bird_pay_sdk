package com.cheyooh.service.sdk.action.client;

import java.net.URLEncoder;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.StatusCode;
import com.cheyooh.service.sdk.cfg.Cfg;
import com.cheyooh.service.sdk.db.dao.SdkCuccZhangyunzyVerifyMapper;
import com.cheyooh.service.sdk.db.dao.SdkGamePayrepeatMapper;
import com.cheyooh.service.sdk.db.dao.SdkMmdoSettingMapper;
import com.cheyooh.service.sdk.db.dao.SdkMmdoShieldMapper;
import com.cheyooh.service.sdk.db.dao.SdkNotifyMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkOperatorPayChannelMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMmdoVerifycodeMapper;
import com.cheyooh.service.sdk.db.dao.SdkSwbInfoMapper;
import com.cheyooh.service.sdk.db.dao.SdkTelephoneMapper;
import com.cheyooh.service.sdk.db.entity.SdkCuccZhangyunzyVerify;
import com.cheyooh.service.sdk.db.entity.SdkGamePayrepeat;
import com.cheyooh.service.sdk.db.entity.SdkGamePayrepeatExample;
import com.cheyooh.service.sdk.db.entity.SdkMmdoSetting;
import com.cheyooh.service.sdk.db.entity.SdkMmdoShield;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdo;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdoExample;
import com.cheyooh.service.sdk.db.entity.SdkOperatorPayChannel;
import com.cheyooh.service.sdk.db.entity.SdkOrder;
import com.cheyooh.service.sdk.db.entity.SdkOrderExample;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdo;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdoExample;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdoVerifycode;
import com.cheyooh.service.sdk.db.entity.SdkSwbInfo;
import com.cheyooh.service.sdk.db.entity.SdkSwbInfoExample;
import com.cheyooh.service.sdk.db.entity.SdkTelephone;
import com.cheyooh.service.sdk.db.entity.SdkTelephoneExample;
import com.cheyooh.service.sdk.idata.CmdPay;
import com.cheyooh.service.sdk.idata.ResultCmccMmWaterWestParam;
import com.cheyooh.service.sdk.idata.ResultMobileMmpmParam;
import com.cheyooh.service.sdk.idata.ResultPayMmdoBlock;
import com.cheyooh.service.sdk.idata.ResultPayMmdoChargeTip;
import com.cheyooh.service.sdk.idata.ResultPayMmdoCommand;
import com.cheyooh.service.sdk.idata.ResultPayMmdoCommandList;
import com.cheyooh.service.sdk.idata.ResultPayMmdoInfo;
import com.cheyooh.service.sdk.idata.ResultPayMmdoInfoOrderList;
import com.cheyooh.service.sdk.idata.ResultSdkBaixunParam;
import com.cheyooh.service.sdk.idata.ResultSdkQipapayParam;
import com.cheyooh.service.sdk.idata.ResultSdkSkypayParam;
import com.cheyooh.service.sdk.idata.ResultSdkWimiPyaParam;
import com.cheyooh.service.sdk.idata.ResultSdkXqtpayParam;
import com.cheyooh.service.sdk.idata.ResultSdkZhuquepayParam;
import com.cheyooh.service.sdk.idata.ResultSdkcmccjiutianmiguParam;
import com.cheyooh.service.sdk.idata.ResultSdktppayParam;
import com.cheyooh.service.sdk.idata.ResultSnowfoxParam;
import com.cheyooh.service.sdk.idata.ResultSshellPayParam;
import com.cheyooh.service.sdk.idata.ResultWoAppstorePayParam;
import com.cheyooh.service.sdk.idata.Resultcmccgamebase;
import com.cheyooh.service.sdk.idata.Resultlovegame;
import com.cheyooh.service.sdk.idata.gameserver.BillingPeriodVo;
import com.cheyooh.service.sdk.idata.gameserver.JsonCmccDongmanRes;
import com.cheyooh.service.sdk.idata.gameserver.JsonCmccMopingDongman;
import com.cheyooh.service.sdk.idata.gameserver.JsonCmccYongzhengReqOrder;
import com.cheyooh.service.sdk.idata.gameserver.JsonCmccmmbaixunlingdongRes;
import com.cheyooh.service.sdk.idata.gameserver.JsonCtccXinwangRes;
import com.cheyooh.service.sdk.idata.gameserver.JsonCuccMusicbaseRes;
import com.cheyooh.service.sdk.idata.gameserver.JsonCuccYijianReqChannel;
import com.cheyooh.service.sdk.idata.gameserver.JsonCuccYijianReqParam;
import com.cheyooh.service.sdk.idata.gameserver.JsonCuccYijianRes;
import com.cheyooh.service.sdk.idata.gameserver.JsonLangTianRes;
import com.cheyooh.service.sdk.idata.gameserver.XmlCmccmmSzsyRes;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;

public class Pay_mmdo_repeat extends AbstractSdkClientService<CmdPay> {
	private String orderNo = "";
	private Integer operatorTypeParam = 0;
	private List<Integer> surplus_paytactics = new ArrayList<Integer>();
	private Integer current_paytactics = 0;
	private String paytacticsString = "";
	private int mobilephoneProvinceno = 0;
	private String mobilephoneNumber = "";
	private float realamount = 0;
	private String ip = "";
	private Boolean ifSameChannel = true;
	private String imsiParam = "";
	private String imeiParam = "";
	private String outtradeid = "";
	private boolean orderUpFaileIfNextPay=false;
	private String supplementTimeInterval = "";
	private Integer nextPaytactics=0;
	private String iccidParam = "";
	private String mobilephoneCenterNumberParam= "";
	private String sdkver_Param="";
	private boolean orderIfOver30m=false;
	private Date reqOrderNoTime = new Date();
	
	private static final String GAME_PAY_VERSION = "3.0.6";
	private static final String WO_APPSTORE_ORDER_PREFIX = "00000000";
	private static final String splitContentString = Cfg.cfg.getString(
			"mmdo_content_spilt", "#");
	private static final String UnicomDiveStrin = Cfg.cfg.getString(
			"mmdo_unicom_spilt", "_");
	private static final String unicomAmountSpilt = Cfg.cfg.getString(
			"mmd_unicom_amount_spilt", "&");
	private static final String spiltSubContentString = Cfg.cfg.getString(
			"mmdo_sub_content_spilt", "\\|");
	private static final String Time_Interval = Cfg.cfg
			.getString("sdk.game.request.timeinterval");
	private static final Integer mmdoType = 9;
	
	private static final String WO_APPSTORE = "woappstore";
	private static final String MOBILE_MMPM = "mobilemmpm"; // 移动MM
	private static final String LoveGame = "mmpmlovegame"; // 电信爱游戏
	private static final String SSHELL = "sshell"; // 银贝壳
	private static final String SDKWIMIPAY = "sdkwimipay"; // 微米支付
	private static final String SNOWFOX = "snowfox"; // 移动时代汇盟支付
	private static final String SDKBAIXUN = "sdkbaixun"; // 移动深圳柏讯灵动
	private static final String SDKBAIXUN_XLMCG = "sdkbaixun_xlmcg"; // 移动深圳柏讯灵动小龙萌闯关
	private static final String SDKBAIXUN_TTXHB = "sdkbaixun_ttxhb"; // 移动深圳柏讯灵动天天小伙伴
	private static final String SDKBAIXUN_GTYX = "sdkbaixun_gtyx"; // 移动深圳柏讯灵动钢铁英雄
	private static final String SDKBAIXUN_WSDZZ = "sdkbaixun_wsdzz"; // 移动深圳柏讯灵动完胜大作战
	private static final String SDKBAIXUN_CKZZ = "sdkbaixun_ckzz"; // 移动深圳柏讯灵动苍空之战
	private static final String SDKXQTPAY = "sdkxqtpay"; // 星启天微信支付
	private static final String SDKSKYPAY = "sdkskypay"; // 斯凯指易付
	private static final String SDKTPPAY = "sdktppay"; // 明天动力支付
	private static final String CMCCMMWATERWEST = "cmccmmwaterwest"; // 移动九天乐游MM强联网
	private static final String CMCCGAMEBASE = "cmccgamebase"; // 移动游戏基地
	private static final String ZMZF = "zmzf"; // 掌盟支付
	private static final String MOBILE_GAME_BASE_PM = "mobilegamebasepm";	//移动原宿页游
	private static final String CMCCMMSZSY = "cmccmmszsy";	//中移动MM深圳首游
	private static final String CMCC49YOU = "cmcc49you";	//移动49游页游
	private static final String CMCCMMBAIXUNLINGDONGURL = "cmccmmbaixunlingdongUrl";
	private static final String CMCCXINGTIANYUANSMS = "cmccxingtianyuansms";//移动深圳星天元全网短代
	private static final String TELECOMLANGTIAN = "telecomlangtian";//电信朗天短信指令
	private static final String MMPMLOVECARTOON = "mmpmlovecartoon";//电信爱动漫
	private static final String CTCCLOVEMUSIC = "ctcclovemusic";//电信爱音乐
	private static final String CUCCMUSICBASE = "cuccmusicbase";//联通迈峰音乐基地
	private static final String SDKQIPAPAY = "sdkqipapay"; //奇葩SDK
	private static final String SDKZHUQUEPAY = "sdkzhuquepay";//朱雀SDK
	private static final String CUCCYIJIAN = "cuccyijian";//联通易简支付
	private static final String CUCCZHANGYUNZY = "cucczhangyunzy";//联通掌云中音验证码校正支付
	private static final String SDKCMCCJIUTIANMIGU = "sdkcmccjiutianmigu";//移动九天咪咕SDK支付
	private static final String CUCCYIJIANWOMUSIC = "cuccyijianwomusic"; //联通易简沃音乐支付
	private static final String CTCCXINWANG = "ctccxinwang"; //电信欣网支付
	private static final String CMCCDONGMAN = "cmccdongman"; //移动动漫支付
	private static final String CMCCYONGZHENG = "cmccyongzheng";//移动永正电子阅读RDO
	private static final String CMCCMOPINGDONGMAN = "cmccmopingdongman";//移动魔屏动漫wap支付
	
	private SdkOrder sdkOrder = null;
	private SdkOrderMmdo sdkOrderMmdo = null;
	private SdkOperatorPayChannel sdkOperatorPayChannel = null;
	private SdkMmdoSetting sdkMmdoSetting = null;
	private SdkNotifyMmdo sdkNotifyMmdo=null;
	private Result finalresult = null;


	private static final ObjectMapper mapper = new ObjectMapper();
	static {
		// mapper.setPropertyNamingStrategy(PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES);
		// or jackson 2.0
		mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,
				false);
		mapper.setSerializationInclusion(Include.NON_NULL);
		// jackson 1.9 and before
		// mapper.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES,
		// false);
	}

	@Override
	protected Result verify(CmdPay cmd) {
		orderNo = cmd.getServiceContext().getRequest().getParameter("order_no");
		if (StringUtils.isEmpty(orderNo) || StringUtils.isBlank(orderNo)) {
			return StatusCode.ERR_PARAMETER().setMessage("无法获取订单号");
		}
		return super.verify(cmd);
	}

	@Override
	protected Result execute(CmdPay cmd) {
		DAL dal = DALFactory.createDAL();
		try {
			long sy = System.currentTimeMillis();
			long sy1 = System.currentTimeMillis();
			logger.info("the Pay_mmdo_repeat paytime,1---" + sy
					+ "time is :" + (sy1 - sy));
			
			//判断是否需要进行下个通道支付
			SdkGamePayrepeatMapper sdkGamePayrepeatMapper=dal.getMapper(SdkGamePayrepeatMapper.class);
			SdkGamePayrepeatExample  sdkGamePayrepeatExample=new SdkGamePayrepeatExample();
			sdkGamePayrepeatExample.createCriteria().andGameIdEqualTo(game.getGameId()).andUsestateEqualTo(1);
			SdkGamePayrepeat sdkGamePayrepeat=sdkGamePayrepeatMapper.selectOne(sdkGamePayrepeatExample);
			if(sdkGamePayrepeat==null){
				logger.debug("the Pay_mmdo_repeat sdkGamePayrepeat is null");
				finalresult = getBlankResult();
				return finalresult;
			}

			SdkOrderMapper sdkOrderMapper = dal.getMapper(SdkOrderMapper.class);
			SdkOrderExample sdkOrderExample = new SdkOrderExample();
			sdkOrderExample.createCriteria().andOrderNoEqualTo(orderNo);
			sdkOrder = sdkOrderMapper.selectOne(sdkOrderExample);
			if (sdkOrder == null) {
				logger.debug("the Pay_mmdo_repeat sdkOrder is null");
				finalresult = getBlankResult();
				return finalresult;
			}

			SdkOrderMmdoMapper sdkOrderMmdoMapper = dal
					.getMapper(SdkOrderMmdoMapper.class);
			SdkOrderMmdoExample sdkOrderMmdoExample = new SdkOrderMmdoExample();
			sdkOrderMmdoExample.createCriteria().andPayIdEqualTo(
					sdkOrder.getPayId());
			sdkOrderMmdo = sdkOrderMmdoMapper.selectOne(sdkOrderMmdoExample);
			if (sdkOrderMmdo == null) {
				logger.debug("the Pay_mmdo_repeat sdkOrderMmdo is null");
				finalresult = getBlankResult();
				return finalresult;
			}
			
			current_paytactics = sdkOrderMmdo.getNextPaytactics();
			paytacticsString = sdkOrderMmdo.getPaytactics();
			surplus_paytactics = getSurplusPaytactics(paytacticsString,
					current_paytactics);
			mobilephoneProvinceno = sdkOrderMmdo.getProvinceNo();
			mobilephoneNumber=sdkOrderMmdo.getMobilephone();
			operatorTypeParam = sdkOrderMmdo.getOperationType();
			ip = sdkOrderMmdo.getIpAddr();
			imsiParam = sdkOrderMmdo.getReqImsi();
			imeiParam = sdkOrderMmdo.getImei();
			iccidParam=sdkOrderMmdo.getIccid();
			mobilephoneCenterNumberParam=sdkOrderMmdo.getCenternumber();
			sdkver_Param=sdkOrder.getSdkver();
			
			boolean shield = false;
			// 此循环：如果是省份屏蔽，则进行下一个支付，直到其中一个可以计费支付为止，则跳出循环
			for (int j = 0; j < surplus_paytactics.size(); j++) {
				current_paytactics = surplus_paytactics.get(j);
				shield = false;

				SdkMmdoSettingMapper sdkMmdoSettingMapper = dal
						.getMapper(SdkMmdoSettingMapper.class);
				sdkMmdoSetting = sdkMmdoSettingMapper
						.selectByPrimaryKey(current_paytactics);
				if (sdkMmdoSetting == null) {
					logger.debug("the Pay_mmdo_repeat sdkMmdoSetting is null");
					finalresult = getBlankResult();
					return finalresult;
				}

				SdkOperatorPayChannelMapper sdkOperatorPayChannelMapper = dal
						.getMapper(SdkOperatorPayChannelMapper.class);
				sdkOperatorPayChannel = sdkOperatorPayChannelMapper
						.selectByPrimaryKey(sdkMmdoSetting
								.getOperatorPayChannelId());
				if (sdkOperatorPayChannel == null) {
					logger.debug("the Pay_mmdo_repeat sdkOperatorPayChannel is null");
					finalresult = getBlankResult();
					return finalresult;
				}

				// 判断是否省份屏蔽,如果没有屏蔽，则返回0，否则返回非0
				Integer pF = checkProvince(mobilephoneProvinceno,
						mobilephoneNumber, sdkOperatorPayChannel);
				if (pF != 0) {
					shield = true;
					continue;
				}
				// 为补点计费方式，循环返回添加相应短信指令
				String leyoadditional = cmd.getServiceContext().getRequest()
						.getParameter("leyoadditional");
				// 为兼容旧版本sdk，需客户端传入参数leyoadditional，并把additionalcount作为补点计费的循环次数
				int totalcount = 1;
				// 判断实际发送金额是否为空，如为空，则用amount,不为空，则用realamount
				realamount = sdkMmdoSetting.getAmount();
				if (sdkMmdoSetting.getRealAmount() != null) {
					realamount = sdkMmdoSetting.getRealAmount();
				}

				String[] additionallist = null;
				if (StringUtils.isNotEmpty(leyoadditional)
						&& StringUtils.isNotBlank(leyoadditional)
						&& sdkMmdoSetting.getAdditional() == 1
						&& StringUtils.isNotEmpty(sdkMmdoSetting.getAddList())
						&& StringUtils.isNotBlank(sdkMmdoSetting.getAddList())) {
					additionallist = sdkMmdoSetting.getAddList().split("#");
					totalcount = 1 + additionallist.length;
				}

				int optChannelId = sdkMmdoSetting.getOperatorPayChannelId();
				ResultPayMmdoInfoOrderList resultPayMmdoInfoOrderList = new ResultPayMmdoInfoOrderList();
				resultPayMmdoInfoOrderList.setOrder_list_type("additional");

				ResultPayMmdoInfo finalpayinfo = null;

				for (int sendsmsnum = 0; sendsmsnum < totalcount; sendsmsnum++) {

					logger.debug("the Pay_mmdo_repeat sendsmsnum " + (sendsmsnum + 1)
							+ " mmdoSettingId is :" + sdkMmdoSetting.getId());
					SdkOrder sdkorder_supplement=null;
					if (totalcount > 1 && sendsmsnum != 0) {
						// 获取补点计费的计费点，第一个循环当sendsmsnum=0时不会跳到这里
						sdkMmdoSetting = sdkMmdoSettingMapper
								.selectByPrimaryKey(parseInteger(additionallist[sendsmsnum - 1]));
						// 重新把补点计费的金额放在realamount
						realamount = sdkMmdoSetting.getAmount();
						if (sdkMmdoSetting.getOperatorPayChannelId() != optChannelId) {
							ifSameChannel = false;
							optChannelId = sdkMmdoSetting
									.getOperatorPayChannelId();
						}
						
						//支付失败另选通道功能，下个通道如果有补点，则添加订单记录
						sdkorder_supplement = createOrder(cmd, mmdoType);
						orderNo=sdkorder_supplement.getOrderNo();
					}

					// 不存在计费
					if (sdkMmdoSetting == null) {
						logger.error("the Pay_mmdo_repeat SdkMmdoSetting is not found");
						break;
					}

					logger.info("the Pay_mmdo_repeat SdkMmdoSetting is : orderNo =" + orderNo
							+ ", gameid =" + sdkMmdoSetting.getGameId()
							+ ", number = " + sdkMmdoSetting.getNumber()
							+ ", content = " + sdkMmdoSetting.getContent()
							+ ", price = " + realamount + ", channelID = "
							+ sdkMmdoSetting.getOperatorPayChannelId()
							+ ", id = " + sdkMmdoSetting.getId());

					sdkOperatorPayChannel = sdkOperatorPayChannelMapper
							.selectByPrimaryKey(sdkMmdoSetting
									.getOperatorPayChannelId());
					
					orderIfOver30m=judgeReqOrderTimeOver30m(dal, operatorTypeParam, imsiParam, sdkOperatorPayChannel,
							reqOrderNoTime);

					ResultPayMmdoInfo payinfo = new ResultPayMmdoInfo();
					payinfo.setOrder_no(orderNo);
					payinfo.setSms_pay_type(sdkOperatorPayChannel.getSmsType());
					String sms_content_type = "1";
					String channelCode = sdkOperatorPayChannel.getChannelCode();
					if (sdkOperatorPayChannel.getSmsContentType() == 2) {
						// 若以二进制方式作为发送短信内容，则在渠道标志后加上"@data"
						sms_content_type = "2";
					} else {
						sms_content_type = "1";
					}
					payinfo.setSms_type(channelCode);
					payinfo.setSms_content_type(sms_content_type);
					payinfo.setType("mmdo");

					// 计费屏蔽设置
					// provinceFlag为计费屏蔽标识符，0代表没有屏蔽正常计费，1代表“未找到计费省”，2代表“计费时段屏蔽”，3代表“计费号段屏蔽”，4代表“计费省份屏蔽”
					Integer provinceFlag = checkProvince(mobilephoneProvinceno,
							mobilephoneNumber, sdkOperatorPayChannel);

					if (provinceFlag != 0) {
						break;
					}

					// 兼容旧版本sdk
					if (cmd.getSdkver().compareToIgnoreCase(GAME_PAY_VERSION) < 0) {
						if (!WO_APPSTORE.equals(sdkOperatorPayChannel
								.getChannelCode())) {
							payinfo.setSms_type("sms");
						}
					}

					// 设置是否弹出二次确认框
					String originalGameName = "";
					String chargetip = "0";
					String chargesuceesstip = "0";
					String loadingtipmin = "0";
					String chargefailtip = "0";
					ResultPayMmdoChargeTip resultPayMmdoChargeTip = new ResultPayMmdoChargeTip();
					resultPayMmdoChargeTip.setGamename(originalGameName);
					resultPayMmdoChargeTip.setChargetip(chargetip);
					resultPayMmdoChargeTip
							.setChargesuceesstip(chargesuceesstip);
					resultPayMmdoChargeTip.setLoadingtipmin(loadingtipmin);
					resultPayMmdoChargeTip.setChargefailtip(chargefailtip);
					String sendingtip = "正在加载中...";
					resultPayMmdoChargeTip.setSendingtip(sendingtip);
					payinfo.addContent(resultPayMmdoChargeTip);
					
					sdkOrderMmdo.setTradeid("");

					if (WO_APPSTORE.equals(sdkOperatorPayChannel
							.getChannelCode())) {
						SdkSwbInfoMapper sdkSwbInfoMapper = dal
								.getMapper(SdkSwbInfoMapper.class);
						SdkSwbInfoExample sdkSwbInfoExample = new SdkSwbInfoExample();
						sdkSwbInfoExample.createCriteria()
								.andOperatorTypeEqualTo(2)
								.andGameIdEqualTo(game.getGameId());
						SdkSwbInfo sdkSwbInfo = sdkSwbInfoMapper
								.selectOne(sdkSwbInfoExample);
						if (sdkSwbInfo == null) {
							return StatusCode.ERR_NOTFOUND().setMessage(
									"未找沃商配置");
						}

						payinfo.setOrder_no(WO_APPSTORE_ORDER_PREFIX
								+ payinfo.getOrder_no());
						ResultWoAppstorePayParam woPay = new ResultWoAppstorePayParam();
						logger.debug("the WO_APPSTORE game is : "
								+ Cfg.cfg.getString("sdk.woappstore.game"));
						woPay.setAppid(sdkSwbInfo.getAppId());
						woPay.setCompany(sdkSwbInfo.getCompany());
						woPay.setCpcode(sdkSwbInfo.getCpCode());
						woPay.setCpid(sdkSwbInfo.getCpId());
						woPay.setCustomcode("");
						woPay.setGame(game.getName());
						woPay.setMoney(realamount);
						woPay.setOtherpay(false);
						woPay.setPhone(sdkSwbInfo.getPhone());
						woPay.setProps("元");
						woPay.setUrl(Cfg.cfg
								.getString("sdk.woappstore.callbackUrl"));
						woPay.setVac(true);
						woPay.setVaccode(sdkMmdoSetting.getContent());
						woPay.setVacmode("single");
						payinfo.addContent(woPay);
					} else if (MOBILE_MMPM.equals(sdkOperatorPayChannel
							.getChannelCode())) {
						ResultMobileMmpmParam mobilePay = new ResultMobileMmpmParam();
						SdkSwbInfoMapper sdkSwbInfoMapper = dal
								.getMapper(SdkSwbInfoMapper.class);
						SdkSwbInfoExample sdkSwbInfoExample = new SdkSwbInfoExample();
						sdkSwbInfoExample.createCriteria()
								.andOperatorTypeEqualTo(1)
								.andGameIdEqualTo(game.getGameId());
						SdkSwbInfo sdkSwbInfo = sdkSwbInfoMapper
								.selectOne(sdkSwbInfoExample);
						if (sdkSwbInfo == null) {
							return StatusCode.ERR_NOTFOUND().setMessage(
									"未找MM配置");
						}
						mobilePay.setAppId(sdkSwbInfo.getAppId());
						mobilePay.setAppKey(sdkSwbInfo.getAppKey());
						payinfo.addContent(mobilePay);
					} else if (LoveGame.equals(sdkOperatorPayChannel
							.getChannelCode())) {
						String propsName = "";
						String propsAlias = "";
						propsAlias = sdkMmdoSetting.getContent();
						Resultlovegame resultlovegame = new Resultlovegame();
						resultlovegame.setPropsName(propsName);
						resultlovegame.setPropAlias(propsAlias);
						payinfo.addContent(resultlovegame);
					} else if (SSHELL.equals(sdkOperatorPayChannel
							.getChannelCode())) {
						String appKey = Cfg.cfg.getString("sdk.sshell.appKey");
						String productId = "";
						String productName = "";
						if (sdkMmdoSetting.getContent().contains("@")) {
							String[] c = sdkMmdoSetting.getContent().split("@");
							productName = c[0];
							productId = c[1];
						}

						String money = String.valueOf(((int) realamount));
						String gameName = Cfg.cfg
								.getString("sdk.sshell.gameName");
						String cpName = Cfg.cfg.getString("sdk.sshell.cpName");
						String customorderno = payinfo.getOrder_no();
						String channelId = Cfg.cfg
								.getString("sdk.sshell.channelId");
						ResultSshellPayParam resultSshellPayParam = new ResultSshellPayParam();
						resultSshellPayParam.setAppKey(appKey);
						resultSshellPayParam.setProductId(productId);
						resultSshellPayParam.setProductName(productName);
						resultSshellPayParam.setMoney(money);
						resultSshellPayParam.setGameName(gameName);
						resultSshellPayParam.setCpName(cpName);
						resultSshellPayParam.setCustomorderno(customorderno);
						resultSshellPayParam.setChannelId(channelId);
						payinfo.addContent(resultSshellPayParam);
					} else if (SDKWIMIPAY.equals(sdkOperatorPayChannel
							.getChannelCode())) {
						String sdkwimipayChannel = Cfg.cfg
								.getString("sdk.sdkwimipay.channel");
						String wimicode = sdkMmdoSetting.getContent();
						String gameid = String.valueOf(game.getGameId());
						String addi = "0";
						if (totalcount > 1 && sendsmsnum != 0) {
							// 如果是补点，则标志位1
							addi = "1";
						}
						String extdata = gameid + "aa" + addi;
						// String extdata=getEncryptOrderNo(order.getOrderNo());
						ResultSdkWimiPyaParam resultSdkWimiPyaParam = new ResultSdkWimiPyaParam();
						resultSdkWimiPyaParam.setChannel(sdkwimipayChannel);
						resultSdkWimiPyaParam.setWimicode(wimicode);
						resultSdkWimiPyaParam.setExtdata(extdata);
						payinfo.addContent(resultSdkWimiPyaParam);
					} else if (SNOWFOX.equals(sdkOperatorPayChannel
							.getChannelCode())) {
						ResultSnowfoxParam resultSnowfoxParam = new ResultSnowfoxParam();
						resultSnowfoxParam.setOrderNo(orderNo);
						String itemId = "";
						String name = "";
						String[] itemIdAndName = new String[2];
						if (sdkMmdoSetting.getContent().contains("@")) {
							itemIdAndName = sdkMmdoSetting.getContent().split(
									"@");
							name = itemIdAndName[0];
							itemId = itemIdAndName[1];
						}
						resultSnowfoxParam.setName(name);
						resultSnowfoxParam.setItemId(itemId);
						resultSnowfoxParam
								.setNameDesc("本商品将会发送短信, 点击确认进行发送, 如有问题, 请联系客服: 0755-8847374");
						Float snowfoxPrice = sdkMmdoSetting.getAmount() * 100;
						Integer p = snowfoxPrice.intValue();
						String price = String.valueOf(p);
						resultSnowfoxParam.setPrice(price);
						DecimalFormat fmat = new DecimalFormat("##0.00");
						String ff = fmat.format(sdkMmdoSetting.getAmount());
						resultSnowfoxParam.setPriceDesc(ff + " 元");
						payinfo.addContent(resultSnowfoxParam);
					} else if (SDKBAIXUN.equalsIgnoreCase(sdkOperatorPayChannel
							.getChannelCode())
							|| SDKBAIXUN_XLMCG
									.equalsIgnoreCase(sdkOperatorPayChannel
											.getChannelCode())
							|| SDKBAIXUN_TTXHB
									.equalsIgnoreCase(sdkOperatorPayChannel
											.getChannelCode())
							|| SDKBAIXUN_GTYX
									.equalsIgnoreCase(sdkOperatorPayChannel
											.getChannelCode())
							|| SDKBAIXUN_WSDZZ
									.equalsIgnoreCase(sdkOperatorPayChannel
											.getChannelCode())
							|| SDKBAIXUN_CKZZ
									.equalsIgnoreCase(sdkOperatorPayChannel
											.getChannelCode())) {
						ResultSdkBaixunParam resultSdkBaixunParam = new ResultSdkBaixunParam();
						resultSdkBaixunParam.setItemCode(sdkMmdoSetting
								.getContent());
						resultSdkBaixunParam.setOrderNo(orderNo);
						payinfo.addContent(resultSdkBaixunParam);
					} else if (SDKXQTPAY.equals(sdkOperatorPayChannel
							.getChannelCode())) {
						ResultSdkXqtpayParam resultSdkXqtpayParam = new ResultSdkXqtpayParam();
						resultSdkXqtpayParam.setMhtOrderNo(orderNo);
						String payChannelType = Cfg.cfg
								.getString("sdk.sdkxqtpay.payChannelType");
						resultSdkXqtpayParam.setPayChannelType(payChannelType);
						String consumerId = Cfg.cfg
								.getString("sdk.sdkxqtpay.consumerId");
						resultSdkXqtpayParam.setConsumerId(consumerId);
						String mhtOrderName = "";
						String mhtOrderDetail = "";
						String[] orderNameAndDetail = new String[2];
						if (sdkMmdoSetting.getContent().contains("@")) {
							orderNameAndDetail = sdkMmdoSetting.getContent()
									.split("@");
							mhtOrderName = orderNameAndDetail[0];
							mhtOrderDetail = orderNameAndDetail[1];
						}
						resultSdkXqtpayParam.setMhtOrderName(mhtOrderName);
						resultSdkXqtpayParam.setMhtOrderDetail(mhtOrderDetail);
						realamount = sdkMmdoSetting.getAmount();
						if (sdkMmdoSetting.getRealAmount() != null) {
							realamount = sdkMmdoSetting.getRealAmount();
						}
						Float xqtpayPrice = realamount * 100;
						Integer p = xqtpayPrice.intValue();
						String mhtOrderAmt = String.valueOf(p);
						resultSdkXqtpayParam.setMhtOrderAmt(mhtOrderAmt);
						String notifyUrl = Cfg.cfg
								.getString("sdk.sdkxqtpay.notifyUrl");
						resultSdkXqtpayParam.setNotifyUrl(notifyUrl);
						String superid = Cfg.cfg
								.getString("sdk.sdkxqtpay.superid");
						resultSdkXqtpayParam.setSuperid(superid);
						String key = Cfg.cfg.getString("sdk.sdkxqtpay.key");
						String beforeMd5String = "customerid=" + consumerId
								+ "&sdcustomno=" + orderNo + "&orderAmount="
								+ mhtOrderAmt + key;
						String sign = DigestUtils.md5Hex(beforeMd5String)
								.toUpperCase();
						resultSdkXqtpayParam.setSign(sign);
						payinfo.addContent(resultSdkXqtpayParam);
					} else if (SDKSKYPAY.equals(sdkOperatorPayChannel
							.getChannelCode())) {
						ResultSdkSkypayParam resultSdkSkypayParam = new ResultSdkSkypayParam();
						String merchantId = Cfg.cfg
								.getString("sdk.sdkskypay.merchantId");
						resultSdkSkypayParam.setMerchantId(merchantId);
						String merchantPasswd = Cfg.cfg
								.getString("sdk.sdkskypay.merchantPasswd");
						resultSdkSkypayParam.setMerchantPasswd(merchantPasswd);

						String[] basemsg = new String[4];
						if (sdkMmdoSetting.getNumber().contains("@")) {
							basemsg = sdkMmdoSetting.getNumber().split("@");
						}
						String appId = "";
						String appName = "";
						String payType = "";
						String gameType = "";
						if (basemsg.length == 4) {
							appId = basemsg[0];
							appName = basemsg[1];
							payType = basemsg[2];
							gameType = basemsg[3];
						}

						String[] detail = new String[3];
						if (sdkMmdoSetting.getContent().contains("@")) {
							detail = sdkMmdoSetting.getContent().split("@");
						}
						String payPointNum = "";
						String orderDesc = "";
						String productName = "";
						if (detail.length == 3) {
							payPointNum = detail[0];
							orderDesc = detail[1];
							productName = detail[2];
						}
						resultSdkSkypayParam.setAppId(appId);
						resultSdkSkypayParam.setAppName(appName);
						Float sdkskypayPrice = realamount * 100;
						Integer p = sdkskypayPrice.intValue();
						String price = String.valueOf(p);
						resultSdkSkypayParam.setPrice(price);
						String orderId = orderNo;
						resultSdkSkypayParam.setOrderId(orderId);
						resultSdkSkypayParam.setPayType(payType);
						resultSdkSkypayParam.setPayPointNum(payPointNum);
						String notifyAddress = Cfg.cfg
								.getString("sdk.sdkskypay.notifyAddress");
						resultSdkSkypayParam.setNotifyAddress(notifyAddress);
						resultSdkSkypayParam.setOrderDesc(orderDesc);
						resultSdkSkypayParam.setGameType(gameType);
						resultSdkSkypayParam.setProductName(productName);
						String channelId = cmd.getChannel();
						resultSdkSkypayParam.setChannelId(channelId);
						String reserved1 = orderNo;
						resultSdkSkypayParam.setReserved1(reserved1);
						Integer uid = gameSession.getUid();
						resultSdkSkypayParam.setUid(String.valueOf(uid));
						payinfo.addContent(resultSdkSkypayParam);
					} else if (SDKTPPAY.equalsIgnoreCase(sdkOperatorPayChannel
							.getChannelCode())) {
						ResultSdktppayParam resultSdktppayParam = new ResultSdktppayParam();
						String appId = sdkMmdoSetting.getNumber();
						resultSdktppayParam.setAppId(appId);
						resultSdktppayParam.setOrderNo(orderNo);
						int price = (int) realamount;
						resultSdktppayParam.setPrice(String.valueOf(price));
						String goodId = sdkMmdoSetting.getContent();
						resultSdktppayParam.setGoodId(goodId);
						String cpId=Cfg.cfg.getString("sdk.sdktppay.cpID");
						resultSdktppayParam.setCpId(cpId);
						payinfo.addContent(resultSdktppayParam);
					} else if (CMCCMMWATERWEST
							.equalsIgnoreCase(sdkOperatorPayChannel
									.getChannelCode())) {
						ResultCmccMmWaterWestParam resultCmccMmWaterWestParam = new ResultCmccMmWaterWestParam();
						String appId = sdkMmdoSetting.getNumber();
						logger.debug("the cmccmmwaterwest appId =" + appId);
						resultCmccMmWaterWestParam.setAppId(appId);
						String appKey = sdkMmdoSetting.getContent();
						logger.debug("the cmccmmwaterwest appKey =" + appKey);
						resultCmccMmWaterWestParam.setApiKey(appKey);
						String orderNosub = getEncryptOrderNo(orderNo);
						logger.debug("the cmccmmwaterwest orderNo ="
								+ orderNosub);
						resultCmccMmWaterWestParam.setOrderNo(orderNosub);
						String channel_waterwest = Cfg.cfg
								.getString("sdk.cmccmmwaterwest.channel");
						resultCmccMmWaterWestParam
								.setChannel(channel_waterwest);
						Float payPrice = realamount * 100;
						Integer p = payPrice.intValue();
						String price = String.valueOf(p);
						resultCmccMmWaterWestParam.setAmount(price);
						resultCmccMmWaterWestParam.setClientIp(ip);
						payinfo.addContent(resultCmccMmWaterWestParam);
					} else if (CMCCGAMEBASE
							.equalsIgnoreCase(sdkOperatorPayChannel
									.getChannelCode())) {
						Resultcmccgamebase resultcmccgamebase = new Resultcmccgamebase();
						String isRepeated = "1";
						resultcmccgamebase.setIsRepeated(isRepeated);
						String billingIndex = sdkMmdoSetting.getContent();
						resultcmccgamebase.setBillingIndex(billingIndex);
						resultcmccgamebase.setCpParam(orderNo);
						payinfo.addContent(resultcmccgamebase);
					}else if(SDKQIPAPAY.equalsIgnoreCase(sdkOperatorPayChannel
							.getChannelCode())){
						ResultSdkQipapayParam resultSdkQipapayParam=new ResultSdkQipapayParam();
						resultSdkQipapayParam.setOrderNo(orderNo);
						String payCode=sdkMmdoSetting.getContent();
						resultSdkQipapayParam.setPayCode(payCode);
						payinfo.addContent(resultSdkQipapayParam);
					}else if(SDKZHUQUEPAY.equalsIgnoreCase(sdkOperatorPayChannel
							.getChannelCode())){
						ResultSdkZhuquepayParam resultSdkZhuquepayParam=new ResultSdkZhuquepayParam();
						String price=String.valueOf(realamount);
						resultSdkZhuquepayParam.setPrice(price);
						String productName=sdkMmdoSetting.getContent();
						resultSdkZhuquepayParam.setProductName(productName);
						String cpParam=orderNo;
						resultSdkZhuquepayParam.setCpParam(cpParam);
						String appName=game.getName();
						resultSdkZhuquepayParam.setAppName(appName);
						String payCode="";
						resultSdkZhuquepayParam.setPayCode(payCode);
						payinfo.addContent(resultSdkZhuquepayParam);
					}else if (SDKCMCCJIUTIANMIGU.equalsIgnoreCase(sdkOperatorPayChannel
							.getChannelCode())) {
						ResultSdkcmccjiutianmiguParam resultSdkcmccjiutianmiguParam=new ResultSdkcmccjiutianmiguParam();
						Float sdkcmccjiutianmiguPrice = realamount * 100;
						Integer p = sdkcmccjiutianmiguPrice.intValue();
						String amount = String.valueOf(p);
						resultSdkcmccjiutianmiguParam.setAmount(amount);
						String cpapid=Cfg.cfg.getString("sdk.sdkcmccjiutianmigu.cpapid");
						resultSdkcmccjiutianmiguParam.setCpapid(cpapid);
						String chargingpid=Cfg.cfg.getString("sdk.sdkcmccjiutianmigu.chargingpid");
						resultSdkcmccjiutianmiguParam.setChargingpid(chargingpid);
						String chargepoint=sdkMmdoSetting.getContent();
						resultSdkcmccjiutianmiguParam.setChargepoint(chargepoint);
						resultSdkcmccjiutianmiguParam.setCpparam(orderNo);
						String channelid=Cfg.cfg.getString("sdk.sdkcmccjiutianmigu.channelid");
						resultSdkcmccjiutianmiguParam.setChannelid(channelid);
						payinfo.addContent(resultSdkcmccjiutianmiguParam);
					}

					// 保存下发信息
					String[] numberArray = sdkMmdoSetting.getNumber().split(
							splitContentString);
					String[] contentArray = sdkMmdoSetting.getContent().split(
							splitContentString);
					String[] shieldKeywordArray = sdkMmdoSetting
							.getShieldKeyword().split(splitContentString);
					String[] shieldNumberArray = sdkMmdoSetting
							.getShieldNumber().split(splitContentString);

					ResultPayMmdoCommandList payMmdoCommandList = new ResultPayMmdoCommandList();
					payMmdoCommandList.setImsi(imsiParam);
					payMmdoCommandList.setTime(sdkMmdoSetting.getInterval());
					SdkMmdoShieldMapper mmdoShieldMapper = dal
							.getMapper(SdkMmdoShieldMapper.class);

					StringBuffer numberBuff = new StringBuffer();
					int operatorType = operatorTypeParam;
					if (ZMZF.equals(sdkOperatorPayChannel.getChannelCode())) {
						operatorType = 4;// 代表全网
					}

					for (int i = 0; i < numberArray.length; i++) {
						String content = "";
						String number = numberArray[i];
						@SuppressWarnings("unused")
						String wapurl="";
						if (operatorType == 4) {
							if (ZMZF.equals(sdkOperatorPayChannel
									.getChannelCode())) {
								try {
									String zmzfResult = getZmzf(imeiParam,
											imsiParam,
											String.valueOf(realamount),
											orderNo, cmd.getRequestHost());
									logger.debug("the zmzf original content is :"
											+ zmzfResult);
									String[] r = zmzfResult.split("<:>");
									if (r[0].equals("SUCCESS")) {
										logger.debug("the zmzf content is :"
												+ r[2]);
										String c = "";
										if (r[2].startsWith("bin:")) {
											c = r[2].substring(4);
											logger.debug("1 the zmzf content is :"
													+ c);
											byte[] decBytes = Base64
													.decodeBase64(c
															.getBytes("ISO-8859-1"));
											content = new String(decBytes,
													"ISO-8859-1");
										} else {
											content = r[2];
											c = r[2];
										}
										number = r[1];
										sdkMmdoSetting.setNumber(r[1]);
										sdkMmdoSetting.setContent(c);
									} else {
										logger.error("zmzf获取短信内容异常" + r[0]);
										orderUpFaileIfNextPay = true;
									}
								} catch (Exception e) {
									logger.error("zmzf获取短信内容异常", e);
									orderUpFaileIfNextPay = true;
								}
							}
						} else if (operatorType == 1) {
							long sy31 = System.currentTimeMillis();
							logger.info("the Pay_mmdo_repeat paytime,31---" + sy + "time is :" + (sy31 - sy)
									+ ",orderNo =" + orderNo);
							if (MOBILE_GAME_BASE_PM
									.equalsIgnoreCase(sdkOperatorPayChannel
											.getChannelCode())) {
								content = orderNo;
							} else if (MOBILE_MMPM
									.equalsIgnoreCase(sdkOperatorPayChannel
											.getChannelCode())) {
								content = contentArray[i];
							} else if (CMCCMMSZSY
									.equalsIgnoreCase(sdkOperatorPayChannel
											.getChannelCode())) {
								try {
									Integer fee = (int) realamount * 100;
									String feeString = String.valueOf(fee);
									XmlCmccmmSzsyRes resultCmccmmSzsy = getCmccmmSzsy(
											imsiParam, imeiParam, feeString,
											orderNo, ip);
									if ("0".equals(resultCmccmmSzsy.getStatus())) {
										content = resultCmccmmSzsy.getContent();
										number = resultCmccmmSzsy.getNum();
										numberBuff.append(number).append(
												splitContentString);
									} else {
										content = resultCmccmmSzsy.getContent();
										number = resultCmccmmSzsy.getNum();
										numberBuff.append(number).append(
												splitContentString);
										logger.error("cmccmmszsy获取短信内容异常"
												+ resultCmccmmSzsy.getStatus());
										orderUpFaileIfNextPay = true;
									}
								} catch (Exception e) {
									logger.error("cmccmmszsy获取短信内容异常", e);
									orderUpFaileIfNextPay = true;
								}

							} else if (CMCC49YOU
									.equalsIgnoreCase(sdkOperatorPayChannel
											.getChannelCode())) {
								content = orderNo;
							} else if (CMCCMMBAIXUNLINGDONGURL
									.equalsIgnoreCase(sdkOperatorPayChannel
											.getChannelCode())) {
								try {
									String[] appAndSetting = new String[2];
									if (sdkMmdoSetting.getNumber()
											.contains("@")) {
										appAndSetting = sdkMmdoSetting
												.getNumber().split("@");
									}
									String app = appAndSetting[0];
									String setting = appAndSetting[1];
									String paycode = sdkMmdoSetting
											.getContent();
									logger.debug("the cmccmmbaixunlingdongUrl app="
											+ app
											+ ", setting="
											+ setting
											+ ", paycode=" + paycode);
									JsonCmccmmbaixunlingdongRes res = getCmccmmBaixunlingdongUrlContent(
											app, setting, paycode, imeiParam,
											imsiParam, orderNo, ip);
									if (StringUtils
											.isNotEmpty(res.getContent())) {
										content = res.getContent();
										number = res.getDest();
										if ("data".equals(res.getSmstype())) {
											payinfo.setSms_content_type("2");
										} else if ("text".equals(res
												.getSmstype())) {
											payinfo.setSms_content_type("1");
										}
									} else {
										logger.error("cmccmmbaixunlingdongUrl获取短信内容异常"
												+ res.getContent());
										orderUpFaileIfNextPay = true;
									}
								} catch (Exception e) {
									logger.error(
											"cmccmmbaixunlingdongUrl获取短信内容异常",
											e);
									orderUpFaileIfNextPay = true;
								}
							} else if (CMCCXINGTIANYUANSMS
									.equalsIgnoreCase(sdkOperatorPayChannel
											.getChannelCode())) {
								content = contentArray[i];
							} else if (CMCCDONGMAN
									.equalsIgnoreCase(sdkOperatorPayChannel.getChannelCode())) {
								try {
									Float price = realamount * 100;
									Integer p = price.intValue();
									String amount = String.valueOf(p);
									JsonCmccDongmanRes res = getCmccDongmanContent(imeiParam,imsiParam,amount);
									if ("0".equals(res.getStatus())) {
										content = res.getMessage();
										number = res.getReceiver();
										sdkMmdoSetting.setNumber(number);
										sdkMmdoSetting.setContent(content);
										String msgId=res.getMsgId();
										
										CmccDongmanReqThread cmccDongmanReqThread = new CmccDongmanReqThread(orderNo,msgId);
										cmccDongmanReqThread.start();
									} else {
										logger.error("cmccdongman获取短信内容异常" + res.getStatus());
										content = "";
										number = "";
									}
								} catch (Exception e) {
									logger.error("cmccdongman获取短信内容异常", e);
									content = "";
									number = "";
								}
							}else if (CMCCYONGZHENG
									.equalsIgnoreCase(sdkOperatorPayChannel.getChannelCode())) {
								try {
									if (StringUtils
											.isNotEmpty(mobilephoneNumber)
											&& StringUtils
													.isNotBlank(mobilephoneNumber)
											&& mobilephoneNumber.length() == 11) {
										// 已有手机号
										Integer fee = (int) realamount;
										String price = String.valueOf(fee);
										String appname=URLEncoder.encode(game.getName(), "utf-8");
										Pay_mmdo pay_mmdo=new Pay_mmdo();
										JsonCmccYongzhengReqOrder res = pay_mmdo.getYongzhengContent(
												price, orderNo,imsiParam,appname);
										SdkOrderMmdoVerifycodeMapper sdkOrderMmdoVerifycodeMapper=dal.getMapper(SdkOrderMmdoVerifycodeMapper.class);
										SdkOrderMmdoVerifycode sdkOrderMmdoVerifycode=new SdkOrderMmdoVerifycode();
										sdkOrderMmdoVerifycode.setOrderNo(orderNo);
										int p=fee*100;
										sdkOrderMmdoVerifycode.setPrice(p);
										sdkOrderMmdoVerifycode.setGameId(game.getGameId());
										sdkOrderMmdoVerifycode.setCreatedTime(reqOrderNoTime);
										sdkOrderMmdoVerifycode.setMobile(mobilephoneNumber);
										if ("1".equals(res.getState())) {
											outtradeid=res.getOrderNo();
											sdkOrderMmdoVerifycode.setOutTradeNo(res.getOrderNo());
											JsonCmccYongzhengReqOrder verifycoderes=pay_mmdo.getCmccYongzhengVerifyCode(res.getOrderNo(),mobilephoneNumber);
											sdkOrderMmdoVerifycode.setApplyResultcode(verifycoderes.getState());
											String applyResultmsg=mapper.writeValueAsString(verifycoderes);
											sdkOrderMmdoVerifycode.setApplyResultmsg(applyResultmsg);
											content = "";
											number = "";
											payMmdoCommandList.setFlagSend("10");
										}else{
											logger.error("cmccyongzheng获取短信内容异常"
													+ res.getState());
											sdkOrderMmdoVerifycode.setApplyResultcode(res.getState()
													);
											String applyResultmsg=mapper.writeValueAsString(res);
											sdkOrderMmdoVerifycode.setApplyResultmsg(applyResultmsg);
											content = "";
											number = "";
											orderUpFaileIfNextPay = true;
										}
										sdkOrderMmdoVerifycodeMapper.insertSelective(sdkOrderMmdoVerifycode);
									}else{
										//没有手机号
										payMmdoCommandList.setFlagSend("11");
										content = orderNo;
									}
								} catch (Exception e) {
									logger.error("cmccyongzheng获取短信内容异常", e);
									content = "";
									number = "";
									orderUpFaileIfNextPay = true;
								}
							}else if(CMCCMOPINGDONGMAN.equalsIgnoreCase(sdkOperatorPayChannel.getChannelCode())){
								try {
									String phoneNumber="";
									if (StringUtils
											.isNotEmpty(mobilephoneNumber)
											&& StringUtils
													.isNotBlank(mobilephoneNumber)
											&& mobilephoneNumber.length() == 11) {
										phoneNumber=mobilephoneNumber;
									}else {
										phoneNumber="15928876607";//写死手机号码
									}
									String paycode=sdkMmdoSetting.getContent();
									Pay_mmdo p=new Pay_mmdo();
									JsonCmccMopingDongman res=p.getCmccMopingDongmanContent(phoneNumber,paycode,orderNo);
									if ("00000".equals(res.getResultCode())) {
										outtradeid=res.getServerOrderNum();
										content = "";
										number = "";
										wapurl=res.getUrl();
									}else{
										logger.error("cmccmopingdongman获取短信内容异常"
												+ res.getResultCode());
										content = "";
										number = "";
									}
								} catch (Exception e) {
									logger.error("cmccmopingdongman获取短信内容异常", e);
									content = "";
									number = "";
								}
							}else {
								content = contentArray[i] + game.getGameId();
							}
						} else if (operatorType == 3) {
							long sy33 = System.currentTimeMillis();
							logger.info("the Pay_mmdo_repeat paytime,33---" + sy + "time is :" + (sy33 - sy)
									+ ",orderNo =" + orderNo);

							if (LoveGame.equalsIgnoreCase(sdkOperatorPayChannel
									.getChannelCode())) {
								content = contentArray[i];
							} else if (TELECOMLANGTIAN
									.equalsIgnoreCase(sdkOperatorPayChannel
											.getChannelCode())) {
								try {
									String fee = "";
									if (realamount < 1f) {
										fee = String.valueOf(realamount);
									} else {
										Integer p = (int) realamount;
										fee = String.valueOf(p);
									}
									String gameName = game.getName();
									String chargeName = contentArray[i];
									JsonLangTianRes res = getLangTianContent(
											fee, ip, orderNo.substring(2),
											imsiParam, gameName, chargeName);
									if ("0000".equals(res.getResultCode())) {
										content = res.getCode();
										number = res.getLongCode();
										sdkMmdoSetting.setNumber(number);
									} else if ("1001".equals(res
											.getResultCode())) {
										logger.error("游戏名称为空,the telecomlangtian error is "
												+ res.toString());
										orderUpFaileIfNextPay = true;
									} else if ("1002".equals(res
											.getResultCode())) {
										logger.error("计费点名称为空,the telecomlangtian error is "
												+ res.toString());
										orderUpFaileIfNextPay = true;
									} else if ("1003".equals(res
											.getResultCode())) {
										logger.error("Mac校验信息为空,the telecomlangtian error is "
												+ res.toString());
										orderUpFaileIfNextPay = true;
									} else if ("1004".equals(res
											.getResultCode())) {
										logger.error("资费为空,the telecomlangtian error is "
												+ res.toString());
										orderUpFaileIfNextPay = true;
									} else if ("1005".equals(res
											.getResultCode())) {
										logger.error("渠道id为空,the telecomlangtian error is "
												+ res.toString());
										orderUpFaileIfNextPay = true;
									} else if ("2001".equals(res
											.getResultCode())) {
										logger.error("渠道不存在,the telecomlangtian error is "
												+ res.toString());
										orderUpFaileIfNextPay = true;
									} else if ("2002".equals(res
											.getResultCode())) {
										logger.error("校验出错,the telecomlangtian error is "
												+ res.toString());
										orderUpFaileIfNextPay = true;
									} else if ("3001".equals(res
											.getResultCode())) {
										logger.error("没有可用指令,the telecomlangtian error is "
												+ res.toString());
										orderUpFaileIfNextPay = true;
									}
								} catch (Exception e) {
									logger.error("telecomlangtian获取短信内容异常", e);
									orderUpFaileIfNextPay = true;
								}
							} else if (MMPMLOVECARTOON
									.equalsIgnoreCase(sdkOperatorPayChannel
											.getChannelCode())) {
								content = contentArray[i] + orderNo;
							} else if (CTCCLOVEMUSIC
									.equalsIgnoreCase(sdkOperatorPayChannel
											.getChannelCode())) {
								content = contentArray[i] + orderNo;
							} else if(CTCCXINWANG.equalsIgnoreCase(sdkOperatorPayChannel
									.getChannelCode())){
								try{
									long t=System.currentTimeMillis()/1000;
									String timestamp=String.valueOf(t);
									Integer p=(int) realamount;
									String fee=String.valueOf(p);
									JsonCtccXinwangRes res=getCtccXinwangContent(timestamp, imsiParam, orderNo, fee);
									if("0".equals(res.getResult())){
										content = res.getDetail().get(0).getPer_orderId_amount();
										number = res.getSms();
									}else{
										content = "";
										number = "";
									}
								}catch(Exception e){
									logger.error("ctccxinwang获取短信内容异常", e);
									content = "";
									number = "";
								}
							}else {
								content = contentArray[i] + "-00"
										+ game.getCpId() + game.getGameId();
							}
						} else {
							// 联通
							long sy32 = System.currentTimeMillis();
							logger.info("the Pay_mmdo_repeat paytime,32---" + sy + "time is :" + (sy32 - sy)
									+ ",orderNo =" + orderNo);

							if (WO_APPSTORE
									.equalsIgnoreCase(sdkOperatorPayChannel
											.getChannelCode())) {
								String[] c = null;
								if (contentArray[i].contains("@")) {
									c = contentArray[i].split("@");
								}
								content = c[0];
							}else if (CUCCYIJIAN.equalsIgnoreCase(sdkOperatorPayChannel
									.getChannelCode())) {
								try {
									Float price = realamount * 100;
									Integer p = price.intValue();
									String zhuque_price = String.valueOf(p);
//									String ipAddr="59.56.13.58";
									String ipAddr=ip;
									String feeName=sdkMmdoSetting.getContent();
									JsonCuccYijianRes jsonCuccYijianRes=getCuccYijianContent(orderNo,zhuque_price,imsiParam,imeiParam,ipAddr,orderNo,feeName);
									if("0".equals(jsonCuccYijianRes.getStatus())){
										if("0".equals(jsonCuccYijianRes.getNoteChannels().get(0).getSendType())){
											content = jsonCuccYijianRes.getNoteChannels().get(0).getSendCmd();
											payinfo.setSms_content_type("1");
										}else if("1".equals(jsonCuccYijianRes.getNoteChannels().get(0).getSendType())){
											String c=jsonCuccYijianRes.getNoteChannels().get(0).getSendCmd();
											byte[] decBytes = Base64
													.decodeBase64(c
															.getBytes("ISO-8859-1"));
											content = new String(decBytes,
													"ISO-8859-1");
											payinfo.setSms_content_type("2");
										}
										outtradeid = jsonCuccYijianRes.getNoteChannels().get(0).getSequence();
										number = jsonCuccYijianRes.getNoteChannels().get(0).getSendNumber();
										sdkMmdoSetting.setNumber(number);
									}else {
										logger.error("cuccyijian获取短信内容异常"
												+ jsonCuccYijianRes.getStatus());
										orderUpFaileIfNextPay = true;
									}
								} catch (Exception e) {
									logger.error("联通易简获取短信内容异常", e);
									orderUpFaileIfNextPay = true;
								}
							}else if (CUCCMUSICBASE
									.equalsIgnoreCase(sdkOperatorPayChannel
											.getChannelCode())) {
								try {
									if (StringUtils.isBlank(mobilephoneNumber)) {
										mobilephoneNumber = "13137640720";
									}
									String productId = contentArray[i];
									JsonCuccMusicbaseRes res = getCuccMusicbaseContent(
											mobilephoneNumber, productId,
											imeiParam, imsiParam);
									if (StringUtils.isNotEmpty(res.getSms())
											&& StringUtils.isNotBlank(res
													.getSms())
											&& StringUtils.isNotEmpty(res
													.getPort())
											&& StringUtils.isNotBlank(res
													.getPort())) {
										content = res.getSms();
										number = res.getPort();
										sdkMmdoSetting.setNumber(number);
										if (StringUtils.isNotEmpty(res
												.getTradeid())) {
											outtradeid = res.getTradeid();
										}
									} else {
										logger.error("cuccmusicbase获取短信内容异常"
												+ res.getTradeid());
										if (StringUtils.isNotEmpty(res
												.getTradeid())) {
											outtradeid = res.getTradeid();
										}
										logger.error("cuccmusicbase error is "
												+ res.toString());
										orderUpFaileIfNextPay = true;
									}

								} catch (Exception e) {
									logger.error("联通音乐基地获取短信内容异常", e);
									orderUpFaileIfNextPay = true;
								}
							}else if (CUCCZHANGYUNZY.equalsIgnoreCase(sdkOperatorPayChannel
									.getChannelCode())) {
								try {
									if (StringUtils
											.isNotEmpty(mobilephoneNumber)
											&& StringUtils
													.isNotBlank(mobilephoneNumber)
											&& mobilephoneNumber.length() == 11) {
										// 已有手机号
										String result = getCuccZhangyunZhongyinContent(
												imeiParam, imsiParam,
												String.valueOf(realamount),
												orderNo, ip,
												mobilephoneNumber);
										String[] r = result.split("<:>");
										SdkCuccZhangyunzyVerifyMapper sdkCuccZhangyunzyVerifyMapper=dal.getMapper(SdkCuccZhangyunzyVerifyMapper.class);
										SdkCuccZhangyunzyVerify sdkCuccZhangyunzyVerify=new SdkCuccZhangyunzyVerify();
										if (r[0].equals("SUCCESS")) {
											outtradeid=r[1];
											sdkCuccZhangyunzyVerify.setOrderNo(orderNo);
											sdkCuccZhangyunzyVerify.setMobile(mobilephoneNumber);
											sdkCuccZhangyunzyVerify.setOutTradeNo(outtradeid);
											Integer fee = (int) realamount * 100;
											sdkCuccZhangyunzyVerify.setPrice(fee);
											sdkCuccZhangyunzyVerify.setGameId(game.getGameId());
											sdkCuccZhangyunzyVerify.setApplyResultcode(r[0]);
											sdkCuccZhangyunzyVerify.setApplyResultmsg(result);
											sdkCuccZhangyunzyVerify.setCreatedTime(reqOrderNoTime);
											content = "";
											number = "";
											payMmdoCommandList.setFlagSend("10");
										}else {
											sdkCuccZhangyunzyVerify.setOrderNo(orderNo);
											sdkCuccZhangyunzyVerify.setMobile(mobilephoneNumber);
											logger.error("掌云联通中音获取短信内容失败");
											Integer fee = (int) realamount * 100;
											sdkCuccZhangyunzyVerify.setPrice(fee);
											sdkCuccZhangyunzyVerify.setGameId(game.getGameId());
											sdkCuccZhangyunzyVerify.setApplyResultcode(r[0]);
											sdkCuccZhangyunzyVerify.setApplyResultmsg(result);
											sdkCuccZhangyunzyVerify.setCreatedTime(reqOrderNoTime);
											content = "";
											number = "";
										}
										sdkCuccZhangyunzyVerifyMapper.insertSelective(sdkCuccZhangyunzyVerify);
									} else {
										// 没有手机号
										payMmdoCommandList.setFlagSend("11");
										content = orderNo;
									}
								} catch (Exception e) {
									logger.error("掌云联通中音获取短信内容异常", e);
									content = "";
									number = "";
								}
							}else if (CUCCYIJIANWOMUSIC.equalsIgnoreCase(sdkOperatorPayChannel
									.getChannelCode())) {
								try {
									if (StringUtils
											.isNotEmpty(mobilephoneNumber)
											&& StringUtils
													.isNotBlank(mobilephoneNumber)
											&& mobilephoneNumber.length() == 11) {
										// 已有手机号
										Float price = realamount * 100;
										Integer p = price.intValue();
										String amount = String.valueOf(p);
										String ipAddr = ip;
										String feeName = sdkOrderMmdo.getReqSendContent();
										JsonCuccYijianRes jsonCuccYijianRes = getCuccYijianWoMusicContent(
												orderNo, amount,
												imsiParam, imeiParam, ipAddr,
												orderNo, feeName,mobilephoneNumber);
										SdkOrderMmdoVerifycodeMapper sdkOrderMmdoVerifycodeMapper=dal.getMapper(SdkOrderMmdoVerifycodeMapper.class);
										SdkOrderMmdoVerifycode sdkOrderMmdoVerifycode=new SdkOrderMmdoVerifycode();
										sdkOrderMmdoVerifycode.setOrderNo(orderNo);
										sdkOrderMmdoVerifycode.setMobile(mobilephoneNumber);
										Integer fee = (int) realamount * 100;
										sdkOrderMmdoVerifycode.setPrice(fee);
										sdkOrderMmdoVerifycode.setGameId(game.getGameId());
										sdkOrderMmdoVerifycode.setCreatedTime(reqOrderNoTime);
										if ("0".equals(jsonCuccYijianRes
												.getStatus())) {
											sdkOrderMmdoVerifycode.setOutTradeNo(jsonCuccYijianRes.getNoteChannels().get(0).getSequence());
											sdkOrderMmdoVerifycode.setApplyResultcode(jsonCuccYijianRes
												.getStatus());
											String applyResultmsg=mapper.writeValueAsString(jsonCuccYijianRes);
											sdkOrderMmdoVerifycode.setApplyResultmsg(applyResultmsg);
											content = "";
											number = "";
											payMmdoCommandList.setFlagSend("10");
										}else{
											logger.error("cuccyijianwomusic获取短信内容异常"
													+ jsonCuccYijianRes.getStatus());
											sdkOrderMmdoVerifycode.setApplyResultcode(jsonCuccYijianRes
													.getStatus());
											String applyResultmsg=mapper.writeValueAsString(jsonCuccYijianRes);
											sdkOrderMmdoVerifycode.setApplyResultmsg(applyResultmsg);
											content = "";
											number = "";
										}
										sdkOrderMmdoVerifycodeMapper.insertSelective(sdkOrderMmdoVerifycode);
									}else {
										// 没有手机号
										payMmdoCommandList.setFlagSend("11");
										content = orderNo;
									}
								} catch (Exception e) {
									logger.error("联通易简沃音乐获取短信内容异常", e);
									content = "";
									number = "";
								}
							}else {
								content = contentArray[i] + UnicomDiveStrin
										+ game.getGameId() + unicomAmountSpilt
										+ realamount + unicomAmountSpilt
										+ orderNo;
							}
						}

						ResultPayMmdoCommand payMmdoCommand = new ResultPayMmdoCommand();
						payMmdoCommand.setContent(content);
						payMmdoCommand.setNumber(number);

						String[] shieldKeywordArraySub = shieldKeywordArray[i]
								.split(spiltSubContentString);
						String[] shieldNumberArraySub = shieldNumberArray[i]
								.split(spiltSubContentString);

						for (int z = 0; z < shieldKeywordArraySub.length; z++) {
							ResultPayMmdoBlock payMmdoBlock = new ResultPayMmdoBlock();
							payMmdoBlock.setKeyword(shieldKeywordArraySub[z]);
							payMmdoBlock.setNumber(shieldNumberArraySub[z]);
							payMmdoCommand.addContent(payMmdoBlock);
							// 保存下发信息
							SdkMmdoShield mmdoShield = new SdkMmdoShield();
							mmdoShield.setCreateTime(new Date());
							mmdoShield.setImsi(imsiParam);
							mmdoShield
									.setInterval(sdkMmdoSetting.getInterval());
							mmdoShield.setSendContent(content);
							mmdoShield.setSendNumber(number);
							mmdoShield
									.setShieldKeyword(shieldKeywordArraySub[z]);
							mmdoShield.setShieldNumber(shieldNumberArraySub[z]);
							mmdoShieldMapper.insertSelective(mmdoShield);
						}

						payMmdoCommandList.addContent(payMmdoCommand);
					}

					if (orderUpFaileIfNextPay) {
						//补点失败订单录入
						insertFaileOrderInfo(cmd, dal, sdkMmdoSetting, sdkorder_supplement,
								sdkOperatorPayChannel, 3, "");
						break;// 结束补点层循环，进行下个支付
					}

					payinfo.addContent(payMmdoCommandList);

					sdkOrderMmdo.setReqOrderAmount(realamount);
					sdkOrderMmdo.setReqSendContent(sdkMmdoSetting.getContent());
					if (numberBuff.length() > 0) {
						sdkOrderMmdo.setReqSendNumber(numberBuff.substring(0,
								numberBuff.length() - 1));
					} else {
						sdkOrderMmdo.setReqSendNumber(sdkMmdoSetting
								.getNumber());
					}
					sdkOrderMmdo.setPayChannelCode(sdkOperatorPayChannel
							.getChannelCode());
					if (sdkMmdoSetting.getTjpropsname() != null) {
						sdkOrderMmdo.setTjpropsname(sdkMmdoSetting
								.getTjpropsname());
					}
					sdkOrderMmdo.setTradeid(outtradeid);
					resultPayMmdoInfoOrderList.addContent(payinfo);
					if (totalcount == 1) {
						finalpayinfo = payinfo;
					} else if (totalcount > 1 && sendsmsnum != 0) {
						sdkOrderMmdo.setAdditionalStatus(1);
					}
					
					//记录支付过程，只处理一次
					if (sendsmsnum == 0) {
						nextPaytactics=getNextPaytactics(paytacticsString,current_paytactics);
						sdkOrderMmdo.setNextPaytactics(nextPaytactics);
						resultPayMmdoChargeTip.setCurrentifpay("1");
						if(nextPaytactics!=0){
							resultPayMmdoChargeTip.setNextifpay("1");
						}else if(nextPaytactics==0){
							resultPayMmdoChargeTip.setNextifpay("0");
						}
					}
					
					sdkOrderMmdo.setRespSendNumber("");
					sdkOrderMmdo.setRespSendContent("");
					sdkOrderMmdo.setRespStatus(0);				
					
					sdkOrderMmdoMapper.updateByPrimaryKey(sdkOrderMmdo);
					
					sdkOrder.setStatus(0);
					sdkOrder.setStatusDetail("");
					sdkOrder.setOriginalcode("");
					
					sdkOrder.setAmount(realamount);
					sdkOrderMapper.updateByPrimaryKey(sdkOrder);
					
					//修改回调表的相关信息
					SdkNotifyMmdoMapper sdkNotifyMmdoMapper=dal.getMapper(SdkNotifyMmdoMapper.class);
					SdkNotifyMmdoExample sdkNotifyMmdoExample=new SdkNotifyMmdoExample();
					sdkNotifyMmdoExample.createCriteria().andOrderNoEqualTo(orderNo);
					sdkNotifyMmdo=sdkNotifyMmdoMapper.selectOne(sdkNotifyMmdoExample);
					if(sdkNotifyMmdo!=null){
						if (StringUtils.isNotBlank(sdkOrderMmdo.getTradeid())) {
							sdkNotifyMmdo.setLinkid(sdkOrderMmdo.getTradeid());
						}
						sdkNotifyMmdo.setSpid(sdkOrderMmdo.getReqSendContent());
						sdkNotifyMmdo.setCmd(sdkOrderMmdo.getReqSendContent());
						sdkNotifyMmdo.setSpnum(sdkOrderMmdo.getReqSendNumber());
						sdkNotifyMmdo.setAmount(sdkOrderMmdo.getReqOrderAmount());
						sdkNotifyMmdo.setPayChannelCode(sdkOrderMmdo.getPayChannelCode());
						sdkNotifyMmdoMapper.updateByPrimaryKey(sdkNotifyMmdo);
					}
					
					//支付失败另选通道功能，下个通道如果有补点，则添加订单记录
					if(sendsmsnum!=0){
						SdkOrderMmdo sdkMmdo_supplement = new SdkOrderMmdo();
						sdkMmdo_supplement.setReqImsi(imsiParam);
						sdkMmdo_supplement.setReqOrderAmount(realamount);
						sdkMmdo_supplement.setReqSendContent(sdkMmdoSetting.getContent());
						if (numberBuff.length() > 0) {
							sdkMmdo_supplement.setReqSendNumber(numberBuff.substring(0,
									numberBuff.length() - 1));
						} else {
							sdkMmdo_supplement.setReqSendNumber(sdkMmdoSetting.getNumber());
						}
						sdkMmdo_supplement.setReqTime(new Date());
						sdkMmdo_supplement.setGameId(gameSession.getGameId());
						sdkMmdo_supplement.setOperationType(sdkOrderMmdo.getOperationType());
						sdkMmdo_supplement.setUid(gameSession.getUid());
						sdkMmdo_supplement.setImei(sdkOrderMmdo.getImei());
						sdkMmdo_supplement.setMacAddr(sdkOrderMmdo.getMacAddr());
						sdkMmdo_supplement.setIpAddr(sdkOrderMmdo.getIpAddr());
						sdkMmdo_supplement.setRawData(cmd.getServiceContext().getRequest()
								.getParameter("imsi"));
						sdkMmdo_supplement.setPayChannelCode(sdkOperatorPayChannel.getChannelCode());
						if (sdkMmdoSetting.getTjpropsname() != null) {
							sdkMmdo_supplement.setTjpropsname(sdkMmdoSetting.getTjpropsname());
						}
						sdkMmdo_supplement.setTradeid(outtradeid);
						if (totalcount == 1) {
							finalpayinfo = payinfo;
						} else if (totalcount > 1 && sendsmsnum != 0) {
							sdkMmdo_supplement.setAdditionalStatus(1);
						}
						resultPayMmdoChargeTip.setCurrentifpay("1");
						if(nextPaytactics!=0){
							resultPayMmdoChargeTip.setNextifpay("1");
						}else if(nextPaytactics==0){
							resultPayMmdoChargeTip.setNextifpay("0");
						}
						sdkMmdo_supplement.setMobilephone(sdkOrderMmdo.getMobilephone());
						sdkMmdo_supplement.setProvinceNo(sdkOrderMmdo.getProvinceNo());
						sdkMmdo_supplement.setIccid(sdkOrderMmdo.getIccid());
						sdkMmdo_supplement.setCenternumber(sdkOrderMmdo.getCenternumber());
						sdkOrderMmdoMapper.insertSelective(sdkMmdo_supplement);

						sdkorder_supplement.setPayId(sdkMmdo_supplement.getPayId());
						sdkorder_supplement.setAmount(realamount);
						sdkorder_supplement.setSdkver(sdkOrder.getSdkver());
						sdkOrderMapper.insert(sdkorder_supplement);

						// 回调表插入一条记录
						insertSdkNotifyMmdoInfo(dal, sdkorder_supplement, sdkMmdo_supplement, sdkOperatorPayChannel);
					}
					
					dal.commit();
				}

				finalresult = null;
				if (totalcount > 1) {
					// --设置补点计费的时间间隔--
					if (ifSameChannel) {
						Integer seconds = parseInteger(Time_Interval);
						int t = Math.abs(seconds);
						supplementTimeInterval = String.valueOf(t);
					} else {
						supplementTimeInterval = Cfg.cfg
								.getString("sdk.game.supplement.request.difer.timeinterval");
					}
					resultPayMmdoInfoOrderList
							.setOrderlisttime(supplementTimeInterval);
					// ----
					finalresult = new Result(resultPayMmdoInfoOrderList);
				} else {
					finalresult = new Result(finalpayinfo);
				}
				logger.debug("the Pay_mmdo_repeat result is: "
						+ finalresult.getXml("Pay_mmdo"));

				// 省份屏蔽，结束循环
				if (!shield) {
					break;
				}
			}
			long sy10 = System.currentTimeMillis();
			logger.info("the Pay_mmdo_repeat paytime,10---" + sy + "time is :" + (sy10 - sy));
			
			return finalresult;
		} finally {
			dal.close();
		}
	}

	@Override
	protected boolean isLoginRequired() {
		return true;
	}

	/**
	 * 获取剩余计费策略
	 * 
	 * @param paytactics
	 * @param currentPaytactics
	 * @return
	 */
	private List<Integer> getSurplusPaytactics(String paytactics,
			Integer currentPaytactics) {
		List<Integer> result = new ArrayList<Integer>();
		try {
			if (StringUtils.isEmpty(paytactics)
					|| StringUtils.isBlank(paytactics)) {
			} else {
				if (paytactics.contains(",")) {
					String[] paytacticArrays = paytactics.split(",");
					boolean flag = false;
					for (int i = 0; i < paytacticArrays.length; i++) {
						String currentPaytacticsString=String.valueOf(currentPaytactics);
						if (currentPaytacticsString.equals(paytacticArrays[i])) {
							flag = true;
						}
						if (flag) {
							result.add(Integer.valueOf(paytacticArrays[i]));
						}
					}

				}
			}
		} catch (Exception e) {
			logger.error("try to getSurplusPaytactics error, the error =" + e);
		}
		return result;
	}

	/**
	 * 计费屏蔽设置
	 * 
	 * @param mobilephoneProvinceno
	 * @param mobilephoneNumber
	 * @param sdkOperatorPayChannel
	 * @return 
	 *         provinceFlag为计费屏蔽标识符，0代表没有屏蔽正常计费，1代表“未找到计费省”，2代表“计费时段屏蔽”，3代表“计费号段屏蔽
	 *         ”，4代表“计费省份屏蔽”
	 */
	private Integer checkProvince(Integer mobilephoneProvinceno,
			String mobilephoneNumber,
			SdkOperatorPayChannel sdkOperatorPayChannel) {
		Integer provinceFlag = 0;
		if (mobilephoneProvinceno != 0
				&& StringUtils.isNotBlank(mobilephoneNumber)) {
			// 根据sdk_telephone手机号判断
			if (sdkOperatorPayChannel.getBillingProvinceId() != null
					&& !sdkOperatorPayChannel.getBillingProvinceId().equals(
							mobilephoneProvinceno)) {
				provinceFlag = 1;
			}
			if (StringUtils.isNotBlank(sdkOperatorPayChannel
					.getBillingPeriods())) {
				if (!judgeTime(sdkOperatorPayChannel.getBillingPeriods())) {
					provinceFlag = 2;
				}
			}
			if (StringUtils.isNotBlank(sdkOperatorPayChannel
					.getShieldingSegments())) {
				String[] segments = sdkOperatorPayChannel
						.getShieldingSegments().split(",");
				for (String seg : segments) {
					if (mobilephoneNumber.startsWith(seg)) {
						provinceFlag = 3;
					}
				}
			}
			if (StringUtils.isNotBlank(sdkOperatorPayChannel
					.getShieldingProvinceIds())) {
				String[] provinceIds = sdkOperatorPayChannel
						.getShieldingProvinceIds().split(",");
				List<String> idList = Arrays.asList(provinceIds);
				if (idList.contains(String.valueOf(mobilephoneProvinceno))) {
					provinceFlag = 4;
				}
			}
		} else if (mobilephoneProvinceno != 0) {
			// 通过sdk_telephone_centernumber短信中心号判断
			if (StringUtils.isNotBlank(sdkOperatorPayChannel
					.getShieldingProvinceIds())) {
				String[] provinceIds = sdkOperatorPayChannel
						.getShieldingProvinceIds().split(",");
				List<String> idList = Arrays.asList(provinceIds);
				if (idList.contains(String.valueOf(mobilephoneProvinceno))) {
					provinceFlag = 4;
				}
			}
		}
		return provinceFlag;
	}

	/**
	 * 判断是否在规定时间之内，如果在规定时间之内则返回true，否则返回false，参数如果为空，则返回false。
	 * 
	 * @param setTime
	 * @return
	 */
	private boolean judgeTime(String setTime) {
		boolean result = false;

		if (StringUtils.isEmpty(setTime) || StringUtils.isBlank(setTime)) {
			// 如果参数为空则返回false
			result = false;
		}

		TypeReference<List<BillingPeriodVo>> typeRef = new TypeReference<List<BillingPeriodVo>>() {
		};
		try {
			List<BillingPeriodVo> periods = mapper.readValue(setTime, typeRef);
			Date time = timeString2Date(date2TimeString(new Date()));
			for (BillingPeriodVo period : periods) {
				Date begin = timeString2Date(period.getBeginTime());
				Date end = timeString2Date(period.getEndTime());
				if (time.before(begin) || time.after(end)) {
					// 在这个时间点之外
					result = false;
				} else {
					// 在这个时间点之内
					result = true;
				}
			}
		} catch (Exception e) {
			logger.error("judge time is error , error is :", e);
			result = false;
		}
		return result;
	}

	private String date2TimeString(Date date) {
		SimpleDateFormat format = new SimpleDateFormat("HH:mm");
		return format.format(date);
	}

	private Date timeString2Date(String str) throws ParseException {
		SimpleDateFormat format = new SimpleDateFormat("HH:mm");
		Date date = format.parse(str);
		return date;
	}

	private Result getBlankResult() {
		ResultPayMmdoInfo finalpayinfo = null;
		ResultPayMmdoInfo payinfo = new ResultPayMmdoInfo();
		payinfo.setOrder_no("");
		payinfo.setSms_pay_type(-1);
		payinfo.setSms_type("");
		payinfo.setSms_content_type("");
		payinfo.setType("mmdo");

		ResultPayMmdoChargeTip resultPayMmdoChargeTip = new ResultPayMmdoChargeTip();
		resultPayMmdoChargeTip.setGamename("");
		resultPayMmdoChargeTip.setChargetip("0");
		resultPayMmdoChargeTip.setChargesuceesstip("0");
		resultPayMmdoChargeTip.setLoadingtipmin("0");
		resultPayMmdoChargeTip.setChargefailtip("0");
		resultPayMmdoChargeTip.setSendingtip("0");
		resultPayMmdoChargeTip.setCurrentifpay("0");
		resultPayMmdoChargeTip.setNextifpay("0");
		payinfo.addContent(resultPayMmdoChargeTip);

		ResultPayMmdoCommandList payMmdoCommandList = new ResultPayMmdoCommandList();
		payMmdoCommandList.setImsi("");
		payMmdoCommandList.setTime(0);

		ResultPayMmdoCommand payMmdoCommand = new ResultPayMmdoCommand();
		payMmdoCommand.setContent("");
		payMmdoCommand.setNumber("");

		ResultPayMmdoBlock payMmdoBlock = new ResultPayMmdoBlock();
		payMmdoBlock.setKeyword("");
		payMmdoBlock.setNumber("");

		payMmdoCommand.addContent(payMmdoBlock);
		payMmdoCommandList.addContent(payMmdoCommand);
		payinfo.addContent(payMmdoCommandList);
		finalpayinfo = payinfo;
		finalresult = new Result(finalpayinfo);
		logger.debug("the Pay_mmdo_repeat_blank result is: "
				+ finalresult.getXml("Pay_mmdo_repeat"));
		return finalresult;
	}

	private Integer parseInteger(String str) {
		Integer num = null;
		try {
			if (StringUtils.isNotBlank(str)) {
				num = Integer.valueOf(str);
			}
		} catch (NumberFormatException e) {
			logger.warn("parse number string error! str = " + str);
		}
		return num;
	}

	/**
	 * 获取orderNo的加密字符串
	 * 
	 * @param orderNo
	 * @return
	 */
	public String getEncryptOrderNo(String orderNo) {
		try {
			String result = "";
			String temString = orderNo.substring(2);
			String[] s = new String[6];
			for (int i = 0; i < 5; i++) {
				s[i] = temString.substring(0, 2);
				temString = temString.substring(2);
			}
			s[s.length - 1] = temString;
			for (int i = 0; i < s.length - 1; i++) {
				int number = Integer.valueOf(s[i]);
				String s1 = HexToStr(number, 61);
				result = result + s1;
			}
			String s2 = HexToStr(Integer.valueOf(s[s.length - 1]), 61);
			if (s2.length() == 2) {
				s2 = "0" + s2;
			} else if (s2.length() == 1) {
				s2 = "00" + s2;
			}
			result = result + s2;
			return result;
		} catch (Exception e) {
			logger.error("获取orderNo的加密字符串error" + e);
			return null;
		}
	}

	/**
	 * 十进制转换成shift进制
	 * 
	 * @param number
	 * @param shift
	 * @return
	 */
	public String HexToStr(int number, int shift) {
		try {
			String key = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY";
			StringBuffer sb = new StringBuffer();
			for (@SuppressWarnings("unused")
			int j = 0; number >= shift; j++) {
				int a = number % shift;
				number /= shift;
				sb.append(key.charAt(a));
			}
			sb.append(key.charAt(number));
			return sb.reverse().toString();
		} catch (Exception e) {
			logger.error("十进制转换shift进制error" + e);
			return null;
		}
	}
	
	/**
	 * 获取下一个计费点策略ID,找不到返回0，或者没有下一个策略ID也返回0
	 * @param paytactics
	 * @param currentPaytactics
	 * @return
	 */
	private Integer getNextPaytactics(String paytactics,Integer currentPaytactics){
		Integer result=0;
		try{
			if(StringUtils.isEmpty(paytactics)||StringUtils.isBlank(paytactics)){
				result=0;
			}else {
				if(paytactics.contains(",")){
					String[] paytacticArrays=paytactics.split(",");
					for(int i=0;i<paytacticArrays.length;i++){
						String currentPaytacticsString=String.valueOf(currentPaytactics);
						if(currentPaytacticsString.equals(paytacticArrays[i])){
							if(i+1>=paytacticArrays.length){
								result=0;
							}else {
								result=Integer.valueOf(paytacticArrays[i+1]);
							}
						}
					}
				}else {
					result=0;
				}
			}
		}catch(Exception e){
			logger.error("获取下一个计费点策略ID出错"+e);
		}
		return result;
	}
	
	public Date addSecond(Date date, int seconds) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.add(Calendar.SECOND, seconds);
		return calendar.getTime();
	}
	
	/**
	 * 判断订单是否是30秒之外，如果大于预设值30秒，则返回true，如果小于预设值30秒，则返回false
	 * 
	 * @param dal
	 * @param operation
	 * @param imsi
	 * @return
	 */
	private Boolean judgeReqOrderTimeOver30m(DAL dal, int operation, String imsi,
			SdkOperatorPayChannel channel, Date d) {
		// 判断订单是否重复,默认是30秒
		Boolean flag = true;
		Integer reqorderNoseconds = parseInteger(Time_Interval);
		if (channel.getReqTimeinterval() != null) {
			reqorderNoseconds = channel.getReqTimeinterval();
			reqorderNoseconds = 0 - reqorderNoseconds;
		}
		Date pretime = addSecond(d, reqorderNoseconds);

		SdkOrderMmdoMapper orderMmdoMapper = dal
				.getMapper(SdkOrderMmdoMapper.class);
		SdkOrderMmdoExample mmdoExample = new SdkOrderMmdoExample();
		// 更改为按手机号限制消费
		logger.debug("imsi =" + imsi + ", pretime =" + pretime
				+ ", operation =" + operation + ", reqorderNoseconds ="
				+ reqorderNoseconds + ", d =" + d);
		mmdoExample.createCriteria().andReqImsiEqualTo(imsi)
				.andReqTimeGreaterThanOrEqualTo(pretime)
				.andReqTimeLessThanOrEqualTo(reqOrderNoTime)
				.andOperationTypeEqualTo(operation);
		List<SdkOrderMmdo> orderMmdoList = orderMmdoMapper
				.selectByExample(mmdoExample);
		
		if (orderMmdoList != null && orderMmdoList.size() > 0) {
			flag = false;
		}
		return flag;
	}

	/**
	 * 用于在补点订单失败的情况下，在sdk_order表和sdk_order_mmdo表插入一条记录。
	 */
	private void insertFaileOrderInfo(CmdPay cmd, DAL dal,
			SdkMmdoSetting sdkMmdoSetting, SdkOrder sdkOrder,
			SdkOperatorPayChannel channel, int sdkOrder_status,
			String sdkOrder_statusdetail) {
		SdkOrderMmdoMapper mmdoMapper = dal.getMapper(SdkOrderMmdoMapper.class);
		SdkOrderMmdo mmdo = new SdkOrderMmdo();
		mmdo.setReqImsi(imsiParam);
		mmdo.setReqOrderAmount(realamount);
		mmdo.setReqSendContent(sdkMmdoSetting.getContent());
		mmdo.setReqSendNumber(sdkMmdoSetting.getNumber());
		mmdo.setReqTime(new Date());
		mmdo.setGameId(gameSession.getGameId());
		mmdo.setOperationType(operatorTypeParam);
		mmdo.setUid(gameSession.getUid());
		mmdo.setImei(imeiParam);
		mmdo.setMacAddr(cmd.getServiceContext().getRequest()
				.getParameter("mac"));
		mmdo.setIpAddr(cmd.getRequestHost());
		mmdo.setRawData(cmd.getServiceContext().getRequest()
				.getParameter("imsi"));
		mmdo.setPayChannelCode(channel.getChannelCode());
		if (sdkMmdoSetting.getTjpropsname() != null) {
			mmdo.setTjpropsname(sdkMmdoSetting.getTjpropsname());
		}
		mmdo.setTradeid(outtradeid);
		mmdo.setRespStatus(0);
		if(!orderIfOver30m){
			mmdo.setOverThirtym(1);
		}else {
			mmdo.setOverThirtym(0);
		}
		mmdo.setMobilephone(mobilephoneNumber);
		mmdo.setProvinceNo(mobilephoneProvinceno);
		mmdo.setIccid(iccidParam);
		mmdo.setCenternumber(mobilephoneCenterNumberParam);
		
		mmdoMapper.insertSelective(mmdo);

		SdkOrderMapper mapperOrder = dal.getMapper(SdkOrderMapper.class);
		sdkOrder.setPayId(mmdo.getPayId());
		sdkOrder.setAmount(realamount);
		sdkOrder.setStatus(sdkOrder_status);
		sdkOrder.setStatusDetail(sdkOrder_statusdetail);
		sdkOrder.setSdkver(sdkver_Param);
		mapperOrder.insert(sdkOrder);

		// 添加回调订单
		insertSdkNotifyMmdoInfo(dal, sdkOrder, mmdo, channel);

		dal.commit();
	}

	/** 对sdk_notify_mmdo表插入一条数据，状态初始化为0，即默认失败
	 * 
	 * @param dal
	 * @param sdkOrder
	 * @param sdkOrderMmdo
	 * @param channel
	 */
	private void insertSdkNotifyMmdoInfo(DAL dal, SdkOrder sdkOrder,
			SdkOrderMmdo sdkOrderMmdo, SdkOperatorPayChannel channel) {
		if (SDKTPPAY.equalsIgnoreCase(channel.getChannelCode())
				|| SDKXQTPAY.equalsIgnoreCase(channel.getChannelCode())
				|| "CMCCRDOXINHUALESHI".equalsIgnoreCase(channel.getChannelCode())
				|| TELECOMLANGTIAN.equalsIgnoreCase(channel.getChannelCode())
				|| CTCCLOVEMUSIC.equalsIgnoreCase(channel.getChannelCode())
				|| SDKBAIXUN.equalsIgnoreCase(channel.getChannelCode())
				|| SDKBAIXUN_XLMCG.equalsIgnoreCase(channel.getChannelCode())
				|| SDKBAIXUN_TTXHB.equalsIgnoreCase(channel.getChannelCode())
				|| SDKBAIXUN_GTYX.equalsIgnoreCase(channel.getChannelCode())
				|| SDKBAIXUN_WSDZZ.equalsIgnoreCase(channel.getChannelCode())
				|| SDKBAIXUN_CKZZ.equalsIgnoreCase(channel.getChannelCode())
				|| CMCCMMWATERWEST.equalsIgnoreCase(channel.getChannelCode())
				|| CMCCMMBAIXUNLINGDONGURL.equalsIgnoreCase(channel.getChannelCode())				
				|| CUCCMUSICBASE.equalsIgnoreCase(channel.getChannelCode())
				|| CMCCGAMEBASE.equalsIgnoreCase(channel.getChannelCode())
				|| SDKQIPAPAY.equalsIgnoreCase(channel.getChannelCode())
				|| SDKZHUQUEPAY.equalsIgnoreCase(channel.getChannelCode())
				|| CUCCYIJIAN.equalsIgnoreCase(channel.getChannelCode())
				|| CUCCZHANGYUNZY.equalsIgnoreCase(channel.getChannelCode())
				|| "SDKCMCCJIUTIANMIGU".equalsIgnoreCase(channel.getChannelCode())
				|| "CUCCYIJIANWOMUSIC".equalsIgnoreCase(channel.getChannelCode())
				|| "CTCCXINWANG".equalsIgnoreCase(channel.getChannelCode())
				|| "CMCCYONGZHENG".equalsIgnoreCase(channel.getChannelCode())
				|| "CMCCMOPINGDONGMAN".equalsIgnoreCase(channel.getChannelCode())
				) {
			SdkNotifyMmdoMapper sdkNotifyMmdoMapper = dal
					.getMapper(SdkNotifyMmdoMapper.class);
			SdkNotifyMmdo sdkNotifyMmdo = new SdkNotifyMmdo();
			sdkNotifyMmdo.setOrderNo(sdkOrder.getOrderNo());
			if (StringUtils.isNotBlank(sdkOrderMmdo.getTradeid())) {
				sdkNotifyMmdo.setLinkid(sdkOrderMmdo.getTradeid());
			}
			sdkNotifyMmdo.setSpid(sdkOrderMmdo.getReqSendContent());
			sdkNotifyMmdo.setCmd(sdkOrderMmdo.getReqSendContent());
			SdkTelephoneMapper sdkTelephoneMapper = dal
					.getMapper(SdkTelephoneMapper.class);
			SdkTelephoneExample sdkTelephoneExample = new SdkTelephoneExample();
			String imsi = "";
			if (StringUtils.isNotBlank(sdkOrderMmdo.getReqImsi())) {
				imsi = sdkOrderMmdo.getReqImsi();
			}
			sdkTelephoneExample.createCriteria().andImsiEqualTo(imsi);
			SdkTelephone sdkTelephone = sdkTelephoneMapper
					.selectOne(sdkTelephoneExample);
			if (sdkTelephone != null) {
				sdkNotifyMmdo.setKey(String.valueOf(sdkTelephone
						.getProvinceNo()));
				sdkNotifyMmdo.setMobile(sdkTelephone.getMobilephone());
			}
			sdkNotifyMmdo.setSpnum(sdkOrderMmdo.getReqSendNumber());
			sdkNotifyMmdo.setGameId(sdkOrderMmdo.getGameId());
			sdkNotifyMmdo.setAmount(sdkOrderMmdo.getReqOrderAmount());
			sdkNotifyMmdo.setCreateTime(new Date());
			sdkNotifyMmdo.setOperationType(sdkOrderMmdo.getOperationType());
			sdkNotifyMmdo.setPayChannelCode(sdkOrderMmdo.getPayChannelCode());
			int additionalStatus = 0;
			if (sdkOrderMmdo.getAdditionalStatus() == null) {
				additionalStatus = 0;
			} else {
				additionalStatus = 1;
			}
			sdkNotifyMmdo.setAdditionalStatus(additionalStatus);
			// 初始化状态为0
			sdkNotifyMmdo.setNotifyStatus(0);
			sdkNotifyMmdoMapper.insertSelective(sdkNotifyMmdo);
		}
		dal.commit();
	}

	
	
	
	/**
	 * 获取掌盟支付短信指令内容 适合联通，电信，移动MM弱联网
	 * @param imei
	 * @param imsi
	 * @param price
	 * @param orderNo
	 * @param ipaddr
	 * @return
	 */
	private String getZmzf(String imei, String imsi, String price,
			String orderNo, String ipaddr) {
		HttpClient httpclient = new DefaultHttpClient();
		String result = "";
		try {
			String sendUrl = Cfg.cfg.getString("sdk.zmzf.url");
			logger.debug("the zmzf send api = " + sendUrl);
			// logger.info("the cuccxx send api = " + sendUrl);
			StringBuffer query = new StringBuffer(sendUrl);
			String pid = Cfg.cfg.getString("sdk.zmzf.pid");
			query.append("pid=").append(pid);
			query.append("&imei=").append(imei);
			query.append("&imsi=").append(imsi);
			query.append("&price=").append(price);
			query.append("&tradeid=").append(orderNo);
			query.append("&ipaddr=").append(ipaddr);
			HttpGet httpget = new HttpGet(query.toString());
			logger.debug("the zmzf send url = " + query.toString());
			// logger.info("the cuccxx send url = " + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			logger.debug("the zmzf send response: " + response);
			// logger.info("the cuccxx send response: " + response);
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the zmzf send response content - content = "
					+ content);
			// logger.info("the cuccxx send response content - content = " +
			// content);
			result = content;
		} catch (Exception e) {
			logger.error("the zmzf request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return result;
	}
	
	/**
	 * 用于中移动MM-深圳首游
	 * 
	 * @param args
	 * @throws Exception
	 */
	private XmlCmccmmSzsyRes getCmccmmSzsy(String imsi, String imei,
			String fee, String orderNo, String ip) {
		HttpClient httpclient = new DefaultHttpClient();
		XmlCmccmmSzsyRes res = new XmlCmccmmSzsyRes();
		try {
			String sendUrl = Cfg.cfg.getString("sdk.cmccmmszsy.url");
			;
			logger.debug("the cmccmmszsy api = " + sendUrl);
			StringBuffer query = new StringBuffer(sendUrl);
			query.append("?");
			String cpid = Cfg.cfg.getString("sdk.cmccmmszsy.cpid");
			query.append("cpid=").append(cpid);
			query.append("&imsi=").append(imsi);
			query.append("&imei=").append(imei);
			query.append("&fee=").append(fee);
			query.append("&ext=").append(orderNo);
			query.append("&ip=").append(ip);
			HttpGet httpget = new HttpGet(query.toString());
			logger.debug("the cmccmmszsy send url = " + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			logger.debug("the cmccmmszsy send response: " + response);
			// logger.info("the cmccmmszsy send response: " + response);
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the cmccmmszsy send response content - content = "
					+ content);
			res = mapper.readValue(content, XmlCmccmmSzsyRes.class);
			return res;
		} catch (Exception e) {
			logger.error("the cmccmmszsy request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
	}
	
	/**
	 * mm强联百讯灵动url获取短信内容
	 * @param app
	 * @param setting
	 * @param paycode
	 * @param imei
	 * @param imsi
	 * @param userdata
	 * @param ip
	 * @return
	 */
	private JsonCmccmmbaixunlingdongRes getCmccmmBaixunlingdongUrlContent(String app
			,String setting,String paycode,String imei,String imsi,String userdata,String ip){
		HttpClient httpclient = new DefaultHttpClient();
		JsonCmccmmbaixunlingdongRes res = new JsonCmccmmbaixunlingdongRes();
		try {
			String sendUrl = Cfg.cfg.getString("sdk.cmccmmbaixunlingdongUrl.url");
			StringBuffer query = new StringBuffer(sendUrl);
			query.append("app=").append(app);
			String channel="urlpay";
			query.append("&channel=").append(channel);
			query.append("&setting=").append(setting);
			String type="api";
			query.append("&type=").append(type);
			query.append("&paycode=").append(paycode);
			query.append("&imei=").append(imei);
			query.append("&imsi=").append(imsi);
			query.append("&userdata=").append(userdata);
			query.append("&ip=").append(ip);
			
			HttpGet httpget = new HttpGet(query.toString());
			logger.debug("the cmccmmbaixunlingdongUrl send url = " + query.toString());
			// logger.info("the cmccmmbaixunlingdongUrl send url = " + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			logger.debug("the cmccmmbaixunlingdongUrl send response: " + response);
			// logger.info("the cmccmmbaixunlingdongUrl send response: " + response);
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the cmccmmbaixunlingdongUrl send response content = "+ content);
//			logger.info("the cmccmmbaixunlingdongUrl send response content = "+content);
			res = mapper.readValue(content, JsonCmccmmbaixunlingdongRes.class);
		} catch (Exception e) {
			logger.error("the cmccmmbaixunlingdongUrl request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return res;
	}
	
	/**
	 * 电信朗天获取短信内容
	 * 
	 * @param fee
	 * @param ip
	 * @param extra
	 * @param imsi
	 * @param gameName
	 * @param chargeName
	 * @return
	 */
	private JsonLangTianRes getLangTianContent(String fee, String ip,
			String extra, String imsi, String gameName, String chargeName) {
		HttpClient httpclient = new DefaultHttpClient();
		JsonLangTianRes res = new JsonLangTianRes();
		try {
			String sendUrl = Cfg.cfg.getString("sdk.telecomlangtian.url");
			logger.debug("the telecomlangtian api = " + sendUrl);
			HttpPost httpost = new HttpPost(sendUrl);
			String channelId = Cfg.cfg
					.getString("sdk.telecomlangtian.channelId");
			String key = Cfg.cfg.getString("sdk.telecomlangtian.key");
			String s = channelId + fee + ip + extra + gameName + chargeName
					+ key;
			logger.debug("befor md5,the plain is: " + s);
			String plaintext = channelId + fee + ip + extra
					+ URLEncoder.encode(gameName, "utf-8")
					+ URLEncoder.encode(chargeName, "utf-8") + key;
			logger.debug("befor md5,the plain is: " + plaintext);
			String mac = DigestUtils.md5Hex(plaintext);
			logger.debug("after md5,the plain is: " + mac);

			List<NameValuePair> nvps = new ArrayList<NameValuePair>();
			nvps.add(new BasicNameValuePair("channelId", channelId));
			nvps.add(new BasicNameValuePair("fee", fee));
			nvps.add(new BasicNameValuePair("ip", ip));
			nvps.add(new BasicNameValuePair("extra", extra));
			nvps.add(new BasicNameValuePair("imsi", imsi));
			nvps.add(new BasicNameValuePair("gameName", gameName));
			nvps.add(new BasicNameValuePair("chargeName", chargeName));
			nvps.add(new BasicNameValuePair("mac", mac.toUpperCase()));
			httpost.setEntity(new UrlEncodedFormEntity(nvps, "UTF-8"));
			HttpResponse response = httpclient.execute(httpost);
			HttpEntity entity = response.getEntity();
			logger.debug("the telecomlangtian send response: " + response);
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the telecomlangtian send response content - content = "
					+ content);
			res = mapper.readValue(content, JsonLangTianRes.class);
			return res;
		} catch (Exception e) {
			logger.error("the telecomlangtian request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
	}
	
	/**
	 * 联通音乐基地获取短信内容
	 * 
	 * @param callNumber
	 * @param productId
	 * @param iMei
	 * @param iMsi
	 * @return
	 */
	private JsonCuccMusicbaseRes getCuccMusicbaseContent(String callNumber,
			String productId, String iMei, String iMsi) {
		HttpClient httpclient = new DefaultHttpClient();
		JsonCuccMusicbaseRes res = new JsonCuccMusicbaseRes();
		try {
			String sendUrl = Cfg.cfg.getString("sdk.cuccmusicbase.url");
			StringBuffer query = new StringBuffer(sendUrl);
			query.append("iMei=").append(iMei);
			query.append("&iMsi=").append(iMsi);
			query.append("&callNumber=").append(callNumber);
			String appId = Cfg.cfg.getString("sdk.cuccmusicbase.appId");
			query.append("&appId=").append(appId);
			query.append("&productId=").append(productId);
			String pNumber = Cfg.cfg.getString("sdk.cuccmusicbase.pNumber");
			SimpleDateFormat time = new SimpleDateFormat("MMddHHmmss");
			Date now = new Date();
			String tradeId = pNumber + time.format(now);
			query.append("&tradeId=").append(tradeId);
			query.append("&pNumber=").append(pNumber);
			HttpGet httpget = new HttpGet(query.toString());
			logger.debug("the cuccmusicbase send url = " + query.toString());
			// logger.info("the cuccmusicbase send url = " + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			logger.debug("the cuccmusicbase send response: " + response);
			// logger.info("the cuccmusicbase send response: " + response);
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the cuccmusicbase send response content - content = "
					+ content);
			// logger.info("the cuccmusicbase send response content - content = "
			// +
			// content);
			res = mapper.readValue(content, JsonCuccMusicbaseRes.class);
		} catch (Exception e) {
			logger.error("the cuccmusicbase request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return res;
	}
	
	/**
	 * 联通易简支付通道
	 * 
	 * @param paramString1
	 * @param paramString2
	 * @return
	 */
	private JsonCuccYijianRes getCuccYijianContent(String orderId, String money,String imsi,String imei,String ipAddr,String extData,String feeName) {
		HttpClient httpclient = new DefaultHttpClient();
		JsonCuccYijianRes jsonCuccYijianRes=new JsonCuccYijianRes();
		try {
			String sendUrl = Cfg.cfg.getString("sdk.cuccyijian.url");
			logger.debug("the cuccyijian send api = " + sendUrl);
//			logger.info("the cuccxx send api = " + sendUrl);
			HttpPost post = new HttpPost(sendUrl);
			JsonCuccYijianReqChannel jsonCuccYijianReqChannel=new JsonCuccYijianReqChannel();
			jsonCuccYijianReqChannel.setIpAddr(ipAddr);
			jsonCuccYijianReqChannel.setExtData(extData);
			String appId=Cfg.cfg.getString("sdk.cuccyijian.appId");
			jsonCuccYijianReqChannel.setAppId(appId);
			jsonCuccYijianReqChannel.setImei(imei);
			jsonCuccYijianReqChannel.setMoney(money);
			jsonCuccYijianReqChannel.setFeeName(feeName);
			jsonCuccYijianReqChannel.setImsi(imsi);
			jsonCuccYijianReqChannel.setOrderId(orderId);
			JsonCuccYijianReqParam jsonCuccYijianReqParam=new JsonCuccYijianReqParam();
			String version=Cfg.cfg.getString("sdk.cuccyijian.version");
			jsonCuccYijianReqParam.setVersion(version);
			String operation=Cfg.cfg.getString("sdk.cuccyijian.operation");
			jsonCuccYijianReqParam.setOperation(operation);
			jsonCuccYijianReqParam.setReqChannel(jsonCuccYijianReqChannel);;
			String jsonBody = mapper.writeValueAsString(jsonCuccYijianReqParam);
			logger.debug("the cuccyijian send jsonBody = " + jsonBody);
//			logger.info("the cuccyijian send jsonBody = " + jsonBody);
			post.setEntity(new ByteArrayEntity(jsonBody.getBytes()));
			HttpResponse response = httpclient.execute(post);
			HttpEntity entity = response.getEntity();
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the cuccyijian response = " + content);
//			logger.info("the cuccyijian response = " + content);
			jsonCuccYijianRes = mapper.readValue(content, JsonCuccYijianRes.class);
			logger.debug("the cuccyijian jsonCuccYijianRes ="+jsonCuccYijianRes.toString());
//			logger.info("the cuccyijian jsonCuccYijianRes ="+jsonCuccYijianRes.toString());
		} catch (Exception e) {
			logger.error("the cuccyijian request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return jsonCuccYijianRes;
	}

	/**
	 * 联通掌云中音通道
	 * 
	 * @param imei
	 * @param imsi
	 * @param price
	 * @param orderNo
	 * @param ipaddr
	 * @param phone
	 * @return
	 */
	private String getCuccZhangyunZhongyinContent(String imei, String imsi,
			String price, String orderNo, String ipaddr, String phone) {
		HttpClient httpclient = new DefaultHttpClient();
		String result = "";
		try {
			String sendUrl = Cfg.cfg.getString("sdk.cucczhangyunzy.requrl");
			StringBuffer query = new StringBuffer(sendUrl);
			// pid使用同一个
			String pid = Cfg.cfg.getString("sdk.zmzf.pid");
			query.append("pid=").append(pid);
			query.append("&imei=").append(imei);
			query.append("&imsi=").append(imsi);
			query.append("&price=").append(price);
			query.append("&tradeid=").append(orderNo);
			query.append("&ipaddr=").append(ipaddr);
			query.append("&phone=").append(phone);
			HttpGet httpget = new HttpGet(query.toString());
			logger.debug("the cucczhangyunzy reqest url = " + query.toString());
//			logger.info("the cucczhangyunzy reqest url = " + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the cucczhangyunzy response of reqest url, the content =" + content);
//			logger.info("the cucczhangyunzy response of reqest url, the content =" + content);
			result = content;
		} catch (Exception e) {
			logger.error("the cucczhangyunzy request error ="+e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return result;
	}
	
	/**
	 * 联通易简沃音乐支付通道
	 * 
	 * @param paramString1
	 * @param paramString2
	 * @return
	 */
	private JsonCuccYijianRes getCuccYijianWoMusicContent(String orderId,
			String money, String imsi, String imei, String ipAddr,
			String extData, String feeName,String mobile) {
		HttpClient httpclient = new DefaultHttpClient();
		JsonCuccYijianRes jsonCuccYijianRes = new JsonCuccYijianRes();
		try {
			String sendUrl = Cfg.cfg.getString("sdk.cuccyijian.url");
			logger.debug("the cuccyijianwomusic send api = " + sendUrl);
			// logger.info("the cuccyijianwomusic send api = " + sendUrl);
			HttpPost post = new HttpPost(sendUrl);
			JsonCuccYijianReqChannel jsonCuccYijianReqChannel = new JsonCuccYijianReqChannel();
			jsonCuccYijianReqChannel.setIpAddr(ipAddr);
			jsonCuccYijianReqChannel.setExtData(extData);
			String appId = Cfg.cfg.getString("sdk.cuccyijianwomusic.appId");
			jsonCuccYijianReqChannel.setAppId(appId);
			jsonCuccYijianReqChannel.setImei(imei);
			jsonCuccYijianReqChannel.setMoney(money);
			jsonCuccYijianReqChannel.setFeeName(feeName);
			jsonCuccYijianReqChannel.setImsi(imsi);
			jsonCuccYijianReqChannel.setOrderId(orderId);
			jsonCuccYijianReqChannel.setMobile(mobile);
			JsonCuccYijianReqParam jsonCuccYijianReqParam = new JsonCuccYijianReqParam();
			String version = Cfg.cfg.getString("sdk.cuccyijian.version");
			jsonCuccYijianReqParam.setVersion(version);
			String operation = Cfg.cfg.getString("sdk.cuccyijian.operation");
			jsonCuccYijianReqParam.setOperation(operation);
			jsonCuccYijianReqParam.setReqChannel(jsonCuccYijianReqChannel);
			
			String jsonBody = mapper.writeValueAsString(jsonCuccYijianReqParam);
			logger.debug("the cuccyijianwomusic send jsonBody = " + jsonBody);
			logger.info("the cuccyijianwomusic send jsonBody = " + jsonBody);
			post.setEntity(new ByteArrayEntity(jsonBody.getBytes()));
			HttpResponse response = httpclient.execute(post);
			HttpEntity entity = response.getEntity();
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the cuccyijianwomusic response = " + content);
			logger.info("the cuccyijianwomusic response = " + content);
			jsonCuccYijianRes = mapper.readValue(content,
					JsonCuccYijianRes.class);
			logger.debug("the cuccyijianwomusic jsonCuccYijianRes ="
					+ jsonCuccYijianRes.toString());
//			 logger.info("the cuccyijianwomusic jsonCuccYijianRes ="+jsonCuccYijianRes.toString());
		} catch (Exception e) {
			logger.error("the cuccyijianwomusic request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return jsonCuccYijianRes;
	}
	
	/**
	 * 电信欣网网络获取支付通道
	 * @param timestamp
	 * @param imsi
	 * @param orderNo
	 * @param fee
	 * @return
	 */
	private JsonCtccXinwangRes getCtccXinwangContent(String timestamp,String imsi,String orderNo,String fee){
		HttpClient httpclient = new DefaultHttpClient();
		JsonCtccXinwangRes res=new JsonCtccXinwangRes();
		try {
			String sendUrl = Cfg.cfg.getString("sdk.ctccxinwang.url");
			logger.debug("the ctccxinwang api = " + sendUrl);
			HttpPost httpost = new HttpPost(sendUrl);
			httpost.setHeader("Content-type", "application/x-www-form-urlencoded");
			String method=Cfg.cfg.getString("sdk.ctccxinwang.method");
			String channel = Cfg.cfg.getString("sdk.ctccxinwang.channel");
			String ver=Cfg.cfg.getString("sdk.ctccxinwang.ver");
			String key=Cfg.cfg.getString("sdk.ctccxinwang.key");
			
			SortedMap<String,String> map = new TreeMap<String,String>() ;
			map.put("channel", channel);
			map.put("imsi", imsi);
			map.put("method", method);
			map.put("timestamp", timestamp);
			map.put("ver", ver);
			map.put("id", orderNo);
			map.put("fee", fee);
			String s1="";
			for(Map.Entry<String,String> me:map.entrySet()){  
				s1=s1+me.getKey()+me.getValue();
	        } 
			logger.debug("the ctccxinwang before UrlEncode, the string ="+s1+key);
			String s2=URLEncoder.encode(s1+key, "utf-8");
			logger.debug("the ctccxinwang after UrlEncode, the string ="+s2);
			byte[] data = s2.getBytes("UTF-8");
			String sig=DigestUtils.shaHex(data);
			logger.debug("the ctccxinwang , the sig ="+sig);
			
			List<NameValuePair> nvps = new ArrayList<NameValuePair>();
			nvps.add(new BasicNameValuePair("method", method));
			nvps.add(new BasicNameValuePair("channel", channel));
			nvps.add(new BasicNameValuePair("timestamp", timestamp));
			nvps.add(new BasicNameValuePair("ver", ver));
			nvps.add(new BasicNameValuePair("imsi", imsi));
			nvps.add(new BasicNameValuePair("id", orderNo));
			nvps.add(new BasicNameValuePair("fee", fee));
			nvps.add(new BasicNameValuePair("sig", sig));
			httpost.setEntity(new UrlEncodedFormEntity(nvps, "UTF-8"));
			HttpResponse response = httpclient.execute(httpost);
			HttpEntity entity = response.getEntity();
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the ctccxinwang send response content - content = "
					+ content);
			logger.info("the ctccxinwang send response content - content = "
					+ content);
			String oldChar="per_"+orderNo+"_"+fee;
			String newChar="per_orderId_amount";
			content=content.replace(oldChar, newChar);
			logger.debug("the ctccxinwang replace after, content ="+content);
			res = mapper.readValue(content, JsonCtccXinwangRes.class);
			return res;
		} catch (Exception e) {
			logger.error("the ctccxinwang request error =" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
	}
	
	/**
	 * 移动 动漫广东
	 * @param imei
	 * @param imsi
	 * @param price
	 * @return
	 */
	private JsonCmccDongmanRes getCmccDongmanContent(String imei,String imsi,String price){
		HttpClient httpclient = new DefaultHttpClient();
		JsonCmccDongmanRes res=new JsonCmccDongmanRes();
		try {
			String sendUrl = Cfg.cfg.getString("sdk.cmccdongman.url");
			StringBuffer query = new StringBuffer(sendUrl);
			query.append("imei=").append(imei);
			query.append("&imsi=").append(imsi);
			query.append("&price=").append(price);
			String chapterId=Cfg.cfg.getString("sdk.cmccdongman.chapterId");
			query.append("&chapterId=").append(chapterId);
			String channel=Cfg.cfg.getString("sdk.cmccdongman.channel");
			query.append("&channel=").append(channel);
			String key=Cfg.cfg.getString("sdk.cmccdongman.key");
			query.append("&key=").append(key);
			HttpGet httpget = new HttpGet(query.toString());
//			logger.debug("the cmccdongman send url = " + query.toString());
			logger.info("the cmccdongman send url = " + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			String content = EntityUtils.toString(entity, "UTF-8");
//			logger.debug("the cmccdongman send response content - content = "
//					+ content);
			logger.info("the cmccdongman send response content - content = "
					+ content);
			res = mapper.readValue(content, JsonCmccDongmanRes.class);
		} catch (Exception e) {
			logger.error("the cmccdongman request error =" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return res;
	}
	
	public static void main(String args[]) throws Exception {
		Pay_mmdo_repeat p=new Pay_mmdo_repeat();
//		String orderId="1510101608570101";
//		String money="100";
//		String imsi="460017660933338";
//		String imei="355829050702672";
//		String ipAddr_fujian="59.56.13.58";
//		String ipAddr_guangdong="58.62.109.58";
//		String extData="1510101608570101";
//		String feeName="测试道具";
//		p.getCuccYijianContent(orderId, money, imsi, imei, ipAddr_guangdong, extData, feeName);
		String s1="714,";
		Integer s2=714;
		Integer i=p.getNextPaytactics(s1,s2);
		System.out.println(i);
	}
}
