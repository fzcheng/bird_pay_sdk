package com.cheyooh.service.sdk.action.notify;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Date;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.lang.StringUtils;
import org.nuxeo.common.xmap.XMap;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Cmd;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.ResultXJContent;
import com.cheyooh.service.sdk.db.dao.SdkGameMapper;
import com.cheyooh.service.sdk.db.dao.SdkNotifyMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMmdoMapper;
import com.cheyooh.service.sdk.db.entity.SdkGame;
import com.cheyooh.service.sdk.db.entity.SdkGameExample;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdo;
import com.cheyooh.service.sdk.db.entity.SdkOrder;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdo;
import com.cheyooh.service.sdk.idata.gameserver.XmlMmNotifyReq;
import com.cheyooh.service.sdk.idata.gameserver.XmlMmNotifyResp;
import com.cheyooh.service.sdk.tools.GenerateTool;

/*
 * @author ljg
 */
public class WnmmsNotify extends AbstractNotifyService<Cmd> {
//	private static final String WNMMS ="" ;
	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#verify(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@Override
	protected Result verify(Cmd cmd) {
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#execute(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@Override
	protected Result execute(Cmd cmd) {
		XmlMmNotifyResp resp = new XmlMmNotifyResp();
		DAL dal = DALFactory.createDAL();
		try {
			InputStream in = cmd.getServiceContext().getRequest()
					.getInputStream();
			BufferedReader reader = new BufferedReader(new InputStreamReader(
					in, "UTF-8"));
			StringBuffer xmlBuff = new StringBuffer();
			String line;
			while ((line = reader.readLine()) != null) {
				xmlBuff.append(line);
			}

			String xml = xmlBuff.toString();
			logger.info("the mm notify xml : " + xml);

			XmlMmNotifyReq notify = parseNotify(xml);
			
			if(notify.getOrderId().equals("00000000000000000000")){
				logger.info("enter the  jifutong faile");
				//以下失败的计费订单信息回调给闪电平台,并记录相关信息
				//为sdk_mmdo_order表添加一条记录
				Integer gid=217;
            	SdkOrderMmdoMapper mmdoMapper = dal
    					.getMapper(SdkOrderMmdoMapper.class);
            	SdkOrderMmdo mmdo = new SdkOrderMmdo();
    			mmdo.setReqOrderAmount(notify.getPrice() / 100f);
    			mmdo.setReqSendContent(notify.getPayCode());
    			mmdo.setRespSendContent(notify.getPayCode());
    			mmdo.setReqTime(new Date());
    			mmdo.setGameId(gid);
    			mmdo.setOperationType(1);
    			mmdo.setIpAddr(cmd.getRequestHost());
    			mmdo.setPayChannelCode("jifutong");
    			mmdo.setRespStatus(0);
    			mmdoMapper.insertSelective(mmdo);
            	
            	//为sdk_order表添加一条记录
            	Date time=new Date();
        		String order_no=GenerateTool.createOrderNo();
        		SdkOrder order=new SdkOrder();
        		order.setOrderNo(order_no);
        		SdkGameMapper sdkGameMapper=dal.getMapper(SdkGameMapper.class);
        		SdkGameExample sdkGameExample=new SdkGameExample();
        		sdkGameExample.createCriteria().andGameIdEqualTo(gid);
        		SdkGame sdkGame=sdkGameMapper.selectOne(sdkGameExample);
        		if(sdkGame!=null){
        			order.setOrderName(sdkGame.getName());
        			order.setCpId(sdkGame.getCpId());
        		}
        		order.setGameId(gid);
        	    order.setOrderDesc(String.valueOf(notify.getPrice() / 100f)+"元");
        		order.setType(9);
        		order.setPayId(mmdo.getPayId());
        		order.setAmount(notify.getPrice() / 100f);
        		order.setChannel("");
        		order.setStatus(0);
        		order.setCpExt(notify.getExData());
        		order.setCreateTime(time);
        		order.setNotifyStatus(0);
        		order.setCompleteTime(time);
        		SdkOrderMapper mapperOrder = dal.getMapper(SdkOrderMapper.class);
    			mapperOrder.insert(order);
    			CallbackToJifutongThread callbackToJifutongThread=new CallbackToJifutongThread(notify.getExData(),"lost_money");
    			callbackToJifutongThread.start();
			}else{
				SdkNotifyMmdo sdkNotifyMmdo = new SdkNotifyMmdo();
				sdkNotifyMmdo.setAmount(notify.getPrice() / 100f);
				sdkNotifyMmdo.setCmd(notify.getPayCode());
				sdkNotifyMmdo.setCreateTime(new Date());
				sdkNotifyMmdo.setLinkid(notify.getTradeId());
				sdkNotifyMmdo.setMobile(notify.getFeeMsisdn());
				sdkNotifyMmdo.setOperationType(notify.getOrderPayment());
//				sdkNotifyMmdo.setSpid(notify.getPayCode());
				if(StringUtils.isNotEmpty(notify.getExData())&&StringUtils.isNotBlank(notify.getExData())){
					byte[] byteExData=Base64.decodeBase64(notify.getExData());
					String exData=new String(byteExData);
					if(exData.contains(",")){
						sdkNotifyMmdo.setSpid(notify.getPayCode());
						logger.info("the mm notify xml of exData is : " + exData);
						String[] gameidpaychannelcode=exData.split(",");
						sdkNotifyMmdo.setGameId(parseInteger(gameidpaychannelcode[0]));
						sdkNotifyMmdo.setPayChannelCode(gameidpaychannelcode[1]);
					}else{
						logger.info("enter the  jifutong success");
						//以下成功计费订单信息回调给闪电平台,并记录相关信息
						sdkNotifyMmdo.setSpid(notify.getExData());
						Integer gid=217;
						sdkNotifyMmdo.setGameId(gid);
						sdkNotifyMmdo.setPayChannelCode("jifutong");
						//为sdk_mmdo_order表添加一条记录
		            	SdkOrderMmdoMapper mmdoMapper = dal
		    					.getMapper(SdkOrderMmdoMapper.class);
		            	SdkOrderMmdo mmdo = new SdkOrderMmdo();
		    			mmdo.setReqOrderAmount(notify.getPrice() / 100f);
		    			mmdo.setReqSendContent(notify.getPayCode());
		    			mmdo.setRespSendContent(notify.getPayCode());
		    			mmdo.setReqTime(new Date());
		    			mmdo.setGameId(gid);
		    			mmdo.setOperationType(1);
		    			mmdo.setIpAddr(cmd.getRequestHost());
		    			mmdo.setPayChannelCode("jifutong");
		    			mmdo.setRespStatus(1);
		    			mmdoMapper.insertSelective(mmdo);
		            	
		            	//为sdk_order表添加一条记录
		            	Date time=new Date();
		        		String order_no=GenerateTool.createOrderNo();
		        		SdkOrder order=new SdkOrder();
		        		order.setOrderNo(order_no);
		        		SdkGameMapper sdkGameMapper=dal.getMapper(SdkGameMapper.class);
		        		SdkGameExample sdkGameExample=new SdkGameExample();
		        		sdkGameExample.createCriteria().andGameIdEqualTo(gid);
		        		SdkGame sdkGame=sdkGameMapper.selectOne(sdkGameExample);
		        		if(sdkGame!=null){
		        			order.setOrderName(sdkGame.getName());
		        			order.setCpId(sdkGame.getCpId());
		        		}
		        		order.setGameId(gid);
		        	    order.setOrderDesc(String.valueOf(notify.getPrice() / 100f)+"元");
		        		order.setType(9);
		        		order.setPayId(mmdo.getPayId());
		        		order.setAmount(notify.getPrice() / 100f);
		        		order.setChannel("");
		        		order.setStatus(1);
		        		order.setCpExt(notify.getExData());
		        		order.setCreateTime(time);
		        		order.setNotifyStatus(0);
		        		order.setCompleteTime(time);
		        		SdkOrderMapper mapperOrder = dal.getMapper(SdkOrderMapper.class);
		    			mapperOrder.insert(order);
		    			CallbackToJifutongThread callbackToJifutongThread=new CallbackToJifutongThread(notify.getExData(),"get_money");
		    			callbackToJifutongThread.start();
					}
				}
				// notifyMmdo.setSpnum(spnum);
				SdkNotifyMmdoMapper  sdkNotifyMmdoMapper= dal
						.getMapper(SdkNotifyMmdoMapper.class);
				sdkNotifyMmdoMapper.insertSelective(sdkNotifyMmdo);
				
				resp.setTransactionID(notify.getTransactionID());
				resp.setMsgType(notify.getMsgType());
				resp.setVersion(notify.getVersion());
				resp.sethRet(0);
			}

			dal.commit();
		} catch (Exception e) {
			resp.sethRet(2);
			logger.error(e);
		} finally {
			dal.close();
		}
		return response(resp.toXml());
	}

	private XmlMmNotifyReq parseNotify(String xml) throws Exception {
		XMap xmap = new XMap();
		xmap.register(XmlMmNotifyReq.class);

		ByteArrayInputStream in = new ByteArrayInputStream(
				xml.getBytes("UTF-8"));
		XmlMmNotifyReq notify = (XmlMmNotifyReq) xmap.load(in);

		return notify;
	}
	
	private Result response(String msg) {
	    return new Result(new ResultXJContent(msg, msg));
	  }
	
	private Integer parseInteger(String str) {
	    Integer num = null;
	    try {
	      if (StringUtils.isNotBlank(str)) {
	        num = Integer.valueOf(str);
	      }
	    } catch (NumberFormatException e) {
	      logger.warn("parse number string error! str = " + str);
	    }
	    return num;
	  }
}
