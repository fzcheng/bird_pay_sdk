package com.cheyooh.service.sdk.action.notify;

import java.util.Date;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Cmd;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.ResultXJContent;
import com.cheyooh.service.sdk.db.dao.SdkGameMapper;
import com.cheyooh.service.sdk.db.dao.SdkNotifyMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkTelephoneMapper;
import com.cheyooh.service.sdk.db.entity.SdkGame;
import com.cheyooh.service.sdk.db.entity.SdkGameExample;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdo;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdoExample;
import com.cheyooh.service.sdk.db.entity.SdkOrder;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdo;
import com.cheyooh.service.sdk.db.entity.SdkTelephone;
import com.cheyooh.service.sdk.db.entity.SdkTelephoneExample;
import com.cheyooh.service.sdk.tools.GenerateTool;


public class BaiduQmxdgNotify extends AbstractNotifyService<Cmd> {
	private static final String payChannelCode = "sdkbaidupay";
	private String success_mgs = "success";
	private String fail_mgs = "FAILURE";
	private static final String appsecret = "Pq1TT3I3GQoSjLDu67kMGP0SEBOmQCVQ";
	private float realamount=0;
	private String order_no=GenerateTool.createOrderNo();
	private int gameid=250;
	private int cpid=171;
	private Date time=new Date();
	private static final Integer mmdoType = 9;
	private int operationType=0;
	private String outTradeId="";
	
	@Override
	protected Result verify(Cmd cmd) {
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#execute(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@Override
	protected Result execute(Cmd cmd) {
		DAL dal = DALFactory.createDAL();
		String result="";
		try {
			String appid = cmd.getServiceContext().getRequest()
					.getParameter("appid");
			if (StringUtils.isEmpty(appid)) {
				appid = "";
			}

			String orderid = cmd.getServiceContext().getRequest()
					.getParameter("orderid");
			if (StringUtils.isEmpty(orderid)) {
				orderid = "";
			}

			String amount = cmd.getServiceContext().getRequest()
					.getParameter("amount");
			if (StringUtils.isEmpty(amount)) {
				amount = "";
			}

			String unit = cmd.getServiceContext().getRequest()
					.getParameter("unit");
			if (StringUtils.isEmpty(unit)) {
				unit = "";
			}

			String jfd = cmd.getServiceContext().getRequest()
					.getParameter("jfd");
			if (StringUtils.isEmpty(jfd)) {
				jfd = "";
			}

			String status = cmd.getServiceContext().getRequest()
					.getParameter("status");
			if (StringUtils.isEmpty(status)) {
				status = "";
			}

			String paychannel = cmd.getServiceContext().getRequest()
					.getParameter("paychannel");
			if (StringUtils.isEmpty(paychannel)) {
				paychannel = "";
			}

			String phone = cmd.getServiceContext().getRequest()
					.getParameter("phone");
			if (StringUtils.isEmpty(phone)) {
				phone = "";
			}

			String channel = cmd.getServiceContext().getRequest()
					.getParameter("channel");
			if (StringUtils.isEmpty(channel)) {
				channel = "";
			}

			String from = cmd.getServiceContext().getRequest()
					.getParameter("from");
			if (StringUtils.isEmpty(from)) {
				from = "";
			}

			String sign = cmd.getServiceContext().getRequest()
					.getParameter("sign");
			if (StringUtils.isEmpty(sign)) {
				sign = "";
			}

			String extchannel = cmd.getServiceContext().getRequest()
					.getParameter("extchannel");
			if (StringUtils.isEmpty(extchannel)) {
				extchannel = "";
			}

			String cpdefinepart = cmd.getServiceContext().getRequest()
					.getParameter("cpdefinepart");
			if (StringUtils.isEmpty(cpdefinepart)) {
				cpdefinepart = "";
			}
			
			String signature1 = getSignature(appid, orderid, amount, unit,
					status, paychannel, appsecret);

			logger.info("the sdkbaidupay pay notify orderid =" + orderid);

			SdkNotifyMmdoMapper sdkNotifyMmdoMapper = dal
					.getMapper(SdkNotifyMmdoMapper.class);
			SdkNotifyMmdoExample sdkNotifyMmdoExample=new SdkNotifyMmdoExample();
			sdkNotifyMmdoExample.createCriteria().andPayChannelCodeEqualTo(payChannelCode).andLinkidEqualTo(orderid);
			SdkNotifyMmdo sdkNotifyMmdo=sdkNotifyMmdoMapper.selectOne(sdkNotifyMmdoExample);
			if(sdkNotifyMmdo!=null){
				//表示已经处理过了
				result=success_mgs;
			}else{
				if(signature1.equals(sign)){
					SdkNotifyMmdo notifyMmdo = new SdkNotifyMmdo();
					outTradeId=orderid;
					notifyMmdo.setLinkid(outTradeId);
					notifyMmdo.setSpid(jfd);
					String cmdString=paychannel+"-"+extchannel;
					notifyMmdo.setCmd(cmdString);
					notifyMmdo.setMobile(phone);
					// notifyMmdo.setSpnum(spnum);
					// notifyMmdo.setKey(key);
					
					if("CUCC".equals(channel)){
						operationType=2;
					 }else if("CTCC".equals(channel)){
						 operationType=3;
					 }else if("CMCC".equals(channel)){
						 operationType=1;
					 }
					notifyMmdo.setOperationType(operationType);
					// notifyMmdo.setAdditionalStatus(additionalStatus);
					notifyMmdo.setOrderNo(order_no);
					// notifyMmdo.setStatusDetail(statusDetail);
					notifyMmdo.setGameId(gameid);
					float amountFlaot=Float.valueOf(amount);
					if("fen".equals(unit)){
						realamount=amountFlaot/100;
					}else if("yuan".equals(unit)){
						realamount=amountFlaot;
					}
					notifyMmdo.setAmount(realamount);
					notifyMmdo.setCreateTime(time);
					notifyMmdo.setPayChannelCode(payChannelCode);
					Integer notifyStatus = 0;
					if ("success".equals(status)) {
						notifyStatus = 1;
					}
					notifyMmdo.setNotifyStatus(notifyStatus);
					notifyMmdo.setOriginalcode(status);
					sdkNotifyMmdoMapper.insertSelective(notifyMmdo);
					
					//插入SdkOrder表
					SdkOrderMapper sdkOrderMapper = dal
							.getMapper(SdkOrderMapper.class);
					Date time=new Date();
					SdkOrder sdkOrder=new SdkOrder();
					sdkOrder.setAmount(realamount);
					sdkOrder.setChannel(extchannel);
//					sdkOrder.setCpExt();
					sdkOrder.setCpId(cpid);
					sdkOrder.setCreateTime(time);
					sdkOrder.setGameId(gameid);
					String gameName="";
					SdkGameMapper sdkGameMapper=dal.getMapper(SdkGameMapper.class);
					SdkGameExample sdkGameExample=new SdkGameExample();
					sdkGameExample.createCriteria().andGameIdEqualTo(gameid);
					SdkGame sdkGame=sdkGameMapper.selectOne(sdkGameExample);
					if(sdkGame!=null){
						gameName=sdkGame.getName();
					}
					sdkOrder.setOrderName(gameName);
					sdkOrder.setOrderNo(order_no);
					sdkOrder.setOrderDesc("");
					
					int orderStatus=0;
					if ("success".equals(status)) {
						orderStatus = 1;
					}else{
						orderStatus = 3;
					}
					sdkOrder.setStatus(orderStatus);
					sdkOrder.setNotifyStatus(1);
					sdkOrder.setType(mmdoType);
//					order.setUid();
//					order.setSdkver();
					
					//插入SdkOrderMmdo表
					SdkOrderMmdoMapper sdkOrderMmdoMapper = dal
							.getMapper(SdkOrderMmdoMapper.class);
					SdkOrderMmdo  sdkOrderMmdo= new SdkOrderMmdo();
					if(phone.length()==11&&phone.startsWith("1")){
						SdkTelephoneMapper sdkTelephoneMapper=dal.getMapper(SdkTelephoneMapper.class);
						SdkTelephoneExample sdkTelephoneExample=new SdkTelephoneExample();
						sdkTelephoneExample.createCriteria().andMobilephoneEqualTo(phone);
						SdkTelephone sdkTelephone=sdkTelephoneMapper.selectOne(sdkTelephoneExample);
						if(sdkTelephone!=null){
							sdkOrderMmdo.setReqImsi(sdkTelephone.getImsi());
							sdkOrderMmdo.setImei(sdkTelephone.getImei());
							sdkOrderMmdo.setProvinceNo(sdkTelephone.getProvinceNo());
							sdkOrderMmdo.setRawData(sdkTelephone.getImsi());
						}
					}
//					
					sdkOrderMmdo.setReqOrderAmount(realamount);
					sdkOrderMmdo.setReqTime(time);
					sdkOrderMmdo.setGameId(gameid);
					sdkOrderMmdo.setOperationType(operationType);
					sdkOrderMmdo.setPayChannelCode(payChannelCode);
					sdkOrderMmdo.setTradeid(outTradeId);
					sdkOrderMmdo.setAdditionalStatus(0);
					sdkOrderMmdo.setMobilephone(phone);
					sdkOrderMmdo.setRespStatus(orderStatus);;
//					sdkOrderMmdo.setUid();
//					sdkOrderMmdo.setMacAddr();
//					sdkOrderMmdo.setIpAddr();
//					sdkOrderMmdo.setReqSendContent();
//					sdkOrderMmdo.setReqSendNumber();
//					sdkOrderMmdo.setOverThirtym();
//					sdkOrderMmdo.setIccid();
//					sdkOrderMmdo.setCenternumber();
//					sdkOrderMmdo.setTjpropsname();
//					sdkOrderMmdo.setPaytactics();
//					sdkOrderMmdo.setNextPaytactics();
					sdkOrderMmdoMapper.insertSelective(sdkOrderMmdo);

					sdkOrder.setPayId(sdkOrderMmdo.getPayId());
					sdkOrder.setAmount(realamount);
					sdkOrderMapper.insert(sdkOrder);
					result=success_mgs;
				}else {
					//表示appsecret不对应
					result=fail_mgs;
				}
			}
			dal.commit();
			return response(result);
		} catch (Exception e) {
			logger.error("the sdkbaidupay pay notify error!", e);
			return response(fail_mgs);
		} finally {
			dal.close();
		}
	}

	private String getSignature(String appid, String orderid,
			String amount, String unit, String status,
			String paychannel, String appsecret) {
		String plaintext = appid+orderid+amount+unit+status+paychannel+appsecret;
		String result=DigestUtils.md5Hex(plaintext);
		return result;
	}

	/**
	 * 测试方法
	 * @param appId
	 * @param cpOrderId
	 * @param cpUserInfo
	 * @param uid
	 * @param orderId
	 * @param orderStatus
	 * @param payFee
	 * @param productCode
	 * @param productName
	 * @param productCount
	 * @param payTime
	 * @param orderConsumeType
	 * @param partnerGiftConsume
	 * @return
	 */
	private String getContent(String appid, String orderid,
			String phone,String jfd,String sign,
			String extchannel,String channel,
			String amount, String unit, String status,
			String paychannel, String appsecret){
		HttpClient httpclient = new DefaultHttpClient();
		String result="";
		try {
			String sendUrl = "http://dev.leyogame.cn/api/m/BaiduQmxdgNotify?";
			logger.info("the sdkbaidupay send api = " + sendUrl);
			StringBuffer query = new StringBuffer(sendUrl);
			query.append("appid=").append(appid);
			query.append("&orderid=").append(orderid);
			query.append("&phone=").append(phone);
			query.append("&jfd=").append(jfd);
			query.append("&sign=").append(sign);
			query.append("&extchannel=").append(extchannel);
			query.append("&channel=").append(channel);
			query.append("&amount=").append(amount);
			query.append("&unit=").append(unit);
			query.append("&status=").append(status);
			query.append("&paychannel=").append(paychannel);
			query.append("&appsecret=").append(appsecret);
			HttpGet httpget = new HttpGet(query.toString());
			logger.info("the sdkbaidupay send url =" + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.info("the sdkbaidupay send response content - content = "
					+ content);
			result=content;
			return result;
		} catch (Exception e) {
			logger.error("the sdkbaidupay request error is :" + e, e);
			return "";
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
	}
	
	private Result response(String result) {
		return new Result(new ResultXJContent(result, result));
	}
	
	public static void main(String args[]) throws Exception {
		BaiduQmxdgNotify t=new BaiduQmxdgNotify();
		String appid="7265066";
		String orderid="lvdTt30EDTK0q0i";
		String amount="400"; 
		String unit="fen";
		String status="success";
		String paychannel="tencentmm";
		String phone="0";
		String jfd="8390";
		String sign="7e3831ba5f7d6a44294661840ed4e30c";
		String extchannel="13744";
		String channel="tencentmm";
//		String getSign=t.getSignature(appid,orderid,amount,unit,status,paychannel,appsecret);
//		System.out.println(getSign);
		
		String contentString=t.getContent(appid, orderid,phone,jfd,sign,extchannel,channel, amount, unit, status, paychannel, appsecret);
		System.out.println(contentString);
	}
}
