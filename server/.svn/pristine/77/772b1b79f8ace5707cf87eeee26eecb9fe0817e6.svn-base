/**
 * 
 */
package com.cheyooh.service.sdk.action.notify;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.ResultXJContent;
import com.cheyooh.service.sdk.db.dao.SdkNotifyMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkNotifySinaMonthlyMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMmdoMapper;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdo;
import com.cheyooh.service.sdk.db.entity.SdkNotifySinaMonthly;
import com.cheyooh.service.sdk.db.entity.SdkNotifySinaMonthlyExample;
import com.cheyooh.service.sdk.db.entity.SdkOrder;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdo;
import com.cheyooh.service.sdk.idata.notify.CmdSinaMonthlyPmNotify;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * @author Merlin
 * 
 */
public class SinaMonthlyPmNotify extends AbstractNotifyService<CmdSinaMonthlyPmNotify> {
  private static final String SUCCESS = "succ";
  private static final String FAILURE = "fail";
  private static final String SINAMONTH = "sinamonth";
  private static final ObjectMapper mapper = new ObjectMapper();
  static {
    // mapper.setPropertyNamingStrategy(PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES);
    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
  }
  
  /*
   * (non-Javadoc)
   * 
   * @see com.cheyooh.service.framework.basic.Service#verify(com.cheyooh.service.framework.idata.Cmd)
   */
  @Override
  protected Result verify(CmdSinaMonthlyPmNotify cmd) {
    return null;
  }

  /*
   * (non-Javadoc)
   * 
   * @see com.cheyooh.service.framework.basic.Service#execute(com.cheyooh.service.framework.idata.Cmd)
   */
  @Override
  protected Result execute(CmdSinaMonthlyPmNotify cmd) {
    DAL dal = DALFactory.createDAL();
    try {
      
      Map<String, String> params = getParams(cmd.getServiceContext().getRequest());
      String rawData = null;
      try {
        rawData = mapper.writeValueAsString(params);
      } catch (Exception e) {
        logger.error("the sina monthly pm notify error!", e);
      }
      
      SdkOrderMapper orderMapper = dal.getMapper(SdkOrderMapper.class);
      SdkOrder order = orderMapper.selectByPrimaryKey(cmd.getBusinesslinkid());
      if (order == null) {
        logger.error("the sina monthly pm notify, cannot find the order, data = " + rawData);
        return fail();
      }

      SdkOrderMmdoMapper mmdoMapper = dal.getMapper(SdkOrderMmdoMapper.class);
      SdkOrderMmdo orderMmdo = mmdoMapper.selectByPrimaryKey(order.getPayId());
      if (orderMmdo == null) {
        logger.error("the sina monthly pm notify, cannot find the mmdo order, data = " + rawData);
        return fail();
      }
      
      SdkNotifySinaMonthlyMapper monthlyMapper = dal.getMapper(SdkNotifySinaMonthlyMapper.class);
      SdkNotifySinaMonthlyExample example = new SdkNotifySinaMonthlyExample();
      example.createCriteria().andOrderNoEqualTo(cmd.getBusinesslinkid());
      SdkNotifySinaMonthly monthly = monthlyMapper.selectOne(example);
      Date now = new Date();
      if (monthly != null && StringUtils.isNotBlank(monthly.getState())) {
        logger.error("the sina monthly pm notify error, the notify have handle! data = " + rawData);
        return success();
      } 
      
      if (monthly == null) {
        monthly = new SdkNotifySinaMonthly();
        monthly.setCreatedTime(now);
      }
      
      monthly.setDownPort(cmd.getLongphone());
      monthly.setLinkId(cmd.getLinkid());
      monthly.setMobile(cmd.getMobile());
      monthly.setNotifyRawData(rawData);
      monthly.setOrderNo(cmd.getBusinesslinkid());
      monthly.setState(cmd.getState());
      monthly.setUpdatedTime(now);
      
      monthly.setGameId(order.getGameId());
      monthly.setOperatorType(orderMmdo.getOperationType());
      monthly.setAmount(order.getAmount());
      if (monthly.getId() == null) {
        monthlyMapper.insertSelective(monthly);
      } else {
        monthlyMapper.updateByPrimaryKeySelective(monthly);
      }
      
      if (StringUtils.isBlank(cmd.getMobile())) {
        logger.info("the sina monthly pm notify, connot read the mobile, data = " + rawData);
        dal.commit();
        return fail();
      }
      
      SdkNotifyMmdo notifyMmdo = new SdkNotifyMmdo();
      notifyMmdo.setAmount(monthly.getAmount());
      notifyMmdo.setCmd(monthly.getUpCmd());
      notifyMmdo.setCreateTime(new Date());
      notifyMmdo.setGameId(monthly.getGameId());
      //notifyMmdo.setKey(key);
      notifyMmdo.setLinkid(cmd.getBusinesslinkid());
      notifyMmdo.setMobile(cmd.getMobile());
      notifyMmdo.setOperationType(monthly.getOperatorType());
      notifyMmdo.setSpid(cmd.getLongphone());
      notifyMmdo.setSpnum(monthly.getUpPort());
      notifyMmdo.setPayChannelCode(SINAMONTH);
      SdkNotifyMmdoMapper notifyMmdoDao = dal.getMapper(SdkNotifyMmdoMapper.class);
      notifyMmdoDao.insertSelective(notifyMmdo);
      
      if ("0".equals(cmd.getState())) {
        order.setStatus(1);
        orderMapper.updateByPrimaryKeySelective(order);
      }
      
      dal.commit();
    } finally {
      dal.close();
    }
    return success();
  }

  private Result success() {
    return new Result(new ResultXJContent(SUCCESS, SUCCESS));
  }
  private Result fail() {
    return new Result(new ResultXJContent(FAILURE, FAILURE));
  }
  
  protected Map<String, String> getParams(HttpServletRequest request) {
    Map<String, String> params = new HashMap<String, String>();
    logger.debug("================ param list ================");
    Set<String> keySet = request.getParameterMap().keySet();
    for (String key : keySet) {
      String value = request.getParameter(key);
      logger.debug(key + " = " + value);
      params.put(key, value);
    }
    return params;
  }
}
