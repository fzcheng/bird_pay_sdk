package com.cheyooh.service.sdk.action.notify;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;

import org.apache.commons.lang.StringUtils;
import org.nuxeo.common.xmap.XMap;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Cmd;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.ResultXJContent;
import com.cheyooh.service.sdk.db.dao.SdkNotifyMmdoMapper;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdo;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdoExample;
import com.cheyooh.service.sdk.idata.gameserver.XmlMmNotifyReq;
import com.cheyooh.service.sdk.idata.gameserver.XmlMmNotifyResp;

public class CmccmmbaixunNotify extends AbstractNotifyService<Cmd> {
	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#verify(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@Override
	protected Result verify(Cmd cmd) {
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#execute(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@Override
	protected Result execute(Cmd cmd) {
		XmlMmNotifyResp resp = new XmlMmNotifyResp();
		DAL dal = DALFactory.createDAL();
		int resultMsg=2; 
		try {
			InputStream in = cmd.getServiceContext().getRequest()
					.getInputStream();
			BufferedReader reader = new BufferedReader(new InputStreamReader(
					in, "UTF-8"));
			StringBuffer xmlBuff = new StringBuffer();
			String line;
			while ((line = reader.readLine()) != null) {
				xmlBuff.append(line);
			}

			String xml = xmlBuff.toString();
			
			logger.info("the mm notify xml : " + xml);

			XmlMmNotifyReq notify = parseNotify(xml);
			
			logger.info("the cmccmmbaixun notify orderNo is: " + notify.getExData());
			
			String orderNo=notify.getExData();
			if(StringUtils.isEmpty(notify.getExData())||StringUtils.isBlank(notify.getExData())){
				orderNo="";
			}
			SdkNotifyMmdoMapper sdkNotifyMmdoMapper = dal.getMapper(SdkNotifyMmdoMapper.class);
			SdkNotifyMmdoExample sdkNotifyMmdoExample=new SdkNotifyMmdoExample();
			sdkNotifyMmdoExample.createCriteria().andOrderNoEqualTo(orderNo);
			SdkNotifyMmdo sdkNotifyMmdo=sdkNotifyMmdoMapper.selectOne(sdkNotifyMmdoExample);
			if(sdkNotifyMmdo!=null){
				int notifyStatus=0;
				if(!"00000000000000000000".equals(notify.getOrderId())){
					notifyStatus=1;
					resultMsg=0;
				}else {
					notifyStatus=0;
					resultMsg=0;
				}
				sdkNotifyMmdo.setLinkid(notify.getTradeId());
				sdkNotifyMmdo.setNotifyStatus(notifyStatus);
				sdkNotifyMmdo.setOriginalcode(notify.getOrderId());
				sdkNotifyMmdoMapper.updateByPrimaryKey(sdkNotifyMmdo);
			}else{
				resultMsg=2;
			}
			
//			if(!"00000000000000000000".equals(notify.getOrderId())){
//				SdkOrderMapper sdkOrderMapper = dal.getMapper(SdkOrderMapper.class);
//				SdkOrderExample sdkOrderExample = new SdkOrderExample();
//				sdkOrderExample.createCriteria().andOrderNoEqualTo(notify.getExData());
//				SdkOrder sdkOrder = sdkOrderMapper.selectOne(sdkOrderExample);
//				if (sdkOrder != null) {
//					SdkOrderMmdoMapper sdkOrderMmdoMapper = dal
//							.getMapper(SdkOrderMmdoMapper.class);
//					SdkOrderMmdoExample sdkOrderMmdoExample = new SdkOrderMmdoExample();
//					sdkOrderMmdoExample.createCriteria().andPayIdEqualTo(
//							sdkOrder.getPayId());
//					SdkOrderMmdo sdkOrderMmdo = sdkOrderMmdoMapper
//							.selectOne(sdkOrderMmdoExample);
//					if (sdkOrderMmdo != null) {
//						SdkNotifyMmdo sdkNotifyMmdo = new SdkNotifyMmdo();
//						sdkNotifyMmdo.setLinkid(notify.getTradeId());
//						sdkNotifyMmdo.setSpid(sdkOrderMmdo.getRespSendNumber());
//						sdkNotifyMmdo.setCmd(sdkOrderMmdo.getRespSendContent());
//						sdkNotifyMmdo.setMobile(notify.getMsisdn());
//						// sdkNotifyMmdo.setSpnum(spnum);
//						SdkTelephoneMapper sdkTelephoneMapper=dal.getMapper(SdkTelephoneMapper.class);
//						SdkTelephoneExample sdkTelephoneExample=new SdkTelephoneExample();
//						sdkTelephoneExample.createCriteria().andImsiEqualTo(sdkOrderMmdo.getRespImsi());
//						SdkTelephone sdkTelephone=sdkTelephoneMapper.selectOne(sdkTelephoneExample);
//						if(sdkTelephone!=null){
//							sdkNotifyMmdo.setKey(String.valueOf(sdkTelephone.getProvinceNo()));
//						}
//						sdkNotifyMmdo.setSpnum(sdkOrderMmdo.getReqSendNumber());
//						sdkNotifyMmdo.setGameId(sdkOrderMmdo.getGameId());
//						sdkNotifyMmdo.setAmount(sdkOrderMmdo.getReqOrderAmount());
//						sdkNotifyMmdo.setCreateTime(new Date());
//						sdkNotifyMmdo.setOperationType(1);
//						sdkNotifyMmdo.setPayChannelCode(sdkOrderMmdo
//								.getPayChannelCode());
//						sdkNotifyMmdo.setAdditionalStatus(sdkOrderMmdo.getAdditionalStatus());
//						sdkNotifyMmdo.setOrderNo(notify.getExData());
//						SdkNotifyMmdoMapper sdkNotifyMmdoMapper = dal
//								.getMapper(SdkNotifyMmdoMapper.class);
//						sdkNotifyMmdoMapper.insertSelective(sdkNotifyMmdo);
//					}
//				}
//			}
			resp.setTransactionID(notify.getTransactionID());
			resp.setMsgType(notify.getMsgType());
			resp.setVersion(notify.getVersion());
			resp.sethRet(resultMsg);

			dal.commit();
		} catch (Exception e) {
			resp.sethRet(2);
			logger.error(e);
		} finally {
			dal.close();
		}
		return response(resp.toXml());
	}

	private XmlMmNotifyReq parseNotify(String xml) throws Exception {
		XMap xmap = new XMap();
		xmap.register(XmlMmNotifyReq.class);

		ByteArrayInputStream in = new ByteArrayInputStream(
				xml.getBytes("UTF-8"));
		XmlMmNotifyReq notify = (XmlMmNotifyReq) xmap.load(in);

		return notify;
	}

	private Result response(String msg) {
		return new Result(new ResultXJContent(msg, msg));
	}
}
