package com.cheyooh.service.sdk.action.notify;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.DateFormatUtils;
import org.nuxeo.common.xmap.XMap;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Cmd;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.ResultXJContent;
import com.cheyooh.service.sdk.db.dao.SdkNotifyMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkSwbInfoMapper;
import com.cheyooh.service.sdk.db.dao.SdkTelephoneMapper;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdo;
import com.cheyooh.service.sdk.db.entity.SdkOrder;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdo;
import com.cheyooh.service.sdk.db.entity.SdkSwbInfo;
import com.cheyooh.service.sdk.db.entity.SdkSwbInfoExample;
import com.cheyooh.service.sdk.db.entity.SdkTelephone;
import com.cheyooh.service.sdk.db.entity.SdkTelephoneExample;
import com.cheyooh.service.sdk.idata.gameserver.XmlWoappstoreCallBackRes;
import com.cheyooh.service.sdk.idata.gameserver.XmlWoappstoreCallbackReq;
import com.cheyooh.service.sdk.idata.gameserver.XmlWoappstoreVerifyOrderReq;
import com.cheyooh.service.sdk.idata.gameserver.XmlWoappstoreVerifyOrderRes;

/**
 * 此接口用于都市特种兵，没有接入乐游sdk的
 * @author zhizhi
 *
 */
public class WoappstoreWithoutLeyosdkNotify extends AbstractNotifyService<Cmd> {
	private static final Integer operationType = 2;
	private static final String payChannelCode = "woappstore";
	private int gameid=0;

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#verify(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@Override
	protected Result verify(Cmd cmd) {
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#execute(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@Override
	protected Result execute(Cmd cmd) {
		DAL dal = DALFactory.createDAL();
		String resStr = "";
		try {
			HttpServletRequest request = cmd.getServiceContext().getRequest();
			String serviceid = request.getParameter("serviceid");
			InputStream in = request.getInputStream();
			BufferedReader reader = new BufferedReader(new InputStreamReader(
					in, "UTF-8"));
			StringBuffer xmlBuff = new StringBuffer();
			String line;
			while ((line = reader.readLine()) != null) {
				xmlBuff.append(line);
			}
			String xml = xmlBuff.toString();
			logger.info("woappstoreWithoutLeyosdk pay notify serviceid = " + serviceid +", the xml  is : " + xml);
			if (StringUtils.isNotBlank(serviceid)) {
				resStr = verifyOrder(cmd, dal, xml);
			} else {
				resStr = handleOrderNotify(cmd, dal, xml);
			}
		} catch (Exception e) {
			logger.error("read the woappstoreWithoutLeyosdk pay notify error!", e);
			return response("Exception: " + e.getMessage()
					+ ", class: ".getClass());
		} finally {
			dal.close();
		}
		Result result = response(resStr);
		logger.info("the woappstoreWithoutLeyosdk pay notify is :"
				+ result.getXml("WoappstoreNotify"));
		return result;
	}

	private String verifyOrder(Cmd cmd, DAL dal, String xml) throws Exception {
		XmlWoappstoreVerifyOrderReq req = parseVerifyOrderReq(xml);

		XmlWoappstoreVerifyOrderRes res = new XmlWoappstoreVerifyOrderRes();

		//此key是都市特种兵的key
		String key = "7552f4a602d72b91415b";

		String sign = DigestUtils.md5Hex("orderid=" + req.getOrderid()
				+ "&Key=" + key);

		if (!sign.equalsIgnoreCase(req.getSignMsg())) {
			res.setCheckOrderIdRsp(1);
			logger.error("the woappstoreWithoutLeyosdk verify order pay sign error! request xml : "
					+ xml);
			return res.toXml();
		}

		res.setCheckOrderIdRsp(0);
//		String serviceid="";
//		res.setServiceid(serviceid);
//		String channelid="";
//		res.setChannelid(channelid);
		//特种兵的
		String cpid = "86012870";
		res.setCpid(cpid);
		res.setAppversion(cmd.getServiceContext().getRequest()
				.getParameter("version"));

		dal.commit();
		return res.toXml();
	}

	private XmlWoappstoreVerifyOrderReq parseVerifyOrderReq(String xml)
			throws Exception {
		XMap xmap = new XMap();
		xmap.register(XmlWoappstoreVerifyOrderReq.class);

		ByteArrayInputStream in = new ByteArrayInputStream(
				xml.getBytes("UTF-8"));
		XmlWoappstoreVerifyOrderReq req = (XmlWoappstoreVerifyOrderReq) xmap
				.load(in);

		return req;
	}

	private String handleOrderNotify(Cmd cmd, DAL dal, String xml)
			throws Exception {
		XmlWoappstoreCallbackReq req = parseCallbackReq(xml);
		XmlWoappstoreCallBackRes res = new XmlWoappstoreCallBackRes();

		String key = "7552f4a602d72b91415b";

		String sign = DigestUtils.md5Hex(req.generateSignString() + "&Key="
				+ key);

		if (!sign.equalsIgnoreCase(req.getSignMsg())) {
			res.setCallbackRsp(2);
			logger.error("the woappstore callback pay sign error! request xml : "
					+ xml);
			return res.toXml();
		}
		
		SdkNotifyMmdo sdkNotifyMmdo = new SdkNotifyMmdo();
		try {
			sdkNotifyMmdo.setAmount(Float.parseFloat(req.getPayfee()) / 100);
		} catch (Exception e) {
			logger.warn("read the woappstore parse price error!", e);
		}
		sdkNotifyMmdo.setLinkid(req.getOrderid());
		sdkNotifyMmdo.setSpid(req.getConsumeCode());
//		sdkNotifyMmdo.setCmd(cmd);
//		sdkNotifyMmdo.setMobile(notify.getUserId());
//		sdkNotifyMmdo.setSpnum(spnum);
//		sdkNotifyMmdo.setKey(key);
		
		//特种兵的
		if("9022719955020150811120916956700".equals(req.getAppid())){
			gameid=245;
		}
		sdkNotifyMmdo.setGameId(gameid);
		Date createTime=new Date();
		sdkNotifyMmdo.setCreateTime(createTime);
		sdkNotifyMmdo.setOperationType(operationType);
		sdkNotifyMmdo.setPayChannelCode(payChannelCode);
		sdkNotifyMmdo.setAdditionalStatus(0);
//		sdkNotifyMmdo.setOrderNo(orderNo);
		int notifyStatus=0;
		if("0".equals(req.gethRet())){
			notifyStatus=1;
		}else {
			notifyStatus=0;
		}
		sdkNotifyMmdo.setNotifyStatus(notifyStatus);
		sdkNotifyMmdo.setOriginalcode(req.getStatus());
		SdkNotifyMmdoMapper sdkNotifyMmdoMapper = dal
				.getMapper(SdkNotifyMmdoMapper.class);
		sdkNotifyMmdoMapper.insertSelective(sdkNotifyMmdo);
		res.setCallbackRsp(1);

		dal.commit();
		return res.toXml();
	}

	
	private XmlWoappstoreCallbackReq parseCallbackReq(String xml)
			throws Exception {
		XMap xmap = new XMap();
		xmap.register(XmlWoappstoreCallbackReq.class);

		ByteArrayInputStream in = new ByteArrayInputStream(
				xml.getBytes("UTF-8"));
		XmlWoappstoreCallbackReq req = (XmlWoappstoreCallbackReq) xmap.load(in);

		return req;
	}

	private Result response(String msg) {
		return new Result(new ResultXJContent(msg, msg));
	}
}
