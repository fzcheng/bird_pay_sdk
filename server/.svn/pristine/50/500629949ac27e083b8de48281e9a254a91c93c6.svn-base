package com.cheyooh.service.sdk.action.notify;

import java.util.Date;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Cmd;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.ResultXJContent;
import com.cheyooh.service.sdk.db.dao.SdkNotifyMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkTelephoneMapper;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdo;
import com.cheyooh.service.sdk.db.entity.SdkOrder;
import com.cheyooh.service.sdk.db.entity.SdkOrderExample;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdo;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdoExample;
import com.cheyooh.service.sdk.db.entity.SdkTelephone;
import com.cheyooh.service.sdk.db.entity.SdkTelephoneExample;

public class SshellResultNotify extends AbstractNotifyService<Cmd> {
	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#verify(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@Override
	protected Result verify(Cmd cmd) {
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#execute(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@SuppressWarnings("unused")
	@Override
	protected Result execute(Cmd cmd) {
		DAL dal = DALFactory.createDAL();
		try {
			String result = cmd.getServiceContext().getRequest()
					.getParameter("result");
			String paymentid = cmd.getServiceContext().getRequest()
					.getParameter("paymentid");
			String errorstr = cmd.getServiceContext().getRequest()
					.getParameter("errorstr");
			String channelid = cmd.getServiceContext().getRequest()
					.getParameter("channelid");
			String softgood = cmd.getServiceContext().getRequest()
					.getParameter("softgood");
			String money = cmd.getServiceContext().getRequest()
					.getParameter("money");
			String pkey = cmd.getServiceContext().getRequest()
					.getParameter("pkey");
			String gamename = cmd.getServiceContext().getRequest()
					.getParameter("gamename");
			String gamecode = cmd.getServiceContext().getRequest()
					.getParameter("gamecode");
			String inputchannelid = cmd.getServiceContext().getRequest()
					.getParameter("inputchannelid");
			String goodinputid = cmd.getServiceContext().getRequest()
					.getParameter("goodinputid");
			String paymenttype = cmd.getServiceContext().getRequest()
					.getParameter("paymenttype");
			String customorderno = cmd.getServiceContext().getRequest()
					.getParameter("customorderno");
			String userid = cmd.getServiceContext().getRequest()
					.getParameter("userid");
			
			logger.info("the SshellResultNotify customorderno is :"+customorderno);
			if("0".equals(result)){
				SdkNotifyMmdo sdkNotifyMmdo = new SdkNotifyMmdo();
				SdkOrderMapper sdkOrderMapper = dal.getMapper(SdkOrderMapper.class);
				SdkOrderExample sdkOrderExample = new SdkOrderExample();
				sdkOrderExample.createCriteria().andOrderNoEqualTo(customorderno);
				SdkOrder sdkOrder = sdkOrderMapper.selectOne(sdkOrderExample);
				if (sdkOrder != null) {
					SdkOrderMmdoMapper sdkOrderMmdoMapper = dal
							.getMapper(SdkOrderMmdoMapper.class);
					SdkOrderMmdoExample sdkOrderMmdoExample = new SdkOrderMmdoExample();
					sdkOrderMmdoExample.createCriteria().andPayIdEqualTo(
							sdkOrder.getPayId());
					SdkOrderMmdo sdkOrderMmdo = sdkOrderMmdoMapper
							.selectOne(sdkOrderMmdoExample);
					if (sdkOrderMmdo != null) {
						sdkNotifyMmdo.setOrderNo(customorderno);
						sdkNotifyMmdo.setLinkid(paymentid);
						sdkNotifyMmdo.setSpid(sdkOrderMmdo.getReqSendContent());
						sdkNotifyMmdo.setCmd(sdkOrderMmdo.getRespSendContent());
						SdkTelephoneMapper sdkTelephoneMapper=dal.getMapper(SdkTelephoneMapper.class);
						SdkTelephoneExample sdkTelephoneExample=new SdkTelephoneExample();
						sdkTelephoneExample.createCriteria().andImsiEqualTo(sdkOrderMmdo.getRespImsi());
						SdkTelephone sdkTelephone=sdkTelephoneMapper.selectOne(sdkTelephoneExample);
						if(sdkTelephone!=null){
							sdkNotifyMmdo.setMobile(sdkTelephone.getMobilephone());
							sdkNotifyMmdo.setKey(String.valueOf(sdkTelephone.getProvinceNo()));
						}
						sdkNotifyMmdo.setSpnum(sdkOrderMmdo.getReqSendNumber());
						sdkNotifyMmdo.setGameId(sdkOrderMmdo.getGameId());
						sdkNotifyMmdo.setAmount(sdkOrderMmdo.getReqOrderAmount());
						sdkNotifyMmdo.setCreateTime(new Date());
						sdkNotifyMmdo.setOperationType(sdkOrderMmdo.getOperationType());
						sdkNotifyMmdo.setPayChannelCode(sdkOrderMmdo
								.getPayChannelCode());
						sdkNotifyMmdo.setAdditionalStatus(sdkOrderMmdo.getAdditionalStatus());
						SdkNotifyMmdoMapper sdkNotifyMmdoMapper = dal
								.getMapper(SdkNotifyMmdoMapper.class);
						sdkNotifyMmdoMapper.insertSelective(sdkNotifyMmdo);
					}
				}
				dal.commit();
			}
			
		} catch (Exception e) {
			logger.error("the zmzf pay notify error!", e);
			fail("Exception: " + e.getMessage() + ", class: ".getClass());
		} finally {
			dal.close();
		}
		return success();
	}

	private Result success() {
		return new Result(new ResultXJContent("success", "success"));
	}

	private Result fail(String msg) {
		// log
		return new Result(new ResultXJContent(msg, msg));
	}
}
