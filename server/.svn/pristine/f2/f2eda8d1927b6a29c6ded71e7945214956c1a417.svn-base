package com.cheyooh.service.sdk.action.notify;


import org.apache.commons.lang.StringUtils;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Cmd;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.ResultXJContent;
import com.cheyooh.service.sdk.db.dao.SdkNotifyMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMmdoMapper;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdo;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdoExample;
import com.cheyooh.service.sdk.db.entity.SdkOrder;
import com.cheyooh.service.sdk.db.entity.SdkOrderExample;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdo;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdoExample;

public class CuccMusicbaseNotify extends AbstractNotifyService<Cmd> {
	private String payChannelCode="cuccmusicbase";
	private String msg = "OK";

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.cheyooh.service.framework.basic.Service#verify(com.cheyooh.service .framework.idata.Cmd)
	 */
	@Override
	protected Result verify(Cmd cmd) {
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.cheyooh.service.framework.basic.Service#execute(com.cheyooh.service .framework.idata.Cmd)
	 */
	@Override
	protected Result execute(Cmd cmd) {
		DAL dal = DALFactory.createDAL();
		try {
			String contentId = cmd.getServiceContext().getRequest().getParameter("contentId");
			if(StringUtils.isEmpty(contentId)||StringUtils.isBlank(contentId)){
				contentId="";
			}
			contentId=contentId.trim();
			String returnCode = cmd.getServiceContext().getRequest().getParameter("returnCode");
			if(StringUtils.isEmpty(returnCode)||StringUtils.isBlank(returnCode)){
				returnCode="";
			}
			String callNumber = cmd.getServiceContext().getRequest().getParameter("callNumber");
			if(StringUtils.isEmpty(callNumber)||StringUtils.isBlank(callNumber)){
				callNumber="";
			}
			String description = cmd.getServiceContext().getRequest().getParameter("description");
			if(StringUtils.isEmpty(description)||StringUtils.isBlank(description)){
				description="";
			}
			
			SdkOrderMmdoMapper sdkOrderMmdoMapper = dal.getMapper(SdkOrderMmdoMapper.class);
			SdkOrderMmdoExample sdkOrderMmdoExample = new SdkOrderMmdoExample();
			sdkOrderMmdoExample.createCriteria().andPayChannelCodeEqualTo(payChannelCode).andTradeidEqualTo(contentId);
			SdkOrderMmdo sdkOrderMmdo = sdkOrderMmdoMapper.selectOne(sdkOrderMmdoExample);
			
			String orderNo ="";
			if(sdkOrderMmdo!=null){
				SdkOrderMapper sdkOrderMapper = dal.getMapper(SdkOrderMapper.class);
				SdkOrderExample sdkOrderExample = new SdkOrderExample();
				sdkOrderExample.createCriteria().andPayIdEqualTo(sdkOrderMmdo.getPayId());
				SdkOrder sdkOrder = sdkOrderMapper.selectOne(sdkOrderExample);
				if(sdkOrder!=null){
					orderNo = sdkOrder.getOrderNo();
				}
			}
			
			SdkNotifyMmdoMapper sdkNotifyMmdoMapper1 = dal.getMapper(SdkNotifyMmdoMapper.class);
			SdkNotifyMmdoExample sdkNotifyMmdoExample1 = new SdkNotifyMmdoExample();
			sdkNotifyMmdoExample1.createCriteria().andOrderNoEqualTo(orderNo);
			SdkNotifyMmdo sdkNotifyMmdo1 = sdkNotifyMmdoMapper1.selectOne(sdkNotifyMmdoExample1);
			logger.info("the cuccMusicbase notify orderNo =" + orderNo+", outtradeid ="+contentId);

			if (sdkNotifyMmdo1 != null) {
				int notifyStatus=0;
				if ("000000".equals(returnCode)) {
					if(StringUtils.isEmpty(sdkNotifyMmdo1.getMobile())||StringUtils.isBlank(sdkNotifyMmdo1.getMobile())){
						sdkNotifyMmdo1.setMobile(callNumber);
					}
					notifyStatus=1;
				}else {
					if(StringUtils.isEmpty(sdkNotifyMmdo1.getMobile())||StringUtils.isBlank(sdkNotifyMmdo1.getMobile())){
						sdkNotifyMmdo1.setMobile(callNumber);
					}
					notifyStatus=0;
				}
				sdkNotifyMmdo1.setOriginalcode(returnCode);
				sdkNotifyMmdo1.setStatusDetail(description);
				sdkNotifyMmdo1.setNotifyStatus(notifyStatus);
				sdkNotifyMmdoMapper1.updateByPrimaryKey(sdkNotifyMmdo1);
				logger.info("the cuccMusicbase notify orderNo =" + orderNo+", returnCode="+returnCode+", notifyStatus="+notifyStatus);
				
//				logger.info("the SdkNotifyMmdo is exist ! orderNo is :" + orderNo);
//				return response(msg);
			}

//			if ("000000".equals(returnCode)) {
//				SdkNotifyMmdo sdkNotifyMmdo = new SdkNotifyMmdo();
//				sdkNotifyMmdo.setLinkid(contentId);
//				sdkNotifyMmdo.setSpid(sdkOrderMmdo.getReqSendContent());
//				sdkNotifyMmdo.setCmd(sdkOrderMmdo.getRespSendContent());
//				if(StringUtils.isNotBlank(callNumber)){
//					sdkNotifyMmdo.setMobile(callNumber);
//				}
//				SdkTelephoneMapper sdkTelephoneMapper = dal.getMapper(SdkTelephoneMapper.class);
//				SdkTelephoneExample sdkTelephoneExample = new SdkTelephoneExample();
//				sdkTelephoneExample.createCriteria().andImsiEqualTo(sdkOrderMmdo.getRespImsi());
//				SdkTelephone sdkTelephone = sdkTelephoneMapper.selectOne(sdkTelephoneExample);
//				if (sdkTelephone != null) {
//					sdkNotifyMmdo.setMobile(sdkTelephone.getMobilephone());
//					sdkNotifyMmdo.setKey(String.valueOf(sdkTelephone.getProvinceNo()));
//				}
//				sdkNotifyMmdo.setSpnum(sdkOrderMmdo.getReqSendNumber());
//				sdkNotifyMmdo.setGameId(sdkOrderMmdo.getGameId());
//				sdkNotifyMmdo.setAmount(sdkOrderMmdo.getReqOrderAmount());
//				sdkNotifyMmdo.setCreateTime(new Date());
//				sdkNotifyMmdo.setOperationType(sdkOrderMmdo.getOperationType());
//				sdkNotifyMmdo.setPayChannelCode(sdkOrderMmdo.getPayChannelCode());
//				sdkNotifyMmdo.setAdditionalStatus(sdkOrderMmdo.getAdditionalStatus());
//				sdkNotifyMmdo.setOrderNo(orderNo);
//				SdkNotifyMmdoMapper sdkNotifyMmdoMapper = dal.getMapper(SdkNotifyMmdoMapper.class);
//				sdkNotifyMmdoMapper.insertSelective(sdkNotifyMmdo);
//			}
			dal.commit();
		} catch (Exception e) {
			logger.error("the cuccMusicbase notify error!", e);
		} finally {
			dal.close();
		}
		return response(msg);
	}

	private Result response(String msg) {
		return new Result(new ResultXJContent(msg, msg));
	}
}
