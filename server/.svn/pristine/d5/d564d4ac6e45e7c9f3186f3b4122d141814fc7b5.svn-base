package com.cheyooh.service.sdk.action.notify;

import java.util.Date;

import org.apache.commons.lang.StringUtils;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Cmd;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.ResultXJContent;
import com.cheyooh.service.framework.idata.StatusCode;
import com.cheyooh.service.sdk.cfg.Cfg;
import com.cheyooh.service.sdk.db.dao.SdkCmccReadIdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkNotifyMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMapper;
import com.cheyooh.service.sdk.db.entity.SdkCmccReadIdo;
import com.cheyooh.service.sdk.db.entity.SdkCmccReadIdoExample;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdo;
import com.cheyooh.service.sdk.db.entity.SdkOrder;
import com.cheyooh.service.sdk.db.entity.SdkOrderExample;

public class CmccreadidoNotify extends AbstractNotifyService<Cmd> {

	private static final String spnum = Cfg.cfg.getString("sdk.ido.spnum");
	private static final String CMCCREADIDO = "cmccreadido";

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#verify(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@Override
	protected Result verify(Cmd cmd) {
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#execute(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@Override
	protected Result execute(Cmd cmd) {
		DAL dal = DALFactory.createDAL();
		try {
			
			String outtradeNo = cmd.getServiceContext().getRequest()
					.getParameter("orderNo");
			 String payTime=cmd.getServiceContext().getRequest().getParameter("payTime");
			 String reqTime=cmd.getServiceContext().getRequest().getParameter("reqTime");
			String feeCode = cmd.getServiceContext().getRequest()
					.getParameter("feeCode");
			String resultCode = cmd.getServiceContext().getRequest()
					.getParameter("resultCode");
			String msisdn=cmd.getServiceContext().getRequest().getParameter("msisdn");
			if (StringUtils.isEmpty(resultCode)||resultCode.equals("0")) {
				logger.debug("the ido orderNo is "+outtradeNo+",resultCode is "+resultCode 
						+",feeCode is "+feeCode +",payTime is "+payTime+",reqTime is "+reqTime);
				return StatusCode.ERR_NOTFOUND().setMessage("支付失败！");
			} 
			
			logger.debug("the ido orderNo = " + outtradeNo);
			SdkCmccReadIdoMapper idomapper = dal
					.getMapper(SdkCmccReadIdoMapper.class);
			SdkCmccReadIdoExample example = new SdkCmccReadIdoExample();
			example.createCriteria().andOutTradeNoEqualTo(outtradeNo);
			SdkCmccReadIdo ido = idomapper.selectOne(example);
			logger.info("the ido content = " + ido.toString());
			
			SdkOrderMapper ordermapper = dal.getMapper(SdkOrderMapper.class);
			SdkOrderExample orderexample = new SdkOrderExample();
			orderexample.createCriteria().andOrderNoEqualTo(ido.getOrderNo());
			SdkOrder sdkorder = ordermapper.selectOne(orderexample);

			logger.debug("the sdkorder orderNo = " + ido.getOrderNo());
			SdkNotifyMmdo notifyMmdo = new SdkNotifyMmdo();
			notifyMmdo.setLinkid(ido.getOutTradeNo());
			notifyMmdo.setSpid(feeCode);
			notifyMmdo.setCmd(ido.getContent());
			notifyMmdo.setMobile(msisdn);
			notifyMmdo.setSpnum(spnum);
			// notifyMmdo.setKey();
			notifyMmdo.setGameId(sdkorder.getGameId());
			notifyMmdo.setAmount(ido.getPrice());
			notifyMmdo.setCreateTime(new Date());
			notifyMmdo.setOperationType(1);
			notifyMmdo.setPayChannelCode(CMCCREADIDO);
			SdkNotifyMmdoMapper notifyMmdoDao = dal
					.getMapper(SdkNotifyMmdoMapper.class);
			notifyMmdoDao.insertSelective(notifyMmdo);
			dal.commit();
		} catch (Exception e) {
			logger.error("the cmccreadido pay notify error!", e);
			fail("Exception: " + e.getMessage() + ", class: ".getClass());
		} finally {
			dal.close();
		}
		return success();
	}

	private Result success() {
		return new Result(new ResultXJContent("success", "success"));
	}

	private Result fail(String msg) {
		// log
		return new Result(new ResultXJContent(msg, msg));
	}	
}
