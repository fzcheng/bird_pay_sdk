package com.cheyooh.service.sdk.action.client;

import java.beans.BeanInfo;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Method;
import java.net.URLEncoder;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.Hex;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang.StringEscapeUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.DateFormatUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.nuxeo.common.xmap.XMap;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.StatusCode;
import com.cheyooh.service.sdk.cfg.Cfg;
import com.cheyooh.service.sdk.db.dao.SdkCenternumberMapper;
import com.cheyooh.service.sdk.db.dao.SdkCityAddrMapper;
import com.cheyooh.service.sdk.db.dao.SdkCmccMtdlOrderMapper;
import com.cheyooh.service.sdk.db.dao.SdkCmccReadIdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkCuccZhangyunzyVerifyMapper;
import com.cheyooh.service.sdk.db.dao.SdkGameBlacklistMapper;
import com.cheyooh.service.sdk.db.dao.SdkGameMapper;
import com.cheyooh.service.sdk.db.dao.SdkGameWhitelistMapper;
import com.cheyooh.service.sdk.db.dao.SdkImsiIccidMapper;
import com.cheyooh.service.sdk.db.dao.SdkMmdoSettingMapper;
import com.cheyooh.service.sdk.db.dao.SdkMmdoShieldMapper;
import com.cheyooh.service.sdk.db.dao.SdkNotifyMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkNotifySinaMonthlyMapper;
import com.cheyooh.service.sdk.db.dao.SdkOperatorPayChannelMapper;
import com.cheyooh.service.sdk.db.dao.SdkOperatorPayLimitMapper;
import com.cheyooh.service.sdk.db.dao.SdkOperatorPayTypeMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMmdoVerifycodeMapper;
import com.cheyooh.service.sdk.db.dao.SdkPropsMapper;
import com.cheyooh.service.sdk.db.dao.SdkSwbInfoMapper;
import com.cheyooh.service.sdk.db.dao.SdkTelephoneCenternumberMapper;
import com.cheyooh.service.sdk.db.dao.SdkTelephoneMapper;
import com.cheyooh.service.sdk.db.dao.SdkWoplusOfflinePaySmsMapper;
import com.cheyooh.service.sdk.db.entity.SdkCenternumber;
import com.cheyooh.service.sdk.db.entity.SdkCenternumberExample;
import com.cheyooh.service.sdk.db.entity.SdkCityAddr;
import com.cheyooh.service.sdk.db.entity.SdkCityAddrExample;
import com.cheyooh.service.sdk.db.entity.SdkCmccMtdlOrder;
import com.cheyooh.service.sdk.db.entity.SdkCmccReadIdo;
import com.cheyooh.service.sdk.db.entity.SdkCuccZhangyunzyVerify;
import com.cheyooh.service.sdk.db.entity.SdkGame;
import com.cheyooh.service.sdk.db.entity.SdkGameBlacklist;
import com.cheyooh.service.sdk.db.entity.SdkGameBlacklistExample;
import com.cheyooh.service.sdk.db.entity.SdkGameExample;
import com.cheyooh.service.sdk.db.entity.SdkGameWhitelist;
import com.cheyooh.service.sdk.db.entity.SdkGameWhitelistExample;
import com.cheyooh.service.sdk.db.entity.SdkImsiIccid;
import com.cheyooh.service.sdk.db.entity.SdkImsiIccidExample;
import com.cheyooh.service.sdk.db.entity.SdkMmdoSetting;
import com.cheyooh.service.sdk.db.entity.SdkMmdoSettingExample;
import com.cheyooh.service.sdk.db.entity.SdkMmdoShield;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdo;
import com.cheyooh.service.sdk.db.entity.SdkNotifySinaMonthly;
import com.cheyooh.service.sdk.db.entity.SdkOperatorPayChannel;
import com.cheyooh.service.sdk.db.entity.SdkOperatorPayChannelExample;
import com.cheyooh.service.sdk.db.entity.SdkOperatorPayLimit;
import com.cheyooh.service.sdk.db.entity.SdkOperatorPayLimitExample;
import com.cheyooh.service.sdk.db.entity.SdkOperatorPayType;
import com.cheyooh.service.sdk.db.entity.SdkOperatorPayTypeExample;
import com.cheyooh.service.sdk.db.entity.SdkOrder;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdo;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdoExample;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdoVerifycode;
import com.cheyooh.service.sdk.db.entity.SdkProps;
import com.cheyooh.service.sdk.db.entity.SdkPropsExample;
import com.cheyooh.service.sdk.db.entity.SdkSwbInfo;
import com.cheyooh.service.sdk.db.entity.SdkSwbInfoExample;
import com.cheyooh.service.sdk.db.entity.SdkTelephone;
import com.cheyooh.service.sdk.db.entity.SdkTelephoneCenternumber;
import com.cheyooh.service.sdk.db.entity.SdkTelephoneCenternumberExample;
import com.cheyooh.service.sdk.db.entity.SdkTelephoneExample;
import com.cheyooh.service.sdk.db.entity.SdkWoplusOfflinePaySms;
import com.cheyooh.service.sdk.idata.CmdPay;
import com.cheyooh.service.sdk.idata.ResultCmccMmWaterWestParam;
import com.cheyooh.service.sdk.idata.ResultMobileMmpmParam;
import com.cheyooh.service.sdk.idata.ResultPayMmdoBlock;
import com.cheyooh.service.sdk.idata.ResultPayMmdoChargeTip;
import com.cheyooh.service.sdk.idata.ResultPayMmdoCommand;
import com.cheyooh.service.sdk.idata.ResultPayMmdoCommandList;
import com.cheyooh.service.sdk.idata.ResultPayMmdoInfo;
import com.cheyooh.service.sdk.idata.ResultPayMmdoInfoOrderList;
import com.cheyooh.service.sdk.idata.ResultSdkBaixunParam;
import com.cheyooh.service.sdk.idata.ResultSdkQipapayParam;
import com.cheyooh.service.sdk.idata.ResultSdkSkypayParam;
import com.cheyooh.service.sdk.idata.ResultSdkWimiPyaParam;
import com.cheyooh.service.sdk.idata.ResultSdkXqtpayParam;
import com.cheyooh.service.sdk.idata.ResultSdkZhuquepayParam;
import com.cheyooh.service.sdk.idata.ResultSdkcmccjiutianmiguParam;
import com.cheyooh.service.sdk.idata.ResultSdktppayParam;
import com.cheyooh.service.sdk.idata.ResultSinaMonthPayParam;
import com.cheyooh.service.sdk.idata.ResultSnowfoxParam;
import com.cheyooh.service.sdk.idata.ResultSshellPayParam;
import com.cheyooh.service.sdk.idata.ResultWoAppstorePayParam;
import com.cheyooh.service.sdk.idata.Resultcmccgamebase;
import com.cheyooh.service.sdk.idata.Resultlovegame;
import com.cheyooh.service.sdk.idata.gameserver.BillingPeriodVo;
import com.cheyooh.service.sdk.idata.gameserver.IdoSms;
import com.cheyooh.service.sdk.idata.gameserver.JsonCmccDongmanRes;
import com.cheyooh.service.sdk.idata.gameserver.JsonCmccMopingDongman;
import com.cheyooh.service.sdk.idata.gameserver.JsonCmccYongzhengReqOrder;
import com.cheyooh.service.sdk.idata.gameserver.JsonCmccmmbaixunlingdongRes;
import com.cheyooh.service.sdk.idata.gameserver.JsonCtccXinwangRes;
import com.cheyooh.service.sdk.idata.gameserver.JsonCuccMusicbaseRes;
import com.cheyooh.service.sdk.idata.gameserver.JsonCuccXxSms;
import com.cheyooh.service.sdk.idata.gameserver.JsonCuccYijianReqChannel;
import com.cheyooh.service.sdk.idata.gameserver.JsonCuccYijianReqParam;
import com.cheyooh.service.sdk.idata.gameserver.JsonCuccYijianRes;
import com.cheyooh.service.sdk.idata.gameserver.JsonLangTianRes;
import com.cheyooh.service.sdk.idata.gameserver.PaySmsInfo;
import com.cheyooh.service.sdk.idata.gameserver.WimipaySms;
import com.cheyooh.service.sdk.idata.gameserver.WoplusSmsReq;
import com.cheyooh.service.sdk.idata.gameserver.WoplusSmsRes;
import com.cheyooh.service.sdk.idata.gameserver.XmlCmccmmSzsyRes;
import com.cheyooh.service.sdk.idata.gameserver.XmlMobileGameBaseSinglePm;
import com.cheyooh.service.sdk.tools.Hmacsha1;
import com.cheyooh.service.sdk.tools.MoscreenTool;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;

public class Pay_mmdo extends AbstractSdkClientService<CmdPay> {
	private String imsiParam;
	private String imeiParam = "";
	private String propsidParam;
	private float realamount = 0;
	private int opId = 0;
	private int mobilephoneProvinceno = 0; // 手机号所在省份
	private String mobilephoneNumber = "";// 手机号码
	private String ip = "";
	private String iccidParam = "";
	private String dbiccidParam = "";
	private Result finalresult = null;
	private String supplementTimeInterval = "";
	private Boolean ifSameChannel = true;
	private String outtradeid = "";
	private Date reqOrderNoTime = new Date();
	private int dmLimitResult = 0;
	private String realimsi = "";
	private String mobilephoneCenterNumber = "";// 短信中心号
	private boolean orderIfOver30m = false;
	private String sdkver_Param = "";
	private boolean ifwhitelist = false;
	private Integer nextPaytactics = 0;
	private List<Integer> paytactics = new ArrayList<Integer>();
	private String splitString = Cfg.cfg.getString("mmdo_imsi_spilt", "\\|");
	private static final Integer mmdoType = 9;
	private static final String UnicomDiveStrin = Cfg.cfg.getString(
			"mmdo_unicom_spilt", "_");
	private static final String splitContentString = Cfg.cfg.getString(
			"mmdo_content_spilt", "#");
	private static final String spiltSubContentString = Cfg.cfg.getString(
			"mmdo_sub_content_spilt", "\\|");
	private static final String unicomAmountSpilt = Cfg.cfg.getString(
			"mmd_unicom_amount_spilt", "&");
	private static final String MMPM_WIMI = "mmpmwimi";
	private static final String WO_APPSTORE = "woappstore";
	private static final String ZHUOWANG_PM = "zhuowangpm";
	private static final String SINA_MONTH_PM = "sinamonthpm";
	private static final String MOBILE_GAME_BASE_PM = "mobilegamebasepm";
	private static final String MOBILE_GAME_BASE_SINGLE_PM = "mobilegamebasesinglepm";
	private static final String MOBILE_MMPM = "mobilemmpm";
	private static final String LEYIFU_PM = "leyifupm";
	private static final String WO_APPSTORE_ORDER_PREFIX = "00000000";
	private static final String WO_PLUS = "woplus";
	private static final String WO_PLUS_YOUQU = "woplusyouqu";
	private static final String WO_PLUS_AUTHORIZATION = "platformID=\"%s\",password=\"%s\"";
	private static final String GAME_PAY_VERSION = "3.0.6";
	private static final String sinaSendSmsgetLongphoneAndCode = Cfg.cfg
			.getString("sdk.sina.month.getLongphoneAndCode.url");
	private static final String SINA_MONTH_SMS = "sinamonthsms";
	private static final String SINA_MONTH_SMS_PM = "sinamonthsmspm";
	private static final String idoUrl = Cfg.cfg.getString("sdk.ido.url");
	private static final String idoChannel = Cfg.cfg
			.getString("sdk.ido.channel");
	private static final String idoSecretkey = Cfg.cfg
			.getString("sdk.ido.secretkey");
	private static final String CMCCREADIDO = "cmccreadido";
	private static final String CMCC_MTDL_PM = "cmccmtdlpm";
	private static final String CMCC_YXJDDJ_LTZY_PM = "cmccyxjddjltzypm";
	private static final String Time_Interval = Cfg.cfg
			.getString("sdk.game.request.timeinterval");
	private static final String LoveGame = "mmpmlovegame";
	private static final String CMCC_YXJDDJ_LTZY_C1 = "cmccyxjddjltzyc1";
	private static final String CMCC_YXJDDJ_LTZY_C2 = "cmccyxjddjltzyc2";
	private static final String CMCC_YXJDDJ_XXDP = "cmccyxjddjxxdp";
	private static final String wn_mms_Url = Cfg.cfg.getString("sdk.wnmms.url");
	private static final String wn_mms_appid = Cfg.cfg
			.getString("sdk.wnmms.appid");
	private static final String WN_MMS = "wnmms";
	private static final String MM_GZMTX = "wngzmtx";
	private static final String wn_gzmtx_url = Cfg.cfg
			.getString("sdk.wngzmtx.url");
	private static final String CUCC_XX = "cuccxx";
	private static final String cuccxxUrl = Cfg.cfg.getString("sdk.cuccxx.url");
	private static final String ZMZF = "zmzf";
	private static final String zmzfUrl = Cfg.cfg.getString("sdk.zmzf.url");
	private static final String CMCC_GZMTX = "cmccgzmtx";
	private static final String cmcc_gzmtx_url = Cfg.cfg
			.getString("sdk.cmccgzmtx.url");
	private static final String CMCCXYTF = "cmccxytf";
	private static final String cmcc_xytf_url = Cfg.cfg
			.getString("sdk.cmccxytf.url");
	private static final String WO_PLUS_OFFLINE = "woplusoffline";
	private static final String SSHELL = "sshell";
	private static final String CMCCJIDIIOS = "cmccjidiios";
	private static final String CMCCJIDIIOSJIUTIAN = "cmccjidiiosjiutian";
	private static final String CMCCMMSZSY = "cmccmmszsy";
	private static final String CUCCYIJIAN = "cuccyijian";
	private static final String TELECOMLANGTIAN = "telecomlangtian";
	private static final String MMPMLOVECARTOON = "mmpmlovecartoon";
	private static final String SDKWIMIPAY = "sdkwimipay";
	private static final String SNOWFOX = "snowfox";
	private static final String CMCC49YOU = "cmcc49you";
	private static final String SDKBAIXUN = "sdkbaixun";
	private static final String SDKBAIXUN_XLMCG = "sdkbaixun_xlmcg";
	private static final String SDKBAIXUN_TTXHB = "sdkbaixun_ttxhb";
	private static final String SDKBAIXUN_GTYX = "sdkbaixun_gtyx";
	private static final String SDKBAIXUN_WSDZZ = "sdkbaixun_wsdzz";
	private static final String SDKBAIXUN_CKZZ = "sdkbaixun_ckzz";
	private static final String CTCCLOVEMUSIC = "ctcclovemusic";
	private static final String CMCCYONGZHENG = "cmccyongzheng";
	private static final String SDKXQTPAY = "sdkxqtpay";
	private static final String CUCCMUSICBASE = "cuccmusicbase";
	private static final String SDKSKYPAY = "sdkskypay";
	private static final String CMCCXUNWANG = "cmccxunwang";
	private static final String SDKTPPAY = "sdktppay";
	private static final String CMCCRDOXINHUALESHI = "cmccrdoxinhualeshi";
	private static final String CMCCMMWATERWEST = "cmccmmwaterwest";
	private static final String CMCCMMBAIXUNLINGDONGURL = "cmccmmbaixunlingdongUrl";
	private static final String CMCCXINGTIANYUANSMS = "cmccxingtianyuansms";
	private static final String CMCCGAMEBASE = "cmccgamebase";
	private static final String SDKQIPAPAY = "sdkqipapay";
	private static final String SDKZHUQUEPAY = "sdkzhuquepay";
	private static final String CUCCZHANGYUNZY = "cucczhangyunzy";
	private static final String SDKCMCCJIUTIANMIGU = "sdkcmccjiutianmigu";
	private static final String CUCCYIJIANWOMUSIC = "cuccyijianwomusic";
	private static final String CTCCXINWANG = "ctccxinwang";
	private static final String CMCCDONGMAN = "cmccdongman";
	private static final String CMCCMOPINGDONGMAN = "cmccmopingdongman";
	
	private static final ObjectMapper mapper = new ObjectMapper();
	static {
		// mapper.setPropertyNamingStrategy(PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES);
		// or jackson 2.0
		mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,
				false);
		mapper.setSerializationInclusion(Include.NON_NULL);
		// jackson 1.9 and before
		// mapper.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES,
		// false);
	}

	@Override
	protected Result verify(CmdPay cmd) {
		DAL dal = DALFactory.createDAL();
		try {
			// 判断imsi
			imsiParam = cmd.getServiceContext().getRequest()
					.getParameter("imsi");
			if (imsiParam == null) {
				return StatusCode.ERR_PARAMETER().setMessage(
						"不存在imsi" + imsiParam);
			}

			// 黑名单判断
			SdkGameBlacklistMapper sdkGameBlacklistMapper = dal
					.getMapper(SdkGameBlacklistMapper.class);
			SdkGameBlacklistExample sdkGameBlacklistExample = new SdkGameBlacklistExample();
			sdkGameBlacklistExample.createCriteria().andImsiEqualTo(imsiParam);
			List<SdkGameBlacklist> sdkGameBlacklists = sdkGameBlacklistMapper
					.selectByExample(sdkGameBlacklistExample);
			if (sdkGameBlacklists != null && sdkGameBlacklists.size() > 0) {
				for (SdkGameBlacklist sdkGameBlacklist : sdkGameBlacklists) {
					if (imsiParam.equals(sdkGameBlacklist.getImsi())) {
						return StatusCode.ERR_PARAMETER().setMessage("黑名单信息");
					}
				}
			}

			SdkGameWhitelistMapper sdkGameWhitelistMapper = dal
					.getMapper(SdkGameWhitelistMapper.class);
			SdkGameWhitelistExample sdkGameWhitelistExample = new SdkGameWhitelistExample();
			sdkGameWhitelistExample.createCriteria().andImsiEqualTo(imsiParam);
			List<SdkGameWhitelist> sdkGameWhitelists = sdkGameWhitelistMapper
					.selectByExample(sdkGameWhitelistExample);
			if (sdkGameWhitelists != null && sdkGameWhitelists.size() > 0) {
				ifwhitelist = true;
			}

			// 匹配相关计费
			SdkOperatorPayTypeMapper operatorPayTypeMapper = dal
					.getMapper(SdkOperatorPayTypeMapper.class);
			SdkOperatorPayTypeExample operatorPayTypeExample = new SdkOperatorPayTypeExample();
			operatorPayTypeExample.createCriteria().andTypeEqualTo(mmdoType);
			List<SdkOperatorPayType> operatorPayTypeList = operatorPayTypeMapper
					.selectByExample(operatorPayTypeExample);
			String[] imsiArray = imsiParam.split(splitString);
			for (String imsi : imsiArray) {
				for (SdkOperatorPayType sdkOperatorPayType : operatorPayTypeList) {
					if (cmd.getSdkver().compareToIgnoreCase(
							sdkOperatorPayType.getVer()) < 0) {
						continue;
					}
					int opId = getOperatorByIMSI(imsi);
					if (opId == sdkOperatorPayType.getOperator()
							&& cmd.getAmount() <= sdkOperatorPayType
									.getMaxPrice()
							&& cmd.getAmount() >= sdkOperatorPayType
									.getMinPrice()) {
						// 是否超
						imsiParam = imsi;
						return super.verify(cmd);
					}
				}
			}
			// 匹配不到相关计费
			return StatusCode.ERR_PARAMETER().setMessage(
					"不支持计费" + cmd.getAmount());
		} finally {
			dal.close();
		}
	}

	@SuppressWarnings("unused")
	@Override
	protected Result execute(CmdPay cmd) {
		DAL dal = DALFactory.createDAL();
		try {
			long sy = System.currentTimeMillis();
			long sy1 = System.currentTimeMillis();
			logger.info("1---" + sy + "time is :" + (sy1 - sy));
			opId = getOperatorByIMSI(imsiParam);
			imeiParam = cmd.getServiceContext().getRequest()
					.getParameter("imei");
			propsidParam = cmd.getServiceContext().getRequest()
					.getParameter("propsid");
			iccidParam = cmd.getServiceContext().getRequest()
					.getParameter("iccid");
			if (StringUtils.isEmpty(iccidParam)) {
				iccidParam = "";
			}

			dbiccidParam = cmd.getServiceContext().getRequest()
					.getParameter("dbiccid");

			sdkver_Param = cmd.getServiceContext().getRequest()
					.getParameter("sdkver");
			if (StringUtils.isEmpty(sdkver_Param)) {
				sdkver_Param = "";
			}
			logger.debug("the sdkver_Param =" + sdkver_Param);

			// 如果表sdk_telephone有记录手机号码和imsi关系，则获取手机号码和所在的省份id
			String mobilephoneimsi = imsiParam;
			realimsi = imsiParam;
			if (imsiParam.contains("|")) {
				String[] mobilephoneimsis = imsiParam.split("\\|");
				mobilephoneimsi = mobilephoneimsis[0];
				realimsi = mobilephoneimsi;
			}
			SdkTelephoneExample phoneExample = new SdkTelephoneExample();
			phoneExample.createCriteria().andImsiEqualTo(mobilephoneimsi);
			phoneExample.setOrderByClause("created_time desc");
			SdkTelephoneMapper phoneMapper = dal
					.getMapper(SdkTelephoneMapper.class);
			SdkTelephone mobilephone = phoneMapper.selectOne(phoneExample);

			if (mobilephone != null) {
				mobilephoneProvinceno = mobilephone.getProvinceNo();
				mobilephoneNumber = mobilephone.getMobilephone();
			}
			ip = cmd.getRequestHost();

			logger.debug("the pay_mmdo dbiccidParam =" + dbiccidParam);
			if (StringUtils.isNotEmpty(dbiccidParam)
					&& StringUtils.isNotBlank(dbiccidParam)
					&& StringUtils.isNotBlank(mobilephoneimsi)) {
				// 新开线程，把iccid写入数据库
				InsertIccidToDBThread insertIccidToDBThread = new InsertIccidToDBThread(
						dbiccidParam, mobilephoneimsi);
				insertIccidToDBThread.start();
			}

			if (StringUtils.isEmpty(iccidParam)
					|| StringUtils.isBlank(iccidParam)) {
				SdkImsiIccidMapper sdkImsiIccidMapper = dal
						.getMapper(SdkImsiIccidMapper.class);
				SdkImsiIccidExample sdkImsiIccidExample = new SdkImsiIccidExample();
				sdkImsiIccidExample.createCriteria().andImsiEqualTo(realimsi);
				SdkImsiIccid sdkImsiIccid = sdkImsiIccidMapper
						.selectOne(sdkImsiIccidExample);
				if (sdkImsiIccid != null) {
					if (StringUtils.isNotEmpty(sdkImsiIccid.getIccid())
							&& StringUtils.isNotBlank(sdkImsiIccid.getIccid())) {
						iccidParam = sdkImsiIccid.getIccid();
					}
				}
			}

			if (StringUtils.isEmpty(mobilephoneCenterNumber)
					|| StringUtils.isBlank(mobilephoneCenterNumber)) {
				SdkTelephoneCenternumberExample stcExample = new SdkTelephoneCenternumberExample();
				stcExample.createCriteria().andImsiEqualTo(mobilephoneimsi);
				SdkTelephoneCenternumberMapper stcMapper = dal
						.getMapper(SdkTelephoneCenternumberMapper.class);
				SdkTelephoneCenternumber stc = stcMapper.selectOne(stcExample);
				if (stc != null) {
					if (StringUtils.isNotEmpty(stc.getCenternumber())
							&& StringUtils.isNotBlank(stc.getCenternumber())) {
						mobilephoneCenterNumber = stc.getCenternumber();
					}
				}
			}

			// 若手机号码库找不到，则通过iccid查找省份
			if (mobilephoneProvinceno == 0
					&& StringUtils.isNotEmpty(iccidParam)
					&& StringUtils.isNotBlank(iccidParam)
					&& StringUtils.isNotBlank(mobilephoneimsi)
					&& iccidParam.length() > 15) {
				mobilephoneProvinceno = getProvinceNoByICCID(dal,
						iccidParam.trim(), realimsi);
			}

			// 若手机号码查找省份未找到，iccid号码库也找不到，则通过短信中心号段查找省份
			if (mobilephoneProvinceno == 0
					&& StringUtils.isNotBlank(mobilephoneimsi)
					&& StringUtils.isNotBlank(mobilephoneCenterNumber)) {

				SdkCenternumberExample scExample = new SdkCenternumberExample();
				scExample.createCriteria().andCenternumberEqualTo(
						mobilephoneCenterNumber);
				SdkCenternumberMapper scMapper = dal
						.getMapper(SdkCenternumberMapper.class);
				SdkCenternumber sc = scMapper.selectOne(scExample);
				if (sc != null) {
					mobilephoneProvinceno = sc.getProvinceNo();
				}
			}
			// 省份过滤完毕

			// 运营商、sdk支持最低版本的计费渠道
			SdkOperatorPayChannelExample payChannelExample = new SdkOperatorPayChannelExample();
			payChannelExample.createCriteria().andOperatorTypeEqualTo(opId)
					.andSdkMinVerLessThanOrEqualTo(cmd.getSdkver());
			SdkOperatorPayChannelMapper payChannelMapper = dal
					.getMapper(SdkOperatorPayChannelMapper.class);
			List<SdkOperatorPayChannel> payChannels = payChannelMapper
					.selectByExample(payChannelExample);

			if (payChannels == null || payChannels.size() < 1) {
				return StatusCode.ERR_NOTFOUND().setMessage("未找到运营商");
			}

			Map<Integer, SdkOperatorPayChannel> payChannelMap = new HashMap<Integer, SdkOperatorPayChannel>();
			List<Integer> payChannelIds = new ArrayList<Integer>();
			for (SdkOperatorPayChannel channel : payChannels) {
				payChannelIds.add(channel.getId());
				payChannelMap.put(channel.getId(), channel);
			}

			// 获取游戏特定计费配置,没设置，使用系统默认配置
			SdkMmdoSettingExample mmdoSettingExample = new SdkMmdoSettingExample();
			if (StringUtils.isEmpty(propsidParam)
					&& StringUtils.isBlank(propsidParam)) {
				propsidParam = "";
			}
			logger.debug("the propsid is :" + propsidParam);

			SdkPropsMapper sdkPropsMapper = dal.getMapper(SdkPropsMapper.class);
			SdkPropsExample sdkPropsExample = new SdkPropsExample();

			// 根据金额和道具ID来确定计费点。有两种情况，1：有金额和道具ID。2：有金额，缺道具ID。
			if (StringUtils.isNotEmpty(propsidParam)
					&& StringUtils.isNotBlank(propsidParam)) {
				// 此情况有金额和道具ID

				sdkPropsExample.createCriteria()
						.andAmountEqualTo(cmd.getAmount())
						.andUseStatusEqualTo(1)
						.andGameIdEqualTo(game.getGameId())
						.andPropsidEqualTo(propsidParam);
				SdkProps sdkProps = sdkPropsMapper.selectOne(sdkPropsExample);

				if (sdkProps != null) {
					if (judgeTime(sdkProps.getPeriods())) {
						// 在道具ID表有设置此游戏，并在规定时间之内使用三网包，则走正规包流程
						// 在短信设置表里查询，并找到相应的三网包配置
						logger.debug("propsid, enter the time inner sanwangbao");
						SdkOperatorPayChannelExample sdkOperatorPayChannelExample = new SdkOperatorPayChannelExample();
						SdkOperatorPayChannelMapper sdkOperatorPayChannelMapper = dal
								.getMapper(SdkOperatorPayChannelMapper.class);
						if (opId == 1) {
							// 如果为移动，则跳转到移动MM或者基地
							List<String> cmcc = new ArrayList<String>();
							cmcc.add("mobilemmpm");
							cmcc.add("cmccgamebase");
							sdkOperatorPayChannelExample.createCriteria()
									.andChannelCodeIn(cmcc);
							// .andChannelCodeEqualTo("mobilemmpm");
						} else if (opId == 2) {
							// 如果为联通，则跳转到联通沃商店
							sdkOperatorPayChannelExample.createCriteria()
									.andChannelCodeEqualTo("woappstore");
						} else if (opId == 3) {
							// 如果为电信，则跳转到电信爱游戏
							sdkOperatorPayChannelExample.createCriteria()
									.andChannelCodeEqualTo("mmpmlovegame");
						}
						List<SdkOperatorPayChannel> sdkOperatorPayChannels = sdkOperatorPayChannelMapper
								.selectByExample(sdkOperatorPayChannelExample);
						if (sdkOperatorPayChannels == null) {
							return StatusCode.ERR_NOTFOUND().setMessage(
									"未找三网渠道");
						}
						List<Integer> sdkOperatorPayChannelIds = new ArrayList<Integer>();
						for (SdkOperatorPayChannel sdkOperatorPayChannel : sdkOperatorPayChannels) {
							sdkOperatorPayChannelIds.add(sdkOperatorPayChannel
									.getId());
						}
						mmdoSettingExample
								.createCriteria()
								.andAmountEqualTo(cmd.getAmount())
								.andUseStatusEqualTo(1)
								// .andOperatorPayChannelIdEqualTo(
								// sdkOperatorPayChannel.getId())
								.andOperatorPayChannelIdIn(
										sdkOperatorPayChannelIds)
								.andGameIdEqualTo(game.getGameId())
								.andPropsidEqualTo(propsidParam);
					} else {
						// 在道具ID表有设置此游戏，但不在规定时间之内使用三网包，则走破解商流程
						logger.debug("propsid, enter the time out pojieshang");
						mmdoSettingExample.createCriteria()
								.andAmountLessThanOrEqualTo(cmd.getAmount())
								.andUseStatusEqualTo(1)
								.andOperatorPayChannelIdIn(payChannelIds)
								.andGameIdEqualTo(game.getGameId())
								.andPropsidEqualTo("");
					}
				} else {
					// 在使用破解商流程
					logger.debug("propsid, enter the pojieshang");
					mmdoSettingExample.createCriteria()
							.andAmountLessThanOrEqualTo(cmd.getAmount())
							.andUseStatusEqualTo(1)
							.andOperatorPayChannelIdIn(payChannelIds)
							.andGameIdEqualTo(game.getGameId())
							.andPropsidEqualTo("");
				}
			} else {
				// 此情况有金额，缺道具ID

				// 先在道具ID表sdk_props查询
				sdkPropsExample.createCriteria()
						.andAmountEqualTo(cmd.getAmount())
						.andUseStatusEqualTo(1)
						.andGameIdEqualTo(game.getGameId());
				SdkProps sdkProps = sdkPropsMapper.selectOne(sdkPropsExample);
				if (sdkProps != null) {
					if (judgeTime(sdkProps.getPeriods())) {
						// 在道具ID表有设置此游戏，并在规定时间之内使用三网包，则走正规包流程
						// 在短信设置表里查询，并找到相应的三网包配置
						logger.debug("the time inner sanwangbao");
						SdkOperatorPayChannelExample sdkOperatorPayChannelExample = new SdkOperatorPayChannelExample();
						SdkOperatorPayChannelMapper sdkOperatorPayChannelMapper = dal
								.getMapper(SdkOperatorPayChannelMapper.class);
						if (opId == 1) {
							// 如果为移动，则跳转到移动MM或者游戏基地
							List<String> cmcc = new ArrayList<String>();
							cmcc.add("mobilemmpm");
							cmcc.add("cmccgamebase");
							sdkOperatorPayChannelExample.createCriteria()
									.andChannelCodeIn(cmcc);
							// .andChannelCodeEqualTo("mobilemmpm");
						} else if (opId == 2) {
							// 如果为联通，则跳转到联通沃商店
							sdkOperatorPayChannelExample.createCriteria()
									.andChannelCodeEqualTo("woappstore");
						} else if (opId == 3) {
							// 如果为电信，则跳转到电信爱游戏
							sdkOperatorPayChannelExample.createCriteria()
									.andChannelCodeEqualTo("mmpmlovegame");
						}
						List<SdkOperatorPayChannel> sdkOperatorPayChannels = sdkOperatorPayChannelMapper
								.selectByExample(sdkOperatorPayChannelExample);
						if (sdkOperatorPayChannels == null) {
							return StatusCode.ERR_NOTFOUND().setMessage(
									"未找三网渠道");
						}
						List<Integer> sdkOperatorPayChannelIds = new ArrayList<Integer>();
						for (SdkOperatorPayChannel sdkOperatorPayChannel : sdkOperatorPayChannels) {
							sdkOperatorPayChannelIds.add(sdkOperatorPayChannel
									.getId());
						}
						mmdoSettingExample
								.createCriteria()
								.andAmountEqualTo(cmd.getAmount())
								.andUseStatusEqualTo(1)
								.andOperatorPayChannelIdIn(
										sdkOperatorPayChannelIds)
								// .andOperatorPayChannelIdEqualTo(
								// sdkOperatorPayChannel.getId())
								.andGameIdEqualTo(game.getGameId());
					} else {
						// 在道具ID表有设置此游戏，但不在规定时间之内使用三网包，则使用破解商流程
						logger.debug("enter the time out pojieshang");
						mmdoSettingExample.createCriteria()
								.andAmountLessThanOrEqualTo(cmd.getAmount())
								.andUseStatusEqualTo(1)
								.andOperatorPayChannelIdIn(payChannelIds)
								.andGameIdEqualTo(game.getGameId())
								.andPropsidEqualTo("");
					}
				} else {
					// 使用破解商流程
					logger.debug("enter the pojieshang");
					mmdoSettingExample.createCriteria()
							.andAmountLessThanOrEqualTo(cmd.getAmount())
							.andUseStatusEqualTo(1)
							.andOperatorPayChannelIdIn(payChannelIds)
							.andGameIdEqualTo(game.getGameId())
							.andPropsidEqualTo("");
				}
			}

			mmdoSettingExample.setOrderByClause("amount desc, idx asc");
			SdkMmdoSettingMapper mmdoSettingMapper = dal
					.getMapper(SdkMmdoSettingMapper.class);
			List<SdkMmdoSetting> mmdoSettings = mmdoSettingMapper
					.selectByExample(mmdoSettingExample);

			if (mmdoSettings == null || mmdoSettings.size() < 1) {
				mmdoSettingExample = new SdkMmdoSettingExample();
				mmdoSettingExample.createCriteria()
						.andAmountLessThanOrEqualTo(cmd.getAmount())
						.andUseStatusEqualTo(1)
						.andOperatorPayChannelIdIn(payChannelIds)
						.andGameIdIsNull();
				mmdoSettingExample.setOrderByClause("amount desc, idx asc");
				mmdoSettings = mmdoSettingMapper
						.selectByExample(mmdoSettingExample);
			}

			for (SdkMmdoSetting sdkMmdoSetting : mmdoSettings) {
				logger.debug("the order is : the sdkMmdoSetting id ="
						+ sdkMmdoSetting.getId() + ", payChannelId ="
						+ sdkMmdoSetting.getOperatorPayChannelId()
						+ ", amount =" + sdkMmdoSetting.getAmount() + ", idx ="
						+ sdkMmdoSetting.getIdx());
				paytactics.add(sdkMmdoSetting.getId());
			}

			// 不存在计费
			if (mmdoSettings == null || mmdoSettings.size() < 1) {
				return StatusCode.ERR_NOTFOUND().setMessage("未找到短计费");
			}

			boolean limit = false;
			boolean shield = false;
			boolean enablePay_proshield = false;
			boolean enablePay_dmlimit = false;
			// 此循环：如果是省份屏蔽，则进行下一个支付，直到其中一个可以计费支付为止，则跳出循环

			for (SdkMmdoSetting mmdoSetting : mmdoSettings) {
				limit = false;
				shield = false;
				SdkOperatorPayChannel sdkOperatorPayChannel = payChannelMap
						.get(mmdoSetting.getOperatorPayChannelId());

				// 判断是否省份屏蔽,如果没有屏蔽，则返回0，否则返回非0
				Integer pF = checkProvince(mobilephoneProvinceno,
						mobilephoneNumber, sdkOperatorPayChannel);
				if (pF != 0) {
					shield = true;
					continue;
				}
				enablePay_proshield = true;

				// 是否超日月限额,如果没有限额，则返回0表示未超过，否则返回非0
				dmLimitResult = isOverLimitPay(dal, opId, imsiParam,
						sdkOperatorPayChannel);
				// 是否是在白名单里，如果是，则没有日月限额限制，否则有限制
				if (ifwhitelist) {
					dmLimitResult = 0;
				}

				if (dmLimitResult == 1 || dmLimitResult == 2) {
					limit = true;
					continue;
				}
				if ((dmLimitResult == 3 || dmLimitResult == 4)
						&& !"sdkxqtpay".equals(sdkOperatorPayChannel
								.getChannelCode())) {
					limit = true;
					continue;
				}
				enablePay_dmlimit = true;

				// 为补点计费方式，循环返回添加相应短信指令
				String leyoadditional = cmd.getServiceContext().getRequest()
						.getParameter("leyoadditional");
				// 为兼容旧版本sdk，需客户端传入参数leyoadditional，并把additionalcount作为补点计费的循环次数
				int totalcount = 1;
				// 判断实际发送金额是否为空，如为空，则用amount,不为空，则用realamount
				realamount = mmdoSetting.getAmount();
				if (mmdoSetting.getRealAmount() != null) {
					realamount = mmdoSetting.getRealAmount();
				}
				String[] additionallist = null;
				if (StringUtils.isNotEmpty(leyoadditional)
						&& StringUtils.isNotBlank(leyoadditional)
						&& mmdoSetting.getAdditional() == 1
						&& StringUtils.isNotEmpty(mmdoSetting.getAddList())
						&& StringUtils.isNotBlank(mmdoSetting.getAddList())) {
					additionallist = mmdoSetting.getAddList().split("#");
					totalcount = 1 + additionallist.length;
				}
				int optChannelId = mmdoSetting.getOperatorPayChannelId();
				ResultPayMmdoInfoOrderList resultPayMmdoInfoOrderList = new ResultPayMmdoInfoOrderList();
				resultPayMmdoInfoOrderList.setOrder_list_type("additional");

				ResultPayMmdoInfo finalpayinfo = null;

				for (int sendsmsnum = 0; sendsmsnum < totalcount; sendsmsnum++) {

					logger.debug("the sendsmsnum " + (sendsmsnum + 1)
							+ " mmdoSettingId is :" + mmdoSetting.getId());
					if (totalcount > 1 && sendsmsnum != 0) {
						// 获取补点计费的计费点，第一个循环当sendsmsnum=0时不会跳到这里
						mmdoSettingExample.clear();
						mmdoSettingExample.createCriteria().andIdEqualTo(
								parseInteger(additionallist[sendsmsnum - 1]));
						mmdoSetting = mmdoSettingMapper
								.selectOne(mmdoSettingExample);
						// 重新把补点计费的金额放在realamount
						realamount = mmdoSetting.getAmount();

						if (mmdoSetting.getOperatorPayChannelId() != optChannelId) {
							ifSameChannel = false;
							optChannelId = mmdoSetting
									.getOperatorPayChannelId();
						}

					}
					// 不存在计费
					if (mmdoSetting == null) {
						logger.error("the SdkMmdoSetting is not found");
						break;
					}

					SdkOrder order = createOrder(cmd, mmdoType);

					logger.info("the SdkMmdoSetting is : orderNo ="
							+ order.getOrderNo() + ", gameid = "
							+ mmdoSetting.getGameId() + ", number = "
							+ mmdoSetting.getNumber() + ", content = "
							+ mmdoSetting.getContent() + ", price = "
							+ realamount + ", channelID = "
							+ mmdoSetting.getOperatorPayChannelId() + ", id = "
							+ mmdoSetting.getId());

					SdkOperatorPayChannel channel = payChannelMap
							.get(mmdoSetting.getOperatorPayChannelId());

					// 判断订单是否重复,默认是30秒
					if (!judgeReqOrderNoTime(dal, opId, imsiParam, channel,
							reqOrderNoTime)) {
						int t = parseInteger(Time_Interval);
						if (channel.getReqTimeinterval() != null) {
							t = channel.getReqTimeinterval();
						}
						int t1 = Math.abs(t);
						// 在第一次成功的情况下30秒内重复点击，记录失败订单信息，sdk_order的status状态为3
						SdkOrder faileOrder = createOrder(cmd, mmdoType);
						insertFaileOrderInfo(cmd, dal, mmdoSettings.get(0),
								faileOrder, channel, 3, "30秒内请求的订单");
						return StatusCode.ERR_PARAMETER().setMessage(
								"请" + t1 + "秒后支付！");
					}
					orderIfOver30m = judgeReqOrderTimeOver30m(dal, opId,
							imsiParam, channel, reqOrderNoTime);

					ResultPayMmdoInfo payinfo = new ResultPayMmdoInfo();
					payinfo.setOrder_no(order.getOrderNo());
					payinfo.setSms_pay_type(channel.getSmsType());
					String sms_content_type = "1";
					String channelCode = channel.getChannelCode();
					if (channel.getSmsContentType() == 2) {
						// 若以二进制方式作为发送短信内容，则在渠道标志后加上"@data"
						sms_content_type = "2";
					} else {
						sms_content_type = "1";
					}
					payinfo.setSms_type(channelCode);
					payinfo.setSms_content_type(sms_content_type);
					payinfo.setType("mmdo");

					// 计费屏蔽设置
					// provinceFlag为计费屏蔽标识符，0代表没有屏蔽正常计费，1代表“未找到计费省”，2代表“计费时段屏蔽”，3代表“计费号段屏蔽”，4代表“计费省份屏蔽”
					Integer provinceFlag = checkProvince(mobilephoneProvinceno,
							mobilephoneNumber, channel);

					if (provinceFlag != 0) {
						String failedetail = "";
						if (provinceFlag == 3) {
							failedetail = "计费号段屏蔽";
						} else {
							failedetail = "省份屏蔽";
						}
						// 省份屏蔽原因，sdk_order的status状态为5，为省份屏蔽失败订单
						insertFaileOrderInfo(cmd, dal, mmdoSetting, order,
								channel, 5, failedetail);
						break;
					}

					// 兼容旧版本sdk
					if (cmd.getSdkver().compareToIgnoreCase(GAME_PAY_VERSION) < 0) {
						if (!WO_APPSTORE.equals(channel.getChannelCode())) {
							payinfo.setSms_type("sms");
						}
					}
					// 设置是否弹出二次确认框
					String originalGameName = "";
					String chargetip = String.valueOf(mmdoSetting
							.getChargetip());
					String chargesuceesstip = String.valueOf(mmdoSetting
							.getChargesuceesstip());
					String loadingtipmin = "3";
					if (mmdoSetting.getLoadingtipmin() == null) {
						loadingtipmin = "3";
					} else {
						loadingtipmin = String.valueOf(mmdoSetting
								.getLoadingtipmin());
					}

					String chargefailtip = String.valueOf(mmdoSetting
							.getChargefailtip());
					if (StringUtils.isNotBlank(mmdoSetting
							.getChargetipPeriods())) {
						if (!judgeTime(mmdoSetting.getChargetipPeriods())) {
							chargetip = "0";
						}
					}
					if (StringUtils.isNotBlank(mmdoSetting
							.getChargesuceesstipPeriods())) {
						if (!judgeTime(mmdoSetting.getChargesuceesstipPeriods())) {
							chargesuceesstip = "0";
						}
					}
					Integer originalGameId = mmdoSetting.getOriginalGameId();
					SdkGameMapper originalGameNameMapper = dal
							.getMapper(SdkGameMapper.class);
					SdkGameExample originalGameNameExample = new SdkGameExample();
					originalGameNameExample.createCriteria().andGameIdEqualTo(
							originalGameId);
					SdkGame originalSdkGame = originalGameNameMapper
							.selectOne(originalGameNameExample);
					if (originalSdkGame != null) {
						originalGameName = originalSdkGame.getName();
					}
					if (StringUtils.isNotBlank(mmdoSetting
							.getOriginalGameName())
							&& StringUtils.isNotEmpty(mmdoSetting
									.getOriginalGameName())) {
						originalGameName = mmdoSetting.getOriginalGameName();
					}
					ResultPayMmdoChargeTip resultPayMmdoChargeTip = new ResultPayMmdoChargeTip();
					resultPayMmdoChargeTip.setGamename(originalGameName);
					resultPayMmdoChargeTip.setChargetip(chargetip);
					resultPayMmdoChargeTip
							.setChargesuceesstip(chargesuceesstip);
					resultPayMmdoChargeTip.setLoadingtipmin(loadingtipmin);
					resultPayMmdoChargeTip.setChargefailtip(chargefailtip);
					String sendingtip = "正在加载中...";
					if (StringUtils.isNotBlank(mmdoSetting.getSendingtip())
							&& StringUtils.isNotEmpty(mmdoSetting
									.getSendingtip())) {
						sendingtip = mmdoSetting.getSendingtip();
					}
					resultPayMmdoChargeTip.setSendingtip(sendingtip);
					payinfo.addContent(resultPayMmdoChargeTip);

					String sinaMonthlyLongphone = "";
					String sinaMonthlyCode = "";

					// String[] secondarysms=new String[2];
					if (WO_APPSTORE.equals(channel.getChannelCode())) {
						SdkSwbInfoMapper sdkSwbInfoMapper = dal
								.getMapper(SdkSwbInfoMapper.class);
						SdkSwbInfoExample sdkSwbInfoExample = new SdkSwbInfoExample();
						sdkSwbInfoExample.createCriteria()
								.andOperatorTypeEqualTo(2)
								.andGameIdEqualTo(game.getGameId());
						SdkSwbInfo sdkSwbInfo = sdkSwbInfoMapper
								.selectOne(sdkSwbInfoExample);
						if (sdkSwbInfo == null) {
							return StatusCode.ERR_NOTFOUND().setMessage(
									"未找沃商配置");
						}

						payinfo.setOrder_no(WO_APPSTORE_ORDER_PREFIX
								+ payinfo.getOrder_no());
						ResultWoAppstorePayParam woPay = new ResultWoAppstorePayParam();
						logger.debug("the WO_APPSTORE game is : "
								+ Cfg.cfg.getString("sdk.woappstore.game"));
						woPay.setAppid(sdkSwbInfo.getAppId());
						woPay.setCompany(sdkSwbInfo.getCompany());
						woPay.setCpcode(sdkSwbInfo.getCpCode());
						woPay.setCpid(sdkSwbInfo.getCpId());
						woPay.setCustomcode("");
						woPay.setGame(game.getName());
						woPay.setMoney(realamount);
						woPay.setOtherpay(false);
						woPay.setPhone(sdkSwbInfo.getPhone());
						woPay.setProps("元");
						woPay.setUrl(Cfg.cfg
								.getString("sdk.woappstore.callbackUrl"));
						woPay.setVac(true);
						woPay.setVaccode(mmdoSetting.getContent());
						woPay.setVacmode("single");
						payinfo.addContent(woPay);
					} else if (SINA_MONTH_PM.equals(channel.getChannelCode())) {
						ResultSinaMonthPayParam sinaPay = new ResultSinaMonthPayParam();
						sinaPay.setAppName(game.getName());
						sinaPay.setAppType(Cfg.cfg
								.getString("sdk.sina.month.apptype"));
						sinaPay.setCustomId(Cfg.cfg
								.getString("sdk.sina.month.customid"));
						sinaPay.setCustomType(Cfg.cfg
								.getString("sdk.sina.month.customtype"));
						payinfo.addContent(sinaPay);
					} else if (MOBILE_MMPM.equals(channel.getChannelCode())) {
						ResultMobileMmpmParam mobilePay = new ResultMobileMmpmParam();
						SdkSwbInfoMapper sdkSwbInfoMapper = dal
								.getMapper(SdkSwbInfoMapper.class);
						SdkSwbInfoExample sdkSwbInfoExample = new SdkSwbInfoExample();
						sdkSwbInfoExample.createCriteria()
								.andOperatorTypeEqualTo(1)
								.andGameIdEqualTo(game.getGameId());
						SdkSwbInfo sdkSwbInfo = sdkSwbInfoMapper
								.selectOne(sdkSwbInfoExample);
						if (sdkSwbInfo == null) {
							return StatusCode.ERR_NOTFOUND().setMessage(
									"未找MM配置");
						}
						mobilePay.setAppId(sdkSwbInfo.getAppId());
						mobilePay.setAppKey(sdkSwbInfo.getAppKey());
						payinfo.addContent(mobilePay);
					} else if (SINA_MONTH_SMS.equals(channel.getChannelCode())) {
						SdkNotifySinaMonthly monthly = new SdkNotifySinaMonthly();
						monthly.setOrderNo(order.getOrderNo());
						monthly.setOperatorType(opId);
						monthly.setGameId(gameSession.getGameId());
						monthly.setAmount(realamount);
						monthly.setImsi(imsiParam);
						Date now = new Date();
						monthly.setCreatedTime(now);
						monthly.setUpdatedTime(now);
						try {
							String longphoneAndCode = getMobileSinaLongphoneAndCode();
							if ("err001".equals(longphoneAndCode)
									|| "err002".equals(longphoneAndCode)
									|| StringUtils.isEmpty(longphoneAndCode)) {
								monthly.setSmsState("3");
								logger.debug("get the sina monthly sms error, content = "
										+ longphoneAndCode);
							} else {
								monthly.setSmsState("2");
								String[] contentresult = longphoneAndCode
										.split(",");
								sinaMonthlyLongphone = contentresult[0];
								sinaMonthlyCode = contentresult[1];
								monthly.setSmsPort(sinaMonthlyLongphone);
								monthly.setSmsCmd(sinaMonthlyCode);
							}
						} catch (Exception e) {
							logger.error("sinamonthpm获取的指令和长号码", e);
							monthly.setSmsState("3");
						}
						SdkNotifySinaMonthlyMapper monthlyMapper = dal
								.getMapper(SdkNotifySinaMonthlyMapper.class);
						monthlyMapper.insertSelective(monthly);
						if ("3".equals(monthly.getSmsState())) {
							dal.commit();
							return StatusCode.ERR_NOTFOUND().setMessage(
									"短信内容失败");
						}
					} else if (LoveGame.equals(channel.getChannelCode())) {
						String propsName = "";
						String propsAlias = "";
						propsAlias = mmdoSetting.getContent();
						Resultlovegame resultlovegame = new Resultlovegame();
						resultlovegame.setPropsName(propsName);
						resultlovegame.setPropAlias(propsAlias);
						payinfo.addContent(resultlovegame);
					} else if (SSHELL.equals(channel.getChannelCode())) {
						String appKey = Cfg.cfg.getString("sdk.sshell.appKey");
						String productId = "";
						String productName = "";
						if (mmdoSetting.getContent().contains("@")) {
							String[] c = mmdoSetting.getContent().split("@");
							productName = c[0];
							productId = c[1];
						}

						String money = String.valueOf(((int) realamount));
						String gameName = Cfg.cfg
								.getString("sdk.sshell.gameName");
						String cpName = Cfg.cfg.getString("sdk.sshell.cpName");
						String customorderno = payinfo.getOrder_no();
						String channelId = Cfg.cfg
								.getString("sdk.sshell.channelId");
						ResultSshellPayParam resultSshellPayParam = new ResultSshellPayParam();
						resultSshellPayParam.setAppKey(appKey);
						resultSshellPayParam.setProductId(productId);
						resultSshellPayParam.setProductName(productName);
						resultSshellPayParam.setMoney(money);
						resultSshellPayParam.setGameName(gameName);
						resultSshellPayParam.setCpName(cpName);
						resultSshellPayParam.setCustomorderno(customorderno);
						resultSshellPayParam.setChannelId(channelId);
						payinfo.addContent(resultSshellPayParam);
					} else if (SDKWIMIPAY.equals(channel.getChannelCode())) {
						String sdkwimipayChannel = Cfg.cfg
								.getString("sdk.sdkwimipay.channel");
						String wimicode = mmdoSetting.getContent();
						String gameid = String.valueOf(game.getGameId());
						String addi = "0";
						if (totalcount > 1 && sendsmsnum != 0) {
							// 如果是补点，则标志位1
							addi = "1";
						}
						String extdata = gameid + "aa" + addi;
						// String extdata=getEncryptOrderNo(order.getOrderNo());
						ResultSdkWimiPyaParam resultSdkWimiPyaParam = new ResultSdkWimiPyaParam();
						resultSdkWimiPyaParam.setChannel(sdkwimipayChannel);
						resultSdkWimiPyaParam.setWimicode(wimicode);
						resultSdkWimiPyaParam.setExtdata(extdata);
						payinfo.addContent(resultSdkWimiPyaParam);
					} else if (SNOWFOX.equals(channel.getChannelCode())) {
						ResultSnowfoxParam resultSnowfoxParam = new ResultSnowfoxParam();
						resultSnowfoxParam.setOrderNo(order.getOrderNo());
						String itemId = "";
						String name = "";
						String[] itemIdAndName = new String[2];
						if (mmdoSetting.getContent().contains("@")) {
							itemIdAndName = mmdoSetting.getContent().split("@");
							name = itemIdAndName[0];
							itemId = itemIdAndName[1];
						}
						resultSnowfoxParam.setName(name);
						resultSnowfoxParam.setItemId(itemId);
						resultSnowfoxParam
								.setNameDesc("本商品将会发送短信, 点击确认进行发送, 如有问题, 请联系客服: 0755-8847374");
						Float snowfoxPrice = mmdoSetting.getAmount() * 100;
						Integer p = snowfoxPrice.intValue();
						String price = String.valueOf(p);
						resultSnowfoxParam.setPrice(price);
						DecimalFormat fmat = new DecimalFormat("##0.00");
						String ff = fmat.format(mmdoSetting.getAmount());
						resultSnowfoxParam.setPriceDesc(ff + " 元");
						payinfo.addContent(resultSnowfoxParam);
					} else if (SDKBAIXUN.equalsIgnoreCase(channel
							.getChannelCode())
							|| SDKBAIXUN_XLMCG.equalsIgnoreCase(channel
									.getChannelCode())
							|| SDKBAIXUN_TTXHB.equalsIgnoreCase(channel
									.getChannelCode())
							|| SDKBAIXUN_GTYX.equalsIgnoreCase(channel
									.getChannelCode())
							|| SDKBAIXUN_WSDZZ.equalsIgnoreCase(channel
									.getChannelCode())
							|| SDKBAIXUN_CKZZ.equalsIgnoreCase(channel
									.getChannelCode())) {
						ResultSdkBaixunParam resultSdkBaixunParam = new ResultSdkBaixunParam();
						resultSdkBaixunParam.setItemCode(mmdoSetting
								.getContent());
						resultSdkBaixunParam.setOrderNo(order.getOrderNo());
						payinfo.addContent(resultSdkBaixunParam);
					} else if (SDKXQTPAY.equals(channel.getChannelCode())) {
						ResultSdkXqtpayParam resultSdkXqtpayParam = new ResultSdkXqtpayParam();
						resultSdkXqtpayParam.setMhtOrderNo(order.getOrderNo());
						String payChannelType = Cfg.cfg
								.getString("sdk.sdkxqtpay.payChannelType");
						resultSdkXqtpayParam.setPayChannelType(payChannelType);
						String consumerId = Cfg.cfg
								.getString("sdk.sdkxqtpay.consumerId");
						resultSdkXqtpayParam.setConsumerId(consumerId);
						String mhtOrderName = "";
						String mhtOrderDetail = "";
						String[] orderNameAndDetail = new String[2];
						if (mmdoSetting.getContent().contains("@")) {
							orderNameAndDetail = mmdoSetting.getContent()
									.split("@");
							mhtOrderName = orderNameAndDetail[0];
							mhtOrderDetail = orderNameAndDetail[1];
						}
						resultSdkXqtpayParam.setMhtOrderName(mhtOrderName);
						resultSdkXqtpayParam.setMhtOrderDetail(mhtOrderDetail);
						realamount = mmdoSetting.getAmount();
						if (mmdoSetting.getRealAmount() != null) {
							realamount = mmdoSetting.getRealAmount();
						}
						Float xqtpayPrice = realamount * 100;
						Integer p = xqtpayPrice.intValue();
						String mhtOrderAmt = String.valueOf(p);
						resultSdkXqtpayParam.setMhtOrderAmt(mhtOrderAmt);
						String notifyUrl = Cfg.cfg
								.getString("sdk.sdkxqtpay.notifyUrl");
						resultSdkXqtpayParam.setNotifyUrl(notifyUrl);
						String superid = Cfg.cfg
								.getString("sdk.sdkxqtpay.superid");
						resultSdkXqtpayParam.setSuperid(superid);
						String key = Cfg.cfg.getString("sdk.sdkxqtpay.key");
						String beforeMd5String = "customerid=" + consumerId
								+ "&sdcustomno=" + order.getOrderNo()
								+ "&orderAmount=" + mhtOrderAmt + key;
						String sign = DigestUtils.md5Hex(beforeMd5String)
								.toUpperCase();
						resultSdkXqtpayParam.setSign(sign);
						payinfo.addContent(resultSdkXqtpayParam);
					} else if (SDKSKYPAY.equals(channel.getChannelCode())) {
						ResultSdkSkypayParam resultSdkSkypayParam = new ResultSdkSkypayParam();
						String merchantId = Cfg.cfg
								.getString("sdk.sdkskypay.merchantId");
						resultSdkSkypayParam.setMerchantId(merchantId);
						String merchantPasswd = Cfg.cfg
								.getString("sdk.sdkskypay.merchantPasswd");
						resultSdkSkypayParam.setMerchantPasswd(merchantPasswd);

						String[] basemsg = new String[4];
						if (mmdoSetting.getNumber().contains("@")) {
							basemsg = mmdoSetting.getNumber().split("@");
						}
						String appId = "";
						String appName = "";
						String payType = "";
						String gameType = "";
						if (basemsg.length == 4) {
							appId = basemsg[0];
							appName = basemsg[1];
							payType = basemsg[2];
							gameType = basemsg[3];
						}

						String[] detail = new String[3];
						if (mmdoSetting.getContent().contains("@")) {
							detail = mmdoSetting.getContent().split("@");
						}
						String payPointNum = "";
						String orderDesc = "";
						String productName = "";
						if (detail.length == 3) {
							payPointNum = detail[0];
							orderDesc = detail[1];
							productName = detail[2];
						}
						resultSdkSkypayParam.setAppId(appId);
						resultSdkSkypayParam.setAppName(appName);
						Float sdkskypayPrice = realamount * 100;
						Integer p = sdkskypayPrice.intValue();
						String price = String.valueOf(p);
						resultSdkSkypayParam.setPrice(price);
						String orderId = order.getOrderNo();
						resultSdkSkypayParam.setOrderId(orderId);
						resultSdkSkypayParam.setPayType(payType);
						resultSdkSkypayParam.setPayPointNum(payPointNum);
						String notifyAddress = Cfg.cfg
								.getString("sdk.sdkskypay.notifyAddress");
						resultSdkSkypayParam.setNotifyAddress(notifyAddress);
						resultSdkSkypayParam.setOrderDesc(orderDesc);
						resultSdkSkypayParam.setGameType(gameType);
						resultSdkSkypayParam.setProductName(productName);
						String channelId = cmd.getChannel();
						resultSdkSkypayParam.setChannelId(channelId);
						String reserved1 = order.getOrderNo();
						resultSdkSkypayParam.setReserved1(reserved1);
						Integer uid = gameSession.getUid();
						resultSdkSkypayParam.setUid(String.valueOf(uid));
						payinfo.addContent(resultSdkSkypayParam);
					} else if (SDKTPPAY.equalsIgnoreCase(channel
							.getChannelCode())) {
						ResultSdktppayParam resultSdktppayParam = new ResultSdktppayParam();
						String appId =  mmdoSetting.getNumber();
						resultSdktppayParam.setAppId(appId);
						resultSdktppayParam.setOrderNo(order.getOrderNo());
						int price = (int) realamount;
						resultSdktppayParam.setPrice(String.valueOf(price));
						String goodId = mmdoSetting.getContent();
						resultSdktppayParam.setGoodId(goodId);
						String cpId=Cfg.cfg.getString("sdk.sdktppay.cpID");
						resultSdktppayParam.setCpId(cpId);
						payinfo.addContent(resultSdktppayParam);
					} else if (CMCCMMWATERWEST.equalsIgnoreCase(channel
							.getChannelCode())) {
						ResultCmccMmWaterWestParam resultCmccMmWaterWestParam = new ResultCmccMmWaterWestParam();
						String appId = mmdoSetting.getNumber();
						logger.debug("the cmccmmwaterwest appId =" + appId);
						resultCmccMmWaterWestParam.setAppId(appId);
						String appKey = mmdoSetting.getContent();
						logger.debug("the cmccmmwaterwest appKey =" + appKey);
						resultCmccMmWaterWestParam.setApiKey(appKey);
						String orderNo = getEncryptOrderNo(order.getOrderNo());
						logger.debug("the cmccmmwaterwest orderNo =" + orderNo);
						resultCmccMmWaterWestParam.setOrderNo(orderNo);
						String channel_waterwest = Cfg.cfg
								.getString("sdk.cmccmmwaterwest.channel");
						resultCmccMmWaterWestParam
								.setChannel(channel_waterwest);
						Float payPrice = realamount * 100;
						Integer p = payPrice.intValue();
						String price = String.valueOf(p);
						resultCmccMmWaterWestParam.setAmount(price);
						resultCmccMmWaterWestParam.setClientIp(ip);
						payinfo.addContent(resultCmccMmWaterWestParam);
					} else if (CMCCGAMEBASE.equalsIgnoreCase(channel
							.getChannelCode())) {
						Resultcmccgamebase resultcmccgamebase = new Resultcmccgamebase();
						String isRepeated = "1";
						resultcmccgamebase.setIsRepeated(isRepeated);
						String billingIndex = mmdoSetting.getContent();
						resultcmccgamebase.setBillingIndex(billingIndex);
						resultcmccgamebase.setCpParam(order.getOrderNo());
						payinfo.addContent(resultcmccgamebase);
					} else if (SDKQIPAPAY.equalsIgnoreCase(channel
							.getChannelCode())) {
						ResultSdkQipapayParam resultSdkQipapayParam = new ResultSdkQipapayParam();
						resultSdkQipapayParam.setOrderNo(order.getOrderNo());
						String payCode = mmdoSetting.getContent();
						resultSdkQipapayParam.setPayCode(payCode);
						payinfo.addContent(resultSdkQipapayParam);
					} else if (SDKZHUQUEPAY.equalsIgnoreCase(channel
							.getChannelCode())) {
						ResultSdkZhuquepayParam resultSdkZhuquepayParam = new ResultSdkZhuquepayParam();
						String price = String.valueOf(realamount);
						resultSdkZhuquepayParam.setPrice(price);
						String productName = mmdoSetting.getContent();
						resultSdkZhuquepayParam.setProductName(productName);
						String cpParam = order.getOrderNo();
						resultSdkZhuquepayParam.setCpParam(cpParam);
						String appName = game.getName();
						resultSdkZhuquepayParam.setAppName(appName);
						String payCode = "";
						resultSdkZhuquepayParam.setPayCode(payCode);
						payinfo.addContent(resultSdkZhuquepayParam);
					} else if (SDKCMCCJIUTIANMIGU.equalsIgnoreCase(channel
							.getChannelCode())) {
						ResultSdkcmccjiutianmiguParam resultSdkcmccjiutianmiguParam=new ResultSdkcmccjiutianmiguParam();
						Float sdkcmccjiutianmiguPrice = realamount * 100;
						Integer p = sdkcmccjiutianmiguPrice.intValue();
						String amount = String.valueOf(p);
						resultSdkcmccjiutianmiguParam.setAmount(amount);
						String cpapid=Cfg.cfg.getString("sdk.sdkcmccjiutianmigu.cpapid");
						resultSdkcmccjiutianmiguParam.setCpapid(cpapid);
						String chargingpid=Cfg.cfg.getString("sdk.sdkcmccjiutianmigu.chargingpid");
						resultSdkcmccjiutianmiguParam.setChargingpid(chargingpid);
						String chargepoint=mmdoSetting.getContent();
						resultSdkcmccjiutianmiguParam.setChargepoint(chargepoint);
						resultSdkcmccjiutianmiguParam.setCpparam(order.getOrderNo());
						String channelid=Cfg.cfg.getString("sdk.sdkcmccjiutianmigu.channelid");
						resultSdkcmccjiutianmiguParam.setChannelid(channelid);
						payinfo.addContent(resultSdkcmccjiutianmiguParam);
					}

					// 保存下发信息
					String[] numberArray = mmdoSetting.getNumber().split(
							splitContentString);
					String[] contentArray = mmdoSetting.getContent().split(
							splitContentString);
					String[] shieldKeywordArray = mmdoSetting
							.getShieldKeyword().split(splitContentString);
					String[] shieldNumberArray = mmdoSetting.getShieldNumber()
							.split(splitContentString);

					ResultPayMmdoCommandList payMmdoCommandList = new ResultPayMmdoCommandList();
					payMmdoCommandList.setImsi(imsiParam);
					payMmdoCommandList.setTime(mmdoSetting.getInterval());
					SdkMmdoShieldMapper mmdoShieldMapper = dal
							.getMapper(SdkMmdoShieldMapper.class);

					HttpServletRequest request = cmd.getServiceContext()
							.getRequest();
					String imei = request.getParameter("imei");
					StringBuffer numberBuff = new StringBuffer();
					int operatorType = opId;
					if (SINA_MONTH_SMS.equals(channel.getChannelCode())
							|| SINA_MONTH_SMS_PM.equals(channel
									.getChannelCode())
							|| ZMZF.equals(channel.getChannelCode())) {
						operatorType = 4;// 代表全网
					}
					for (int i = 0; i < numberArray.length; i++) {

						String content = "";
						String number = numberArray[i];
						String wapurl="";
						if (operatorType == 4) {
							if (SINA_MONTH_SMS.equals(channel.getChannelCode())) {
								content = sinaMonthlyCode;
								number = sinaMonthlyLongphone;
								payMmdoCommandList.setStatus("0");
							} else if (SINA_MONTH_SMS_PM.equals(channel
									.getChannelCode())) {
								content = contentArray[i];
								number = numberArray[i];
								payMmdoCommandList.setStatus("0");
							} else if (ZMZF.equals(channel.getChannelCode())) {
								try {
									String zmzfResult = getZmzf(imeiParam,
											imsiParam,
											String.valueOf(realamount),
											order.getOrderNo(),
											cmd.getRequestHost());
									logger.debug("the zmzf original content is :"
											+ zmzfResult);
									String[] r = zmzfResult.split("<:>");
									if (r[0].equals("SUCCESS")) {
										logger.debug("the zmzf content is :"
												+ r[2]);
										String c = "";
										if (r[2].startsWith("bin:")) {
											c = r[2].substring(4);
											logger.debug("1 the zmzf content is :"
													+ c);
											byte[] decBytes = Base64
													.decodeBase64(c
															.getBytes("ISO-8859-1"));
											content = new String(decBytes,
													"ISO-8859-1");
										} else {
											content = r[2];
											c = r[2];
										}
										number = r[1];
										mmdoSetting.setNumber(r[1]);
										mmdoSetting.setContent(c);
									} else {
										logger.error("zmzf获取短信内容异常" + r[0]);
										content = "";
										number = "";
									}
								} catch (Exception e) {
									logger.error("zmzf获取短信内容异常", e);
									content = "";
									number = "";
								}
							}
						} else if (operatorType == 1) {

							long sy31 = System.currentTimeMillis();
							logger.info("31---" + sy + "time is :"
									+ (sy31 - sy) + ",orderNo ="
									+ order.getOrderNo());

							if (MMPM_WIMI.equalsIgnoreCase(channel
									.getChannelCode())) {
								try {
									WimipaySms sms = getMmpmWimi(imsiParam,
											imei, contentArray[i]);
									if (sms.getSmsPort().equals("200")) {
										return StatusCode.ERR_NOTFOUND()
												.setMessage("错误wimi指令");
									}
									content = sms.getSmsContent();
									number = sms.getSmsPort();
									numberBuff.append(number).append(
											splitContentString);
								} catch (Exception e) {
									logger.error("mmpmwimi获取短信内容异常", e);
									return StatusCode.ERR_NOTFOUND()
											.setMessage("短信内容失败");
								}
							} else if (ZHUOWANG_PM.equalsIgnoreCase(channel
									.getChannelCode())) {
								content = contentArray[i] + ";"
										+ order.getOrderNo();
							} else if (MOBILE_GAME_BASE_PM
									.equalsIgnoreCase(channel.getChannelCode())) {
								content = order.getOrderNo();
							} else if (MOBILE_GAME_BASE_SINGLE_PM
									.equalsIgnoreCase(channel.getChannelCode())) {
								String url = Cfg.cfg
										.getString("sdk.mobilegamebasesinglepm.smscontent.url");
								XmlMobileGameBaseSinglePm sms = getMobileGameBaseSinglePm(
										url, imsiParam, imei, contentArray[i]);
								if (sms == null
										|| StringUtils.isBlank(sms
												.getSmsContent())) {
									logger.error("mobilegamebasesinglepm get sms error, sms = "
											+ sms);
									return StatusCode.ERR_NOTFOUND()
											.setMessage("短信内容失败");
								}
								content = sms.getSmsContent();
								number = sms.getSmsPort();
								numberBuff.append(number).append(
										splitContentString);
							} else if (CMCC_YXJDDJ_LTZY_PM
									.equalsIgnoreCase(channel.getChannelCode())) {
								String url = Cfg.cfg
										.getString("sdk.cmccyxjddjltzypm.smscontent.url");
								XmlMobileGameBaseSinglePm sms = getMobileGameBaseSinglePm(
										url, imsiParam, imei, contentArray[i]);
								if (sms == null
										|| StringUtils.isBlank(sms
												.getSmsContent())) {
									logger.error("mobilegamebasesinglepm get ltzy sms error, sms = "
											+ sms);
									return StatusCode.ERR_NOTFOUND()
											.setMessage("短信内容失败");
								}
								content = sms.getSmsContent();
								number = sms.getSmsPort();
								numberBuff.append(number).append(
										splitContentString);
							} else if (CMCC_YXJDDJ_LTZY_C1
									.equalsIgnoreCase(channel.getChannelCode())
									|| CMCC_YXJDDJ_LTZY_C2
											.equalsIgnoreCase(channel
													.getChannelCode())
									|| CMCC_YXJDDJ_XXDP
											.equalsIgnoreCase(channel
													.getChannelCode())) {
								String url;
								if (CMCC_YXJDDJ_LTZY_C1
										.equalsIgnoreCase(channel
												.getChannelCode())) {
									url = Cfg.cfg
											.getString("sdk.cmccyxjddjltzyc1.url");
								} else if (CMCC_YXJDDJ_LTZY_C2
										.equalsIgnoreCase(channel
												.getChannelCode())) {
									url = Cfg.cfg
											.getString("sdk.cmccyxjddjltzyc2.url");
								} else {
									url = Cfg.cfg
											.getString("sdk.cmccyxjddjxxdp.url");
								}
								List<PaySmsInfo> infos = fetchCmccYxjddjLtzyc(
										url, imsiParam, imei, contentArray[i]);
								if (infos == null || infos.size() == 0) {
									logger.error(channel.getChannelCode()
											+ " fetch sms error");
									return StatusCode.ERR_NOTFOUND()
											.setMessage("短信内容失败");
								}

								for (PaySmsInfo sms : infos) {
									ResultPayMmdoCommand payMmdoCommand = new ResultPayMmdoCommand();
									payMmdoCommand.setContent(sms
											.getUpContent());
									payMmdoCommand.setNumber(sms.getUpPort());
									numberBuff.append(sms.getUpPort()).append(
											splitContentString);

									String[] shieldKeywordArraySub = shieldKeywordArray[i]
											.split(spiltSubContentString);
									String[] shieldNumberArraySub = shieldNumberArray[i]
											.split(spiltSubContentString);
									for (int j = 0; j < shieldKeywordArraySub.length; j++) {
										ResultPayMmdoBlock payMmdoBlock = new ResultPayMmdoBlock();
										payMmdoBlock
												.setKeyword(shieldKeywordArraySub[j]);
										payMmdoBlock
												.setNumber(shieldNumberArraySub[j]);
										payMmdoCommand.addContent(payMmdoBlock);
										// 保存下发信息
										SdkMmdoShield mmdoShield = new SdkMmdoShield();
										mmdoShield.setCreateTime(new Date());
										mmdoShield.setImsi(imsiParam);
										mmdoShield.setInterval(mmdoSetting
												.getInterval());
										mmdoShield.setSendContent(content);
										mmdoShield.setSendNumber(number);
										mmdoShield
												.setShieldKeyword(shieldKeywordArraySub[j]);
										mmdoShield
												.setShieldNumber(shieldNumberArraySub[j]);
										mmdoShieldMapper
												.insertSelective(mmdoShield);
									}

									payMmdoCommandList
											.addContent(payMmdoCommand);
								}
							} else if (MOBILE_MMPM.equalsIgnoreCase(channel
									.getChannelCode())) {
								content = contentArray[i];
							} else if (LEYIFU_PM.equalsIgnoreCase(channel
									.getChannelCode())) {
								String pm = getLeyifuPm(imsiParam, imei,
										realamount, order.getOrderNo());
								if (pm == null || "error".equals(pm)
										|| "0".equals(pm)) {
									logger.error("leyifupm get sms error, pm = "
											+ pm);
									return StatusCode.ERR_NOTFOUND()
											.setMessage("短信内容失败");
								}
								content = pm;
							} else if (CMCCREADIDO.equalsIgnoreCase(channel
									.getChannelCode())) {
								try {
									IdoSms idosms = getIdoSms(contentArray[i]);
									content = idosms.getContent();

									SdkCmccReadIdo sdkcmccreadido = new SdkCmccReadIdo();
									sdkcmccreadido.setOrderNo(order
											.getOrderNo());
									sdkcmccreadido.setOutTradeNo(idosms
											.getOrderNo());
									sdkcmccreadido.setContent(idosms
											.getContent());
									sdkcmccreadido.setResultCode(idosms
											.getResultCode());
									sdkcmccreadido.setFeeCode(contentArray[i]);
									sdkcmccreadido.setPrice(realamount);
									Date now = new Date();
									sdkcmccreadido.setCreateTime(now);
									sdkcmccreadido.setUpdatedTime(now);
									SdkCmccReadIdoMapper sdkcmccreadidomapper = dal
											.getMapper(SdkCmccReadIdoMapper.class);
									sdkcmccreadidomapper
											.insertSelective(sdkcmccreadido);

									if (idosms.getResultCode().equals("0")
											|| idosms.getResultCode().equals(
													"2")
											|| idosms.getResultCode().equals(
													"3")
											|| idosms.getResultCode().equals(
													"4")
											|| idosms.getResultCode().equals(
													"5")
											|| idosms.getResultCode().equals(
													"6")
											|| idosms.getResultCode().equals(
													"7")) {
										logger.error("the idosms is "
												+ idosms.toString());
										return StatusCode.ERR_NOTFOUND()
												.setMessage("短信内容失败");
									}

								} catch (Exception e) {
									logger.error("cmccreadido获取短信内容异常", e);
									return StatusCode.ERR_NOTFOUND()
											.setMessage("短信内容失败");
								}
							} else if (CMCC_MTDL_PM.equalsIgnoreCase(channel
									.getChannelCode())) {
								Date time = new Date();
								SdkCmccMtdlOrder mtdl = new SdkCmccMtdlOrder();
								mtdl.setAmount(realamount);
								mtdl.setCreatedTime(time);
								mtdl.setGameId(game.getGameId());
								mtdl.setOrderNo(order.getOrderNo());
								mtdl.setStatus(0);
								mtdl.setUpdatedTime(time);

								SdkCmccMtdlOrderMapper mtdlMapper = dal
										.getMapper(SdkCmccMtdlOrderMapper.class);
								mtdlMapper.insertSelective(mtdl);
								if ("Y".equalsIgnoreCase(contentArray[i])) {
									content = contentArray[i];
								} else {
									content = contentArray[i]
											+ StringUtils.leftPad(mtdl.getId()
													.toString(), 8, '0') + "A9";
								}
							} else if (WN_MMS.equalsIgnoreCase(channel
									.getChannelCode())) {
								try {
									String smscontent = getWnmms(contentArray[i]);
									logger.debug("the wnmms smscontent is :"
											+ smscontent);
									String dataString = String.valueOf(game
											.getGameId()) + "," + WN_MMS;
									String data = Base64
											.encodeBase64String(dataString
													.getBytes());
									content = smscontent + data;
									logger.debug("the WN_MMS content is :"
											+ content);
								} catch (Exception e) {
									logger.error("wnmms获取短信内容异常", e);
									return StatusCode.ERR_NOTFOUND()
											.setMessage("短信内容失败");
								}
							} else if (MM_GZMTX.equalsIgnoreCase(channel
									.getChannelCode())) {
								try {
									imeiParam = cmd.getServiceContext()
											.getRequest().getParameter("imei");
									logger.debug("the Wngzmtx imei is :"
											+ imeiParam);
									String smscontent = getWngzmtx(imeiParam,
											imsiParam, contentArray[i],
											String.valueOf(game.getGameId()),
											MM_GZMTX);
									content = smscontent;
								} catch (Exception e) {
									logger.error("Wngzmtx获取短信内容异常", e);
									return StatusCode.ERR_NOTFOUND()
											.setMessage("短信内容失败");
								}
							} else if (CMCC_GZMTX.equalsIgnoreCase(channel
									.getChannelCode())) {
								try {
									imeiParam = cmd.getServiceContext()
											.getRequest().getParameter("imei");
									logger.debug("the cmccgzmtx imei is :"
											+ imeiParam);
									String smscontent = getCmccgzmtx(imeiParam,
											imsiParam, contentArray[i],
											String.valueOf(game.getGameId()),
											CMCC_GZMTX);
									content = smscontent;
								} catch (Exception e) {
									logger.error("cmccgzmtx获取短信内容异常", e);
									return StatusCode.ERR_NOTFOUND()
											.setMessage("短信内容失败");
								}
							} else if (CMCCXYTF.equalsIgnoreCase(channel
									.getChannelCode())) {
								try {
									imeiParam = cmd.getServiceContext()
											.getRequest().getParameter("imei");
									logger.debug("the cmccxytf imei is :"
											+ imeiParam);
									String smscontent = getCmccXydfSms(
											imeiParam, imsiParam);
									if (StringUtils.isNotEmpty(smscontent)) {
										content = smscontent;
									} else {
										insertFaileOrderInfo(cmd, dal,
												mmdoSetting, order, channel, 3,
												"获取短信内容失败");
										return StatusCode.ERR_NOTFOUND()
												.setMessage("短信内容失败");
									}
								} catch (Exception e) {
									logger.error("cmccxytf获取短信内容异常", e);
									return StatusCode.ERR_NOTFOUND()
											.setMessage("短信内容失败");
								}
							} else if (CMCCJIDIIOS.equalsIgnoreCase(channel
									.getChannelCode())
									|| CMCCJIDIIOSJIUTIAN
											.equalsIgnoreCase(channel
													.getChannelCode())) {
								content = contentArray[i];
							} else if (CMCCMMSZSY.equalsIgnoreCase(channel
									.getChannelCode())) {
								try {
									Integer fee = (int) realamount * 100;
									String feeString = String.valueOf(fee);
									XmlCmccmmSzsyRes resultCmccmmSzsy = getCmccmmSzsy(
											mobilephoneimsi, imeiParam,
											feeString, order.getOrderNo(), ip);
									if ("0".equals(resultCmccmmSzsy.getStatus())) {
										content = resultCmccmmSzsy.getContent();
										number = resultCmccmmSzsy.getNum();
										numberBuff.append(number).append(
												splitContentString);
									} else {
										content = resultCmccmmSzsy.getContent();
										number = resultCmccmmSzsy.getNum();
										numberBuff.append(number).append(
												splitContentString);
										insertFaileOrderInfo(cmd, dal,
												mmdoSetting, order, channel, 4,
												"订单异常");
										return StatusCode.ERR_NOTFOUND()
												.setMessage("短信内容失败");
									}
								} catch (Exception e) {
									logger.error("cmccmmszsy获取短信内容异常", e);
									return StatusCode.ERR_NOTFOUND()
											.setMessage("短信内容失败");
								}

							} else if (CMCC49YOU.equalsIgnoreCase(channel
									.getChannelCode())) {
								content = order.getOrderNo();
							} else if (CMCCYONGZHENG.equalsIgnoreCase(channel
									.getChannelCode())) {
								try {
									if (StringUtils
											.isNotEmpty(mobilephoneNumber)
											&& StringUtils
													.isNotBlank(mobilephoneNumber)
											&& mobilephoneNumber.length() == 11) {
										// 已有手机号
										Integer fee = (int) realamount;
										String price = String.valueOf(fee);
										String appname=URLEncoder.encode(game.getName(), "utf-8");
										JsonCmccYongzhengReqOrder res = getYongzhengContent(
												price, order.getOrderNo(),realimsi,appname);
										SdkOrderMmdoVerifycodeMapper sdkOrderMmdoVerifycodeMapper=dal.getMapper(SdkOrderMmdoVerifycodeMapper.class);
										SdkOrderMmdoVerifycode sdkOrderMmdoVerifycode=new SdkOrderMmdoVerifycode();
										sdkOrderMmdoVerifycode.setOrderNo(order.getOrderNo());
										int p=fee*100;
										sdkOrderMmdoVerifycode.setPrice(p);
										sdkOrderMmdoVerifycode.setGameId(game.getGameId());
										sdkOrderMmdoVerifycode.setCreatedTime(reqOrderNoTime);
										sdkOrderMmdoVerifycode.setMobile(mobilephoneNumber);
										if ("1".equals(res.getState())) {
											outtradeid=res.getOrderNo();
											sdkOrderMmdoVerifycode.setOutTradeNo(res.getOrderNo());
											JsonCmccYongzhengReqOrder verifycoderes=getCmccYongzhengVerifyCode(res.getOrderNo(),mobilephoneNumber);
											sdkOrderMmdoVerifycode.setApplyResultcode(verifycoderes.getState());
											String applyResultmsg=mapper.writeValueAsString(verifycoderes);
											sdkOrderMmdoVerifycode.setApplyResultmsg(applyResultmsg);
											content = "";
											number = "";
											payMmdoCommandList.setFlagSend("10");
										}else{
											logger.error("cmccyongzheng获取短信内容异常"
													+ res.getState());
											sdkOrderMmdoVerifycode.setApplyResultcode(res.getState()
													);
											String applyResultmsg=mapper.writeValueAsString(res);
											sdkOrderMmdoVerifycode.setApplyResultmsg(applyResultmsg);
											content = "";
											number = "";
										}
										sdkOrderMmdoVerifycodeMapper.insertSelective(sdkOrderMmdoVerifycode);
									}else{
										//没有手机号
										payMmdoCommandList.setFlagSend("11");
										content = order.getOrderNo();
									}
								} catch (Exception e) {
									logger.error("cmccyongzheng获取短信内容异常", e);
									content = "";
									number = "";
								}
							} else if (CMCCXUNWANG.equalsIgnoreCase(channel
									.getChannelCode())) {
								content = contentArray[i];
							} else if (CMCCRDOXINHUALESHI
									.equalsIgnoreCase(channel.getChannelCode())) {
								String ext = order.getOrderNo().substring(2);
								content = contentArray[i] + ext;
							} else if (CMCCMMBAIXUNLINGDONGURL
									.equalsIgnoreCase(channel.getChannelCode())) {
								try {
									String[] appAndSetting = new String[2];
									if (mmdoSetting.getNumber().contains("@")) {
										appAndSetting = mmdoSetting.getNumber()
												.split("@");
									}
									String app = appAndSetting[0];
									String setting = appAndSetting[1];
									String paycode = mmdoSetting.getContent();
									logger.debug("the cmccmmbaixunlingdongUrl app="
											+ app
											+ ", setting="
											+ setting
											+ ", paycode=" + paycode);
									JsonCmccmmbaixunlingdongRes res = getCmccmmBaixunlingdongUrlContent(
											app, setting, paycode, imeiParam,
											realimsi, order.getOrderNo(), ip);
									if (StringUtils
											.isNotEmpty(res.getContent())) {
										content = res.getContent();
										number = res.getDest();
										if ("data".equals(res.getSmstype())) {
											payinfo.setSms_content_type("2");
										} else if ("text".equals(res
												.getSmstype())) {
											payinfo.setSms_content_type("1");
										}
									} else {
										logger.error("cmccmmbaixunlingdongUrl获取短信内容异常"
												+ res.getContent());
										insertFaileOrderInfo(cmd, dal,
												mmdoSetting, order, channel, 3,
												"获取短信内容异常");
										return StatusCode.ERR_NOTFOUND()
												.setMessage("短信内容失败");
									}
								} catch (Exception e) {
									logger.error(
											"cmccmmbaixunlingdongUrl获取短信内容异常",
											e);
									return StatusCode.ERR_NOTFOUND()
											.setMessage("短信内容失败");
								}
							} else if (CMCCXINGTIANYUANSMS
									.equalsIgnoreCase(channel.getChannelCode())) {
								content = contentArray[i];
							} else if (CMCCDONGMAN
									.equalsIgnoreCase(channel.getChannelCode())) {
								try {
									Float price = realamount * 100;
									Integer p = price.intValue();
									String amount = String.valueOf(p);
									JsonCmccDongmanRes res = getCmccDongmanContent(imeiParam,realimsi,amount);
									if ("0".equals(res.getStatus())) {
										content = res.getMessage();
										number = res.getReceiver();
										mmdoSetting.setNumber(number);
										mmdoSetting.setContent(content);
										String msgId=res.getMsgId();
										
										CmccDongmanReqThread cmccDongmanReqThread = new CmccDongmanReqThread(order.getOrderNo(),msgId);
										cmccDongmanReqThread.start();
									} else {
										logger.error("cmccdongman获取短信内容异常" + res.getStatus());
										content = "";
										number = "";
									}
								} catch (Exception e) {
									logger.error("cmccdongman获取短信内容异常", e);
									content = "";
									number = "";
								}
							}else if(CMCCMOPINGDONGMAN.equalsIgnoreCase(channel.getChannelCode())){
								try {
									String phoneNumber="";
									if (StringUtils
											.isNotEmpty(mobilephoneNumber)
											&& StringUtils
													.isNotBlank(mobilephoneNumber)
											&& mobilephoneNumber.length() == 11) {
										phoneNumber=mobilephoneNumber;
									}else {
										phoneNumber="15928876607";//写死手机号码
									}
									String paycode=mmdoSetting.getContent();
									JsonCmccMopingDongman res=getCmccMopingDongmanContent(phoneNumber,paycode,order.getOrderNo());
									if ("00000".equals(res.getResultCode())) {
										outtradeid=res.getServerOrderNum();
										content = "";
										number = "";
										wapurl=res.getUrl();
									}else{
										logger.error("cmccmopingdongman获取短信内容异常"
												+ res.getResultCode());
										content = "";
										number = "";
									}
								} catch (Exception e) {
									logger.error("cmccmopingdongman获取短信内容异常", e);
									content = "";
									number = "";
								}
							}else {
								content = contentArray[i] + game.getGameId();
							}
						} else if (operatorType == 3) {

							long sy33 = System.currentTimeMillis();
							logger.info("33---" + sy + "time is :"
									+ (sy33 - sy) + ",orderNo ="
									+ order.getOrderNo());

							if (LoveGame.equalsIgnoreCase(channel
									.getChannelCode())) {
								content = contentArray[i];
							} else if (TELECOMLANGTIAN.equalsIgnoreCase(channel
									.getChannelCode())) {
								try {
									String fee = "";
									if (realamount < 1f) {
										fee = String.valueOf(realamount);
									} else {
										Integer p = (int) realamount;
										fee = String.valueOf(p);
									}
									String gameName = game.getName();
									String chargeName = contentArray[i];
									String orderNo = order.getOrderNo()
											.substring(2);
									JsonLangTianRes res = getLangTianContent(
											fee, ip, orderNo, imsiParam,
											gameName, chargeName);
									if ("0000".equals(res.getResultCode())) {
										content = res.getCode();
										number = res.getLongCode();
										mmdoSetting.setNumber(number);
									} else if ("1001".equals(res
											.getResultCode())) {
										logger.error("游戏名称为空,the telecomlangtian error is "
												+ res.toString());
										insertFaileOrderInfo(cmd, dal,
												mmdoSetting, order, channel, 3,
												"游戏名称为空");
										return StatusCode.ERR_NOTFOUND()
												.setMessage("短信内容失败");
									} else if ("1002".equals(res
											.getResultCode())) {
										logger.error("计费点名称为空,the telecomlangtian error is "
												+ res.toString());
										insertFaileOrderInfo(cmd, dal,
												mmdoSetting, order, channel, 3,
												"计费点名称为空");
										return StatusCode.ERR_NOTFOUND()
												.setMessage("短信内容失败");
									} else if ("1003".equals(res
											.getResultCode())) {
										logger.error("Mac校验信息为空,the telecomlangtian error is "
												+ res.toString());
										insertFaileOrderInfo(cmd, dal,
												mmdoSetting, order, channel, 3,
												"Mac校验信息为空");
										return StatusCode.ERR_NOTFOUND()
												.setMessage("短信内容失败");
									} else if ("1004".equals(res
											.getResultCode())) {
										logger.error("资费为空,the telecomlangtian error is "
												+ res.toString());
										insertFaileOrderInfo(cmd, dal,
												mmdoSetting, order, channel, 3,
												"资费为空");
										return StatusCode.ERR_NOTFOUND()
												.setMessage("短信内容失败");
									} else if ("1005".equals(res
											.getResultCode())) {
										logger.error("渠道id为空,the telecomlangtian error is "
												+ res.toString());
										insertFaileOrderInfo(cmd, dal,
												mmdoSetting, order, channel, 3,
												"渠道id为空");
										return StatusCode.ERR_NOTFOUND()
												.setMessage("短信内容失败");
									} else if ("2001".equals(res
											.getResultCode())) {
										logger.error("渠道不存在,the telecomlangtian error is "
												+ res.toString());
										insertFaileOrderInfo(cmd, dal,
												mmdoSetting, order, channel, 3,
												"渠道不存在");
										return StatusCode.ERR_NOTFOUND()
												.setMessage("短信内容失败");
									} else if ("2002".equals(res
											.getResultCode())) {
										logger.error("校验出错,the telecomlangtian error is "
												+ res.toString());
										insertFaileOrderInfo(cmd, dal,
												mmdoSetting, order, channel, 3,
												"校验出错");
										return StatusCode.ERR_NOTFOUND()
												.setMessage("短信内容失败");
									} else if ("3001".equals(res
											.getResultCode())) {
										logger.error("没有可用指令,the telecomlangtian error is "
												+ res.toString());
										insertFaileOrderInfo(cmd, dal,
												mmdoSetting, order, channel, 3,
												"没有可用指令");
										return StatusCode.ERR_NOTFOUND()
												.setMessage("短信内容失败");
									}
								} catch (Exception e) {
									logger.error("telecomlangtian获取短信内容异常", e);
									return StatusCode.ERR_NOTFOUND()
											.setMessage("短信内容失败");
								}
							} else if (MMPMLOVECARTOON.equalsIgnoreCase(channel
									.getChannelCode())) {
								content = contentArray[i] + order.getOrderNo();
							} else if (CTCCLOVEMUSIC.equalsIgnoreCase(channel
									.getChannelCode())) {
								content = contentArray[i] + order.getOrderNo();
							} else if(CTCCXINWANG.equalsIgnoreCase(channel
									.getChannelCode())){
								try{
									long t=System.currentTimeMillis()/1000;
									String timestamp=String.valueOf(t);
									Integer p=(int) realamount;
									String fee=String.valueOf(p);
									JsonCtccXinwangRes res=getCtccXinwangContent(timestamp, imsiParam, order.getOrderNo(), fee);
									if("0".equals(res.getResult())){
										content = res.getDetail().get(0).getPer_orderId_amount();
										number = res.getSms();
									}else{
										content = "";
										number = "";
									}
								}catch(Exception e){
									logger.error("ctccxinwang获取短信内容异常", e);
									content = "";
									number = "";
								}
							}else {
								content = contentArray[i] + "-00"
										+ game.getCpId() + game.getGameId();
							}
							logger.debug("the ctcc content is :" + content);
						} else {
							// 联通

							long sy32 = System.currentTimeMillis();
							logger.info("32---" + sy + "time is :"
									+ (sy32 - sy) + ",orderNo ="
									+ order.getOrderNo());

							if (WO_APPSTORE.equalsIgnoreCase(channel
									.getChannelCode())) {
								String[] c = null;
								if (contentArray[i].contains("@")) {
									c = contentArray[i].split("@");
								}
								content = c[0];
							} else if (WO_PLUS.equalsIgnoreCase(channel
									.getChannelCode())
									|| WO_PLUS_YOUQU.equalsIgnoreCase(channel
											.getChannelCode())) {
								try {
									WoplusSmsRes res = fetchWoplusSms(order,
											realamount, imsiParam, imei,
											channel.getChannelCode());
									if (!"0".equals(res.getResultCode())) {
										logger.error("the woplus error, pay passage="
												+ channel.getChannelCode()
												+ ", sms res = "
												+ res.toString());
										insertFaileOrderInfo(cmd, dal,
												mmdoSetting, order, channel, 4,
												"订单异常");
										return StatusCode
												.ERR_NOTFOUND()
												.setMessage(
														"取短信失败"
																+ res.getResultCode());
									}
									content = res.getSms();
									number = res.getAccessNo();
									numberBuff.append(number).append(
											splitContentString);
								} catch (Exception e) {
									logger.error("联通WO+获取短信内容异常", e);
									return StatusCode.ERR_NOTFOUND()
											.setMessage("短信内容失败");
								}
							} else if (WO_PLUS_OFFLINE.equalsIgnoreCase(channel
									.getChannelCode())) {
								try {
									logger.info("enter the woplusoffline");
									String[] appNameAndProductName = mmdoSetting
											.getContent().split("@");
									String appName = "";
									String productName = "";
									if (appNameAndProductName.length == 2) {
										appName = appNameAndProductName[0];
										productName = appNameAndProductName[1];
									}
									String smsPort = Cfg.cfg
											.getString("sdk.external.unicom.woplusoffline.sms.port");
									Date time = new Date();
									SdkWoplusOfflinePaySms sdkWoplusOfflinePaySms = new SdkWoplusOfflinePaySms();
									sdkWoplusOfflinePaySms.setGameId(game
											.getGameId());
									sdkWoplusOfflinePaySms.setMoney(realamount);
									// sdkWoplusOfflinePaySms.setProductName(game.getName());
									sdkWoplusOfflinePaySms
											.setProductName(productName);
									sdkWoplusOfflinePaySms
											.setServicePhone("020-38811170");
									sdkWoplusOfflinePaySms.setOutTradeNo(order
											.getOrderNo());
									sdkWoplusOfflinePaySms.setOrderNo(order
											.getOrderNo());
									sdkWoplusOfflinePaySms.setSmsPort(smsPort);

									sdkWoplusOfflinePaySms.setImsi(imsiParam);
									sdkWoplusOfflinePaySms.setImei(imei);
									sdkWoplusOfflinePaySms.setStatus((byte) 0);
									sdkWoplusOfflinePaySms.setCreatedTime(time);
									sdkWoplusOfflinePaySms.setUpdatedTime(time);
									SdkWoplusOfflinePaySmsMapper sdkWoplusOfflinePaySmsMapper = dal
											.getMapper(SdkWoplusOfflinePaySmsMapper.class);
									sdkWoplusOfflinePaySmsMapper
											.insertSelective(sdkWoplusOfflinePaySms);
									String smsContent = getWoPlusOffLineSmsContent(
											appName, sdkWoplusOfflinePaySms);
									sdkWoplusOfflinePaySmsMapper
											.updateByPrimaryKeySelective(sdkWoplusOfflinePaySms);
									if ("error".equals(smsContent)) {
										logger.error("the woplusoffline error");
										return StatusCode.ERR_NOTFOUND()
												.setMessage("取短信失败");
									}
									content = smsContent;
									number = smsPort;
									numberBuff.append(number).append(
											splitContentString);
								} catch (Exception e) {
									logger.error("联通WO+离线获取短信内容异常", e);
									return StatusCode.ERR_NOTFOUND()
											.setMessage("短信内容失败");
								}
							} else if (CUCC_XX.equalsIgnoreCase(channel
									.getChannelCode())) {
								try {
									String productid = "";
									String paycode = "";
									if (contentArray[i].contains("-")) {
										String[] s = contentArray[i].split("-");
										productid = s[0];
										paycode = s[1];
									}
									if (StringUtils.isNotBlank(productid)
											&& StringUtils.isNotBlank(paycode)) {
										String orderid = order.getOrderNo()
												+ "00000000";
										JsonCuccXxSms jsonCuccXxSms = getCuccxx(
												orderid, productid, paycode);
										if (jsonCuccXxSms.getInnercode()
												.equals("6001")) {
											logger.error("account不存在,the cuccxxsms error is "
													+ jsonCuccXxSms.toString());
											return StatusCode.ERR_NOTFOUND()
													.setMessage("短信内容失败");
										} else if (jsonCuccXxSms.getInnercode()
												.equals("6002")) {
											logger.error("verfiy错误,the cuccxxsms error is "
													+ jsonCuccXxSms.toString());
											return StatusCode.ERR_NOTFOUND()
													.setMessage("短信内容失败");
										} else if (jsonCuccXxSms.getInnercode()
												.equals("9999")) {
											logger.error("查寻金额失败,the cuccxxsms error is "
													+ jsonCuccXxSms.toString());
											return StatusCode.ERR_NOTFOUND()
													.setMessage("短信内容失败");
										} else if (jsonCuccXxSms.getInnercode()
												.equals("9991")) {
											logger.error("用户取消订购,the cuccxxsms error is "
													+ jsonCuccXxSms.toString());
											return StatusCode.ERR_NOTFOUND()
													.setMessage("短信内容失败");
										} else if (jsonCuccXxSms.getInnercode()
												.equals("9992")) {
											logger.error("非联通卡,the cuccxxsms error is "
													+ jsonCuccXxSms.toString());
											return StatusCode.ERR_NOTFOUND()
													.setMessage("短信内容失败");
										} else if (jsonCuccXxSms.getInnercode()
												.equals("9993")) {
											logger.error("短信发送失败,the cuccxxsms error is "
													+ jsonCuccXxSms.toString());
											return StatusCode.ERR_NOTFOUND()
													.setMessage("短信内容失败");
										} else if (jsonCuccXxSms.getInnercode()
												.equals("9994")) {
											logger.error("检测商户信息失败,the cuccxxsms error is "
													+ jsonCuccXxSms.toString());
											return StatusCode.ERR_NOTFOUND()
													.setMessage("短信内容失败");
										} else if (jsonCuccXxSms.getInnercode()
												.equals("9995")) {
											logger.error("获取订单号失败,the cuccxxsms error is "
													+ jsonCuccXxSms.toString());
											return StatusCode.ERR_NOTFOUND()
													.setMessage("短信内容失败");
										} else if (jsonCuccXxSms.getInnercode()
												.equals("9157")) {
											logger.error("计费点不存在,the cuccxxsms error is "
													+ jsonCuccXxSms.toString());
											return StatusCode.ERR_NOTFOUND()
													.setMessage("短信内容失败");
										} else if (jsonCuccXxSms.getInnercode()
												.equals("9609")) {
											logger.error("本月消费额已超，请下月再消费,the cuccxxsms error is "
													+ jsonCuccXxSms.toString());
											return StatusCode.ERR_NOTFOUND()
													.setMessage("短信内容失败");
										} else if (jsonCuccXxSms.getInnercode()
												.equals("9610")) {
											logger.error("您当天消费额已超，请明天再消费,the cuccxxsms error is "
													+ jsonCuccXxSms.toString());
											return StatusCode.ERR_NOTFOUND()
													.setMessage("短信内容失败");
										} else if (jsonCuccXxSms.getInnercode()
												.equals("9614")) {
											logger.error("对不起，您所在的省份尚未开通此项业务,the cuccxxsms error is "
													+ jsonCuccXxSms.toString());
											return StatusCode.ERR_NOTFOUND()
													.setMessage("短信内容失败");
										} else if (jsonCuccXxSms.getInnercode()
												.equals("9617")) {
											logger.error("您当天消费次数过多，请明天再消费,the cuccxxsms error is "
													+ jsonCuccXxSms.toString());
											return StatusCode.ERR_NOTFOUND()
													.setMessage("短信内容失败");
										} else if (jsonCuccXxSms.getInnercode()
												.equals("9618")) {
											logger.error("您操作过于频繁，请稍后再试,the cuccxxsms error is "
													+ jsonCuccXxSms.toString());
											return StatusCode.ERR_NOTFOUND()
													.setMessage("短信内容失败");
										} else if (jsonCuccXxSms.getInnercode()
												.equals("1069")) {
											logger.error("用户不是一个预付费用户,the cuccxxsms error is "
													+ jsonCuccXxSms.toString());
											return StatusCode.ERR_NOTFOUND()
													.setMessage("短信内容失败");
										} else if (jsonCuccXxSms.getInnercode()
												.equals("1070")) {
											logger.error("用户余额不足,the cuccxxsms error is "
													+ jsonCuccXxSms.toString());
											return StatusCode.ERR_NOTFOUND()
													.setMessage("短信内容失败");
										} else if (jsonCuccXxSms.getInnercode()
												.equals("0000")) {
											content = jsonCuccXxSms
													.getMessage();
										}
									} else {
										return StatusCode.ERR_NOTFOUND()
												.setMessage("未找到计费");
									}
								} catch (Exception e) {
									logger.error("联通讯翔获取短信内容异常", e);
									return StatusCode.ERR_NOTFOUND()
											.setMessage("短信内容失败");
								}
							} else if (CUCCYIJIAN.equalsIgnoreCase(channel
									.getChannelCode())) {
								try {
									Float price = realamount * 100;
									Integer p = price.intValue();
									String zhuque_price = String.valueOf(p);
									String ipAddr = ip;
									String feeName = mmdoSetting.getContent();
									JsonCuccYijianRes jsonCuccYijianRes = getCuccYijianContent(
											order.getOrderNo(), zhuque_price,
											realimsi, imeiParam, ipAddr,
											order.getOrderNo(), feeName);
									if ("0".equals(jsonCuccYijianRes
											.getStatus())) {
										if ("0".equals(jsonCuccYijianRes
												.getNoteChannels().get(0)
												.getSendType())) {
											content = jsonCuccYijianRes
													.getNoteChannels().get(0)
													.getSendCmd();
											payinfo.setSms_content_type("1");
										} else if ("1".equals(jsonCuccYijianRes
												.getNoteChannels().get(0)
												.getSendType())) {
											String c = jsonCuccYijianRes
													.getNoteChannels().get(0)
													.getSendCmd();
											byte[] decBytes = Base64
													.decodeBase64(c
															.getBytes("ISO-8859-1"));
											content = new String(decBytes,
													"ISO-8859-1");
											payinfo.setSms_content_type("2");
										}
										outtradeid = jsonCuccYijianRes
												.getNoteChannels().get(0)
												.getSequence();
										number = jsonCuccYijianRes
												.getNoteChannels().get(0)
												.getSendNumber();
										mmdoSetting.setNumber(number);
									} else {
										logger.error("cuccyijian获取短信内容异常"
												+ jsonCuccYijianRes.getStatus());
										content = "";
										number = "";
									}
								} catch (Exception e) {
									logger.error("联通易简获取短信内容异常", e);
									content = "";
									number = "";
								}

							}else if (CUCCYIJIANWOMUSIC.equalsIgnoreCase(channel
									.getChannelCode())) {
								try {
									if (StringUtils
											.isNotEmpty(mobilephoneNumber)
											&& StringUtils
													.isNotBlank(mobilephoneNumber)
											&& mobilephoneNumber.length() == 11) {
										// 已有手机号
										Float price = realamount * 100;
										Integer p = price.intValue();
										String amount = String.valueOf(p);
										String ipAddr = ip;
										String feeName = mmdoSetting.getContent();
										JsonCuccYijianRes jsonCuccYijianRes = getCuccYijianWoMusicContent(
												order.getOrderNo(), amount,
												realimsi, imeiParam, ipAddr,
												order.getOrderNo(), feeName,mobilephoneNumber);
										SdkOrderMmdoVerifycodeMapper sdkOrderMmdoVerifycodeMapper=dal.getMapper(SdkOrderMmdoVerifycodeMapper.class);
										SdkOrderMmdoVerifycode sdkOrderMmdoVerifycode=new SdkOrderMmdoVerifycode();
										sdkOrderMmdoVerifycode.setOrderNo(order.getOrderNo());
										sdkOrderMmdoVerifycode.setMobile(mobilephoneNumber);
										Integer fee = (int) realamount * 100;
										sdkOrderMmdoVerifycode.setPrice(fee);
										sdkOrderMmdoVerifycode.setGameId(game.getGameId());
										sdkOrderMmdoVerifycode.setCreatedTime(reqOrderNoTime);
										if ("0".equals(jsonCuccYijianRes
												.getStatus())) {
											sdkOrderMmdoVerifycode.setOutTradeNo(jsonCuccYijianRes.getNoteChannels().get(0).getSequence());
											sdkOrderMmdoVerifycode.setApplyResultcode(jsonCuccYijianRes
												.getStatus());
											String applyResultmsg=mapper.writeValueAsString(jsonCuccYijianRes);
											sdkOrderMmdoVerifycode.setApplyResultmsg(applyResultmsg);
											content = "";
											number = "";
											payMmdoCommandList.setFlagSend("10");
										}else{
											logger.error("cuccyijianwomusic获取短信内容异常"
													+ jsonCuccYijianRes.getStatus());
											sdkOrderMmdoVerifycode.setApplyResultcode(jsonCuccYijianRes
													.getStatus());
											String applyResultmsg=mapper.writeValueAsString(jsonCuccYijianRes);
											sdkOrderMmdoVerifycode.setApplyResultmsg(applyResultmsg);
											content = "";
											number = "";
										}
										sdkOrderMmdoVerifycodeMapper.insertSelective(sdkOrderMmdoVerifycode);
									}else {
										// 没有手机号
										payMmdoCommandList.setFlagSend("11");
										content = order.getOrderNo();
									}
								} catch (Exception e) {
									logger.error("联通易简沃音乐获取短信内容异常", e);
									content = "";
									number = "";
								}
							}else if (CUCCMUSICBASE.equalsIgnoreCase(channel
									.getChannelCode())) {
								try {
									if (StringUtils.isBlank(mobilephoneNumber)) {
										mobilephoneNumber = "13137640720";
									}
									String productId = contentArray[i];
									JsonCuccMusicbaseRes res = getCuccMusicbaseContent(
											mobilephoneNumber, productId,
											imeiParam, imsiParam);
									if (StringUtils.isNotEmpty(res.getSms())
											&& StringUtils.isNotBlank(res
													.getSms())
											&& StringUtils.isNotEmpty(res
													.getPort())
											&& StringUtils.isNotBlank(res
													.getPort())) {
										content = res.getSms();
										number = res.getPort();
										mmdoSetting.setNumber(number);
										if (StringUtils.isNotEmpty(res
												.getTradeid())) {
											outtradeid = res.getTradeid();
										}
									} else {
										logger.error("cuccmusicbase获取短信内容异常"
												+ res.getTradeid());
										if (StringUtils.isNotEmpty(res
												.getTradeid())) {
											outtradeid = res.getTradeid();
										}
										insertFaileOrderInfo(cmd, dal,
												mmdoSetting, order, channel, 3,
												"获取短信内容失败");
										return StatusCode.ERR_NOTFOUND()
												.setMessage("短信内容失败");
									}

								} catch (Exception e) {
									logger.error("联通音乐基地获取短信内容异常", e);
									return StatusCode.ERR_NOTFOUND()
											.setMessage("短信内容失败");
								}
							} else if (CUCCZHANGYUNZY.equalsIgnoreCase(channel
									.getChannelCode())) {
								try {
									if (StringUtils
											.isNotEmpty(mobilephoneNumber)
											&& StringUtils
													.isNotBlank(mobilephoneNumber)
											&& mobilephoneNumber.length() == 11) {
										// 已有手机号
										String result = getCuccZhangyunZhongyinContent(
												imeiParam, imsiParam,
												String.valueOf(realamount),
												order.getOrderNo(), ip,
												mobilephoneNumber);
										String[] r = result.split("<:>");
										SdkCuccZhangyunzyVerifyMapper sdkCuccZhangyunzyVerifyMapper=dal.getMapper(SdkCuccZhangyunzyVerifyMapper.class);
										SdkCuccZhangyunzyVerify sdkCuccZhangyunzyVerify=new SdkCuccZhangyunzyVerify();
										if (r[0].equals("SUCCESS")) {
											outtradeid=r[1];
											sdkCuccZhangyunzyVerify.setOrderNo(order.getOrderNo());
											sdkCuccZhangyunzyVerify.setMobile(mobilephoneNumber);
											sdkCuccZhangyunzyVerify.setOutTradeNo(outtradeid);
											Integer fee = (int) realamount * 100;
											sdkCuccZhangyunzyVerify.setPrice(fee);
											sdkCuccZhangyunzyVerify.setGameId(game.getGameId());
											sdkCuccZhangyunzyVerify.setApplyResultcode(r[0]);
											sdkCuccZhangyunzyVerify.setApplyResultmsg(result);
											sdkCuccZhangyunzyVerify.setCreatedTime(reqOrderNoTime);
//											content = imsiParam + "," + imeiParam;
//											number = "1065502004955168985";
											content = "";
											number = "";
											payMmdoCommandList.setFlagSend("10");
										}else {
											sdkCuccZhangyunzyVerify.setOrderNo(order.getOrderNo());
											sdkCuccZhangyunzyVerify.setMobile(mobilephoneNumber);
											logger.error("掌云联通中音获取短信内容失败");
											Integer fee = (int) realamount * 100;
											sdkCuccZhangyunzyVerify.setPrice(fee);
											sdkCuccZhangyunzyVerify.setGameId(game.getGameId());
											sdkCuccZhangyunzyVerify.setApplyResultcode(r[0]);
											sdkCuccZhangyunzyVerify.setApplyResultmsg(result);
											sdkCuccZhangyunzyVerify.setCreatedTime(reqOrderNoTime);
											content = "";
											number = "";
										}
										sdkCuccZhangyunzyVerifyMapper.insertSelective(sdkCuccZhangyunzyVerify);
									} else {
										// 没有手机号
										payMmdoCommandList.setFlagSend("11");
										content = order.getOrderNo();
									}
								} catch (Exception e) {
									logger.error("掌云联通中音获取短信内容异常", e);
									content = "";
									number = "";
								}
							} else {
								content = contentArray[i] + UnicomDiveStrin
										+ game.getGameId() + unicomAmountSpilt
										+ realamount + unicomAmountSpilt
										+ order.getOrderNo();
							}
						}

						if (!CMCC_YXJDDJ_LTZY_C1.equalsIgnoreCase(channel
								.getChannelCode())
								&& !CMCC_YXJDDJ_LTZY_C2
										.equalsIgnoreCase(channel
												.getChannelCode())
								&& !CMCC_YXJDDJ_XXDP.equalsIgnoreCase(channel
										.getChannelCode())) {
							ResultPayMmdoCommand payMmdoCommand = new ResultPayMmdoCommand();
							payMmdoCommand.setContent(content);
							payMmdoCommand.setNumber(number);
							payMmdoCommand.setWapurl(wapurl);
							
							String[] shieldKeywordArraySub = shieldKeywordArray[i]
									.split(spiltSubContentString);
							String[] shieldNumberArraySub = shieldNumberArray[i]
									.split(spiltSubContentString);

							for (int j = 0; j < shieldKeywordArraySub.length; j++) {
								ResultPayMmdoBlock payMmdoBlock = new ResultPayMmdoBlock();
								payMmdoBlock
										.setKeyword(shieldKeywordArraySub[j]);
								payMmdoBlock.setNumber(shieldNumberArraySub[j]);
								payMmdoCommand.addContent(payMmdoBlock);
								// 保存下发信息
								SdkMmdoShield mmdoShield = new SdkMmdoShield();
								mmdoShield.setCreateTime(new Date());
								mmdoShield.setImsi(imsiParam);
								mmdoShield.setInterval(mmdoSetting
										.getInterval());
								mmdoShield.setSendContent(content);
								mmdoShield.setSendNumber(number);
								mmdoShield
										.setShieldKeyword(shieldKeywordArraySub[j]);
								mmdoShield
										.setShieldNumber(shieldNumberArraySub[j]);
								mmdoShieldMapper.insertSelective(mmdoShield);
							}

							payMmdoCommandList.addContent(payMmdoCommand);
						}
					}

					payinfo.addContent(payMmdoCommandList);

					SdkOrderMmdoMapper mmdoMapper = dal
							.getMapper(SdkOrderMmdoMapper.class);
					SdkOrderMmdo mmdo = new SdkOrderMmdo();
					mmdo.setReqImsi(imsiParam);
					mmdo.setReqOrderAmount(realamount);
					mmdo.setReqSendContent(mmdoSetting.getContent());
					if (numberBuff.length() > 0) {
						mmdo.setReqSendNumber(numberBuff.substring(0,
								numberBuff.length() - 1));
					} else {
						mmdo.setReqSendNumber(mmdoSetting.getNumber());
					}
					mmdo.setReqTime(new Date());
					mmdo.setGameId(gameSession.getGameId());
					mmdo.setOperationType(opId);
					mmdo.setUid(gameSession.getUid());
					mmdo.setImei(imei);
					mmdo.setMacAddr(request.getParameter("mac"));
					mmdo.setIpAddr(cmd.getRequestHost());
					mmdo.setRawData(cmd.getServiceContext().getRequest()
							.getParameter("imsi"));
					mmdo.setPayChannelCode(channel.getChannelCode());
					if (mmdoSetting.getTjpropsname() != null) {
						mmdo.setTjpropsname(mmdoSetting.getTjpropsname());
					}
					mmdo.setTradeid(outtradeid);
					resultPayMmdoInfoOrderList.addContent(payinfo);
					if (totalcount == 1) {
						finalpayinfo = payinfo;
					} else if (totalcount > 1 && sendsmsnum != 0) {
						mmdo.setAdditionalStatus(1);
					}
					if (!orderIfOver30m) {
						// order.setStatusDetail("30秒内请求的订单");
						mmdo.setOverThirtym(1);
					} else {
						mmdo.setOverThirtym(0);
					}
					mmdo.setMobilephone(mobilephoneNumber);
					mmdo.setProvinceNo(mobilephoneProvinceno);
					mmdo.setIccid(iccidParam);
					mmdo.setCenternumber(mobilephoneCenterNumber);

					// 记录支付过程
					if (sendsmsnum == 0) {
						StringBuffer paytacticsString = new StringBuffer();
						for (int i = paytactics.indexOf(mmdoSetting.getId()); i < paytactics
								.size(); i++) {
							paytacticsString.append(
									String.valueOf(paytactics.get(i))).append(
									",");
						}
						mmdo.setPaytactics(paytacticsString.toString());
						nextPaytactics = getNextPaytactics(
								paytacticsString.toString(),
								mmdoSetting.getId());
						mmdo.setNextPaytactics(nextPaytactics);
					}
					mmdoMapper.insertSelective(mmdo);

					SdkOrderMapper mapperOrder = dal
							.getMapper(SdkOrderMapper.class);
					order.setPayId(mmdo.getPayId());
					order.setAmount(realamount);
					order.setSdkver(sdkver_Param);
					mapperOrder.insert(order);

					// 回调表插入一条记录
					insertSdkNotifyMmdoInfo(dal, order, mmdo, channel);

					dal.commit();
				}// 如果有补点，则结束补点层

				finalresult = null;
				if (totalcount > 1) {
					// --设置补点计费的时间间隔--
					if (ifSameChannel) {
						Integer seconds = parseInteger(Time_Interval);
						int t = Math.abs(seconds);
						supplementTimeInterval = String.valueOf(t);
					} else {
						supplementTimeInterval = Cfg.cfg
								.getString("sdk.game.supplement.request.difer.timeinterval");
					}
					resultPayMmdoInfoOrderList
							.setOrderlisttime(supplementTimeInterval);
					// ----
					finalresult = new Result(resultPayMmdoInfoOrderList);
				} else {
					finalresult = new Result(finalpayinfo);
				}
				logger.debug("the Pay_mmdo result is: "
						+ finalresult.getXml("Pay_mmdo"));

				// 省份屏蔽，结束循环
				if (!shield) {
					break;
				}

				// 超日月限额，结束循环
				if (!limit) {
					break;
				}
			}
			// 省份屏蔽,一条短信计费配置都没有，则添加失败订单记录
			if (!enablePay_proshield) {
				SdkOrder faileOrder = createOrder(cmd, mmdoType);
				SdkOperatorPayChannel faileOrderSdkOperatorPayChannel = payChannelMap
						.get(mmdoSettings.get(0).getOperatorPayChannelId());
				realamount = mmdoSettings.get(0).getAmount();
				if (mmdoSettings.get(0).getRealAmount() != null) {
					realamount = mmdoSettings.get(0).getRealAmount();
				}
				// 省份屏蔽原因，sdk_order的status状态为5，为省份屏蔽失败订单
				insertFaileOrderInfo(cmd, dal, mmdoSettings.get(0), faileOrder,
						faileOrderSdkOperatorPayChannel, 5, "省份屏蔽");

				// 判断是否省份屏蔽,如果没有屏蔽，则返回0，否则返回非0
				Integer faileOrderpF = checkProvince(mobilephoneProvinceno,
						mobilephoneNumber, faileOrderSdkOperatorPayChannel);
				if (faileOrderpF == 1) {
					return StatusCode.ERR_NOTFOUND().setMessage("未找到计费省");
				} else if (faileOrderpF == 2) {
					return StatusCode.ERR_NOTFOUND().setMessage("计费时段屏蔽");
				} else if (faileOrderpF == 3) {
					return StatusCode.ERR_NOTFOUND().setMessage("计费号段屏蔽");
				} else if (faileOrderpF == 4) {
					return StatusCode.ERR_NOTFOUND().setMessage("计费省份屏蔽");
				}
			}

			// 日月超额限制,一条短信计费配置都没有，则添加失败订单记录
			if (!enablePay_dmlimit) {
				SdkOrder faileOrder = createOrder(cmd, mmdoType);
				SdkOperatorPayChannel faileOrderSdkOperatorPayChannel = payChannelMap
						.get(mmdoSettings.get(0).getOperatorPayChannelId());
				realamount = mmdoSettings.get(0).getAmount();
				if (mmdoSettings.get(0).getRealAmount() != null) {
					realamount = mmdoSettings.get(0).getRealAmount();
				}
				String failedetail = "";
				Integer status = 0;
				if (dmLimitResult == 1) {
					failedetail = "超通道日限额";
					status = 12;
				} else if (dmLimitResult == 2) {
					failedetail = "超通道月限额";
					status = 13;
				} else if (dmLimitResult == 3) {
					failedetail = "超运营商日限";
					status = 12;
				} else if (dmLimitResult == 4) {
					failedetail = "超运营商月限";
					status = 13;
				}

				// 日月超额限制
				insertFaileOrderInfo(cmd, dal, mmdoSettings.get(0), faileOrder,
						faileOrderSdkOperatorPayChannel, status, failedetail);
				return StatusCode.ERR_NOTFOUND().setMessage(failedetail);
			}

			long sy10 = System.currentTimeMillis();
			logger.info("10---" + sy + "time is :" + (sy10 - sy));

			return finalresult;

		} finally {
			dal.close();
		}
	}

	/***
	 * 
	 * 是否超过限额
	 * 
	 * @param dal
	 * @param operation
	 * @return 0、表示未超过 。1、(对通道判断)表示当天超过。 2、(对通道判断)表示当月超过
	 *         。3、(对运营商判断)表示当天超过。4、(对运营商判断)表示当月超过。
	 */
	private Integer isOverLimitPay(DAL dal, int operation, String imsi,
			SdkOperatorPayChannel channel) {

		SdkOperatorPayLimitExample limitExample = new SdkOperatorPayLimitExample();
		limitExample.createCriteria().andOperatorTypeEqualTo(operation);
		SdkOperatorPayLimitMapper limitMapper = dal
				.getMapper(SdkOperatorPayLimitMapper.class);
		SdkOperatorPayLimit sdkOperatorPayLimit = limitMapper
				.selectOne(limitExample);

		// 微信支付的paychannelcode字符串
		String payChannelCode1 = "sdkxqtpay";

		// (对运营商判断)
		float operatorDaylimit = 200;
		float operatorMonthlimit = 500;
		if (sdkOperatorPayLimit != null) {
			operatorDaylimit = sdkOperatorPayLimit.getDayLimit().floatValue();
			operatorMonthlimit = sdkOperatorPayLimit.getMonthLimit()
					.floatValue();
		}

		// (对通道判断)
		float channelDaylimit = 200;
		float channelMonthlimit = 500;
		if (channel.getDayLimit() != null && channel.getMonthLimit() != null) {
			channelDaylimit = channel.getDayLimit();
			channelMonthlimit = channel.getMonthLimit();
		}

		// 计算当天
		Calendar calendar = Calendar.getInstance();
		calendar.set(Calendar.HOUR_OF_DAY, 0);
		calendar.set(Calendar.MINUTE, 0);
		calendar.set(Calendar.SECOND, 0);
		calendar.set(Calendar.MILLISECOND, 0);
		Date startDay = calendar.getTime();
		calendar.add(Calendar.DAY_OF_MONTH, 1);
		Date endDay = calendar.getTime();

		// 更改为按手机号限制消费
		SdkOrderMmdoMapper orderMmdoMapper = dal
				.getMapper(SdkOrderMmdoMapper.class);
		SdkOrderMmdoExample mmdoExample = new SdkOrderMmdoExample();
		mmdoExample.createCriteria().andReqImsiEqualTo(imsi)
				.andRespStatusEqualTo(1)
				.andReqTimeGreaterThanOrEqualTo(startDay)
				.andOperationTypeEqualTo(operation)
				.andPayChannelCodeNotEqualTo(payChannelCode1);
		List<SdkOrderMmdo> channelSdkOrderMmdolist = orderMmdoMapper
				.selectByExample(mmdoExample);

		// 计算当月
		calendar.set(Calendar.DAY_OF_MONTH, 1);
		Date startMonth = calendar.getTime();
		mmdoExample = new SdkOrderMmdoExample();
		Date now = new Date();
		mmdoExample.createCriteria().andReqImsiEqualTo(imsi)
				.andRespStatusEqualTo(1)
				.andReqTimeGreaterThanOrEqualTo(startMonth)
				.andOperationTypeEqualTo(operation)
				.andPayChannelCodeNotEqualTo(payChannelCode1);
		List<SdkOrderMmdo> monthSdkOrderMmdoList = orderMmdoMapper
				.selectByExample(mmdoExample);

		// (对运营商判断)计算当天总和
		float operatorDayAmountTotal = 0;
		for (SdkOrderMmdo orderMmdo : channelSdkOrderMmdolist) {
			operatorDayAmountTotal += orderMmdo.getReqOrderAmount()
					.floatValue();
			if (operatorDayAmountTotal >= operatorDaylimit) {
				logger.info("uid = " + gameSession.getUid() + ", imsi = "
						+ imsi + ", pay total " + operatorDayAmountTotal
						+ ", out of operator daily limit " + operatorDaylimit
						+ ", startDay = " + startDay + ", endDay = " + endDay);
				return 3;
			}
		}

		// (对运营商判断)计算当月总和
		float operatorMonthAmountTotal = 0;
		for (SdkOrderMmdo orderMmdo : monthSdkOrderMmdoList) {
			operatorMonthAmountTotal += orderMmdo.getReqOrderAmount();
			if (operatorMonthAmountTotal >= operatorMonthlimit) {
				logger.info("uid = " + gameSession.getUid() + ", imsi = "
						+ imsi + ", pay total " + operatorMonthAmountTotal
						+ ", out of operator month limit " + operatorMonthlimit
						+ ", startMonth = " + startMonth + ", endMonth = "
						+ now);
				return 4;
			}

		}

		// (对通道判断)计算当天总和
		float channelDayAmountTotal = 0;
		for (SdkOrderMmdo orderMmdo : channelSdkOrderMmdolist) {
			channelDayAmountTotal += orderMmdo.getReqOrderAmount().floatValue();
			if (channelDayAmountTotal >= channelDaylimit) {
				logger.info("uid = " + gameSession.getUid() + ", imsi = "
						+ imsi + ", pay total " + channelDayAmountTotal
						+ ", out of channel daily limit " + channelDaylimit
						+ ", startDay = " + startDay + ", endDay = " + endDay);
				return 1;
			}
		}

		// (对通道判断)计算当月总和
		float channelMonthAmountTotal = 0;
		for (SdkOrderMmdo orderMmdo : monthSdkOrderMmdoList) {
			channelMonthAmountTotal += orderMmdo.getReqOrderAmount();
			if (channelMonthAmountTotal >= channelMonthlimit) {
				logger.info("uid = " + gameSession.getUid() + ", imsi = "
						+ imsi + ", pay total " + channelMonthAmountTotal
						+ ", out of channel month limit " + channelMonthlimit
						+ ", startMonth = " + startMonth + ", endMonth = "
						+ now);
				return 2;
			}

		}

		return 0;
	}

	/**
	 * 如果大于预设值可以支付，则返回true，如果小于预设值不可以支付，则返回false
	 * 
	 * @param dal
	 * @param operation
	 * @param imsi
	 * @return
	 */
	private Boolean judgeReqOrderNoTime(DAL dal, int operation, String imsi,
			SdkOperatorPayChannel channel, Date d) {
		// 判断订单是否重复,默认是30秒
		Boolean flag = true;
		Integer reqorderNoseconds = parseInteger(Time_Interval);
		if (channel.getReqTimeinterval() != null) {
			reqorderNoseconds = channel.getReqTimeinterval();
			reqorderNoseconds = 0 - reqorderNoseconds;
		}
		Date pretime = addSecond(d, reqorderNoseconds);

		SdkOrderMmdoMapper orderMmdoMapper = dal
				.getMapper(SdkOrderMmdoMapper.class);
		SdkOrderMmdoExample mmdoExample = new SdkOrderMmdoExample();
		// 更改为按手机号限制消费
		logger.debug("imsi =" + imsi + ", pretime =" + pretime
				+ ", operation =" + operation + ", reqorderNoseconds ="
				+ reqorderNoseconds + ", d =" + d);
		mmdoExample.createCriteria().andReqImsiEqualTo(imsi)
				.andRespStatusEqualTo(1)
				.andReqTimeGreaterThanOrEqualTo(pretime)
				.andReqTimeLessThanOrEqualTo(reqOrderNoTime)
				.andOperationTypeEqualTo(operation);
		List<SdkOrderMmdo> orderMmdoList = orderMmdoMapper
				.selectByExample(mmdoExample);

		if (orderMmdoList != null && orderMmdoList.size() > 0) {
			flag = false;
		}
		return flag;
	}

	/**
	 * 判断订单是否是30秒之外，如果大于预设值30秒，则返回true，如果小于预设值30秒，则返回false
	 * 
	 * @param dal
	 * @param operation
	 * @param imsi
	 * @return
	 */
	private Boolean judgeReqOrderTimeOver30m(DAL dal, int operation,
			String imsi, SdkOperatorPayChannel channel, Date d) {
		// 判断订单是否重复,默认是30秒
		Boolean flag = true;
		Integer reqorderNoseconds = parseInteger(Time_Interval);
		if (channel.getReqTimeinterval() != null) {
			reqorderNoseconds = channel.getReqTimeinterval();
			reqorderNoseconds = 0 - reqorderNoseconds;
		}
		Date pretime = addSecond(d, reqorderNoseconds);

		SdkOrderMmdoMapper orderMmdoMapper = dal
				.getMapper(SdkOrderMmdoMapper.class);
		SdkOrderMmdoExample mmdoExample = new SdkOrderMmdoExample();
		// 更改为按手机号限制消费
		logger.debug("imsi =" + imsi + ", pretime =" + pretime
				+ ", operation =" + operation + ", reqorderNoseconds ="
				+ reqorderNoseconds + ", d =" + d);
		mmdoExample.createCriteria().andReqImsiEqualTo(imsi)
				.andReqTimeGreaterThanOrEqualTo(pretime)
				.andReqTimeLessThanOrEqualTo(reqOrderNoTime)
				.andOperationTypeEqualTo(operation);
		List<SdkOrderMmdo> orderMmdoList = orderMmdoMapper
				.selectByExample(mmdoExample);

		if (orderMmdoList != null && orderMmdoList.size() > 0) {
			flag = false;
		}
		return flag;
	}

	/**
	 * 计算运营商 1:中国移动 2:中国联通 3:中国电信
	 * 
	 * @param imsi
	 * @return
	 */
	private int getOperatorByIMSI(String imsi) {
		int operatorId = 0;
		if (StringUtils.isNotEmpty(imsi)) {
			if (imsi.startsWith("46000") || imsi.startsWith("46002")
					|| imsi.startsWith("46007") || imsi.startsWith("898600")) {
				// 中国移动
				operatorId = 1;
			} else if (imsi.startsWith("46001") || imsi.startsWith("46006")
					|| imsi.startsWith("46010")) {
				// 中国联通
				operatorId = 2;
			} else if (imsi.startsWith("46003") || imsi.startsWith("46005")
					|| imsi.startsWith("46011")) {
				// 中国电信
				operatorId = 3;
			}
		}
		return operatorId;
	}

	public Date addSecond(Date date, int seconds) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.add(Calendar.SECOND, seconds);
		return calendar.getTime();
	}

	private Integer parseInteger(String str) {
		Integer num = null;
		try {
			if (StringUtils.isNotBlank(str)) {
				num = Integer.valueOf(str);
			}
		} catch (NumberFormatException e) {
			logger.warn("parse number string error! str = " + str);
		}
		return num;
	}

	private Date timeString2Date(String str) throws ParseException {
		SimpleDateFormat format = new SimpleDateFormat("HH:mm");
		Date date = format.parse(str);
		return date;
	}

	private String date2TimeString(Date date) {
		SimpleDateFormat format = new SimpleDateFormat("HH:mm");
		return format.format(date);
	}

	/**
	 * 判断是否在规定时间之内，如果在规定时间之内则返回true，否则返回false，参数如果为空，则返回false。
	 * 
	 * @return
	 */
	private boolean judgeTime(String setTime) {
		boolean result = false;

		if (StringUtils.isEmpty(setTime) || StringUtils.isBlank(setTime)) {
			// 如果参数为空则返回false
			result = false;
		}

		TypeReference<List<BillingPeriodVo>> typeRef = new TypeReference<List<BillingPeriodVo>>() {
		};
		try {
			List<BillingPeriodVo> periods = mapper.readValue(setTime, typeRef);
			Date time = timeString2Date(date2TimeString(new Date()));
			for (BillingPeriodVo period : periods) {
				Date begin = timeString2Date(period.getBeginTime());
				Date end = timeString2Date(period.getEndTime());
				if (time.before(begin) || time.after(end)) {
					// 在这个时间点之外
					result = false;
				} else {
					// 在这个时间点之内
					result = true;
				}
			}
		} catch (Exception e) {
			logger.error("judge time is error , error is :", e);
			result = false;
		}
		return result;
	}

	/**
	 * 计费屏蔽设置
	 * 
	 * @param mobilephoneProvinceno
	 * @param mobilephoneNumber
	 * @param sdkOperatorPayChannel
	 * @return 
	 *         provinceFlag为计费屏蔽标识符，0代表没有屏蔽正常计费，1代表“未找到计费省”，2代表“计费时段屏蔽”，3代表“计费号段屏蔽
	 *         ”，4代表“计费省份屏蔽”
	 */
	private Integer checkProvince(Integer mobilephoneProvinceno,
			String mobilephoneNumber,
			SdkOperatorPayChannel sdkOperatorPayChannel) {
		Integer provinceFlag = 0;
		if (mobilephoneProvinceno != 0
				&& StringUtils.isNotBlank(mobilephoneNumber)) {
			// 根据sdk_telephone手机号判断
			if (sdkOperatorPayChannel.getBillingProvinceId() != null
					&& !sdkOperatorPayChannel.getBillingProvinceId().equals(
							mobilephoneProvinceno)) {
				provinceFlag = 1;
			}
			if (StringUtils.isNotBlank(sdkOperatorPayChannel
					.getBillingPeriods())) {
				if (!judgeTime(sdkOperatorPayChannel.getBillingPeriods())) {
					provinceFlag = 2;
				}
			}
			if (StringUtils.isNotBlank(sdkOperatorPayChannel
					.getShieldingSegments())) {
				String[] segments = sdkOperatorPayChannel
						.getShieldingSegments().split(",");
				for (String seg : segments) {
					if (mobilephoneNumber.startsWith(seg)) {
						provinceFlag = 3;
					}
				}
			}
			if (StringUtils.isNotBlank(sdkOperatorPayChannel
					.getShieldingProvinceIds())) {
				String[] provinceIds = sdkOperatorPayChannel
						.getShieldingProvinceIds().split(",");
				List<String> idList = Arrays.asList(provinceIds);
				if (idList.contains(String.valueOf(mobilephoneProvinceno))) {
					provinceFlag = 4;
				}
			}
		} else if (mobilephoneProvinceno != 0) {
			// 通过sdk_telephone_centernumber短信中心号判断
			if (StringUtils.isNotBlank(sdkOperatorPayChannel
					.getShieldingProvinceIds())) {
				String[] provinceIds = sdkOperatorPayChannel
						.getShieldingProvinceIds().split(",");
				List<String> idList = Arrays.asList(provinceIds);
				if (idList.contains(String.valueOf(mobilephoneProvinceno))) {
					provinceFlag = 4;
				}
			}
		}
		return provinceFlag;
	}

	/**
	 * 获取orderNo的加密字符串
	 * 
	 * @param orderNo
	 * @return
	 */
	public String getEncryptOrderNo(String orderNo) {
		try {
			String result = "";
			String temString = orderNo.substring(2);
			String[] s = new String[6];
			for (int i = 0; i < 5; i++) {
				s[i] = temString.substring(0, 2);
				temString = temString.substring(2);
			}
			s[s.length - 1] = temString;
			for (int i = 0; i < s.length - 1; i++) {
				int number = Integer.valueOf(s[i]);
				String s1 = HexToStr(number, 61);
				result = result + s1;
			}
			String s2 = HexToStr(Integer.valueOf(s[s.length - 1]), 61);
			if (s2.length() == 2) {
				s2 = "0" + s2;
			} else if (s2.length() == 1) {
				s2 = "00" + s2;
			}
			result = result + s2;
			return result;
		} catch (Exception e) {
			logger.error("获取orderNo的加密字符串error" + e);
			return null;
		}
	}

	/**
	 * 十进制转换成shift进制
	 * 
	 * @param number
	 * @param shift
	 * @return
	 */
	public String HexToStr(int number, int shift) {
		try {
			String key = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY";
			StringBuffer sb = new StringBuffer();
			for (@SuppressWarnings("unused")
			int j = 0; number >= shift; j++) {
				int a = number % shift;
				number /= shift;
				sb.append(key.charAt(a));
			}
			sb.append(key.charAt(number));
			return sb.reverse().toString();
		} catch (Exception e) {
			logger.error("十进制转换shift进制error" + e);
			return null;
		}
	}

	/**
	 * 根据iccid获取省份id
	 * 
	 * @param iccid
	 * @return
	 */
	private int getProvinceNoByICCID(DAL dal, String iccid, String imsi) {
		int provinceNo = 0;
		if (StringUtils.isNotEmpty(iccid) && iccid.length() > 10) {
			// int opId = getOperatorByICCID(iccid);
			int opId = getOperatorByIMSI(imsi);
			if (opId == 1) {
				String ss = iccid.substring(8, 10);
				/*
				 * 北京01 天津02 河北03 山西04 内蒙古05 辽宁06 吉林07 黑龙江08 上海09 江苏10 浙江11 安徽12
				 * 福建13 江西14 山东15 河南16 湖北17 湖南18 广东19 广西20 海南21 四川22 贵州23 云南24
				 * 西藏25 陕西26 甘肃27 青海28 宁夏29 新疆30 重庆31
				 */
				if ("01".equals(ss)) {
					provinceNo = 11;
				} else if ("02".equals(ss)) {
					provinceNo = 12;
				} else if ("03".equals(ss)) {
					provinceNo = 13;
				} else if ("04".equals(ss)) {
					provinceNo = 14;
				} else if ("05".equals(ss)) {
					provinceNo = 15;
				} else if ("06".equals(ss)) {
					provinceNo = 21;
				} else if ("07".equals(ss)) {
					provinceNo = 22;
				} else if ("08".equals(ss)) {
					provinceNo = 23;
				} else if ("09".equals(ss)) {
					provinceNo = 31;
				} else if ("10".equals(ss)) {
					provinceNo = 32;
				} else if ("11".equals(ss)) {
					provinceNo = 33;
				} else if ("12".equals(ss)) {
					provinceNo = 34;
				} else if ("13".equals(ss)) {
					provinceNo = 35;
				} else if ("14".equals(ss)) {
					provinceNo = 36;
				} else if ("15".equals(ss)) {
					provinceNo = 37;
				} else if ("16".equals(ss)) {
					provinceNo = 41;
				} else if ("17".equals(ss)) {
					provinceNo = 42;
				} else if ("18".equals(ss)) {
					provinceNo = 43;
				} else if ("19".equals(ss)) {
					provinceNo = 44;
				} else if ("20".equals(ss)) {
					provinceNo = 45;
				} else if ("21".equals(ss)) {
					provinceNo = 46;
				} else if ("22".equals(ss)) {
					provinceNo = 51;
				} else if ("23".equals(ss)) {
					provinceNo = 52;
				} else if ("24".equals(ss)) {
					provinceNo = 53;
				} else if ("25".equals(ss)) {
					provinceNo = 54;
				} else if ("26".equals(ss)) {
					provinceNo = 61;
				} else if ("27".equals(ss)) {
					provinceNo = 62;
				} else if ("28".equals(ss)) {
					provinceNo = 63;
				} else if ("29".equals(ss)) {
					provinceNo = 64;
				} else if ("30".equals(ss)) {
					provinceNo = 65;
				} else if ("31".equals(ss)) {
					provinceNo = 50;
				}
			} else if (opId == 2) {
				String ss = iccid.substring(9, 11);
				/*
				 * 10内蒙古 11北京 13天津 17山东 18河北 19山西 30安徽 31上海 34江苏 36浙江 38福建 50海南
				 * 51广东 59广西 70青海 71湖北 74湖南 75江西 76河南 79西藏 81四川 83重庆 84陕西 85贵州
				 * 86云南 87甘肃 88宁夏 89新疆 90吉林 91辽宁 97黑龙江
				 */
				if ("10".equals(ss)) {
					provinceNo = 15;
				} else if ("11".equals(ss)) {
					provinceNo = 11;
				} else if ("13".equals(ss)) {
					provinceNo = 12;
				} else if ("17".equals(ss)) {
					provinceNo = 37;
				} else if ("18".equals(ss)) {
					provinceNo = 13;
				} else if ("19".equals(ss)) {
					provinceNo = 14;
				} else if ("30".equals(ss)) {
					provinceNo = 34;
				} else if ("31".equals(ss)) {
					provinceNo = 31;
				} else if ("34".equals(ss)) {
					provinceNo = 32;
				} else if ("36".equals(ss)) {
					provinceNo = 33;
				} else if ("38".equals(ss)) {
					provinceNo = 35;
				} else if ("50".equals(ss)) {
					provinceNo = 46;
				} else if ("51".equals(ss)) {
					provinceNo = 44;
				} else if ("59".equals(ss)) {
					provinceNo = 45;
				} else if ("70".equals(ss)) {
					provinceNo = 63;
				} else if ("71".equals(ss)) {
					provinceNo = 42;
				} else if ("74".equals(ss)) {
					provinceNo = 43;
				} else if ("75".equals(ss)) {
					provinceNo = 36;
				} else if ("76".equals(ss)) {
					provinceNo = 41;
				} else if ("79".equals(ss)) {
					provinceNo = 54;
				} else if ("81".equals(ss)) {
					provinceNo = 51;
				} else if ("83".equals(ss)) {
					provinceNo = 50;
				} else if ("84".equals(ss)) {
					provinceNo = 61;
				} else if ("85".equals(ss)) {
					provinceNo = 52;
				} else if ("86".equals(ss)) {
					provinceNo = 53;
				} else if ("87".equals(ss)) {
					provinceNo = 62;
				} else if ("88".equals(ss)) {
					provinceNo = 64;
				} else if ("89".equals(ss)) {
					provinceNo = 65;
				} else if ("90".equals(ss)) {
					provinceNo = 22;
				} else if ("91".equals(ss)) {
					provinceNo = 21;
				} else if ("97".equals(ss)) {
					provinceNo = 23;
				}
			} else if (opId == 3) {
				String areacode = iccid.substring(10, 13);
				int areacodeInt = parseInteger(areacode);
				SdkCityAddrMapper sdkCityAddrMapper = dal
						.getMapper(SdkCityAddrMapper.class);
				SdkCityAddrExample sdkCityAddrExample = new SdkCityAddrExample();
				sdkCityAddrExample.createCriteria().andIdEqualTo(areacodeInt);
				SdkCityAddr sdkCityAddr = sdkCityAddrMapper
						.selectOne(sdkCityAddrExample);
				if (sdkCityAddr != null) {
					String provinceId = sdkCityAddr.getProvinceId();
					if (provinceId.length() >= 2) {
						provinceId = provinceId.substring(0, 2);
					}
					provinceNo = parseInteger(provinceId);
				}
			}
		}
		return provinceNo;
	}

	/**
	 * 获取下一个计费点策略ID,找不到返回0，或者没有下一个策略ID也返回0
	 * 
	 * @param paytactics
	 * @param currentPaytactics
	 * @return
	 */
	private Integer getNextPaytactics(String paytactics,
			Integer currentPaytactics) {
		Integer result = 0;
		try {
			if (StringUtils.isEmpty(paytactics)
					|| StringUtils.isBlank(paytactics)) {
				result = 0;
			} else {
				if (paytactics.contains(",")) {
					String[] paytacticArrays = paytactics.split(",");
					for (int i = 0; i < paytacticArrays.length; i++) {
						String currentPaytacticsString = String
								.valueOf(currentPaytactics);
						if (currentPaytacticsString.equals(paytacticArrays[i])) {
							if (i + 1 >= paytacticArrays.length) {
								result = 0;
							} else {
								result = Integer
										.valueOf(paytacticArrays[i + 1]);
							}
						}
					}
				} else {
					result = 0;
				}
			}
		} catch (Exception e) {
			logger.error("获取下一个计费点策略ID出错" + e);
		}
		return result;
	}

	/**
	 * 用于在订单失败的情况下，在sdk_order表和sdk_order_mmdo表插入一条记录。
	 */
	private void insertFaileOrderInfo(CmdPay cmd, DAL dal,
			SdkMmdoSetting sdkMmdoSetting, SdkOrder sdkOrder,
			SdkOperatorPayChannel channel, int sdkOrder_status,
			String sdkOrder_statusdetail) {
		SdkOrderMmdoMapper mmdoMapper = dal.getMapper(SdkOrderMmdoMapper.class);
		SdkOrderMmdo mmdo = new SdkOrderMmdo();
		mmdo.setReqImsi(imsiParam);
		mmdo.setReqOrderAmount(realamount);
		mmdo.setReqSendContent(sdkMmdoSetting.getContent());
		mmdo.setReqSendNumber(sdkMmdoSetting.getNumber());
		mmdo.setReqTime(new Date());
		mmdo.setGameId(gameSession.getGameId());
		mmdo.setOperationType(opId);
		mmdo.setUid(gameSession.getUid());
		mmdo.setImei(imeiParam);
		mmdo.setMacAddr(cmd.getServiceContext().getRequest()
				.getParameter("mac"));
		mmdo.setIpAddr(cmd.getRequestHost());
		mmdo.setRawData(cmd.getServiceContext().getRequest()
				.getParameter("imsi"));
		mmdo.setPayChannelCode(channel.getChannelCode());
		if (sdkMmdoSetting.getTjpropsname() != null) {
			mmdo.setTjpropsname(sdkMmdoSetting.getTjpropsname());
		}
		mmdo.setTradeid(outtradeid);
		mmdo.setRespStatus(0);
		if (!orderIfOver30m) {
			mmdo.setOverThirtym(1);
		} else {
			mmdo.setOverThirtym(0);
		}
		mmdo.setMobilephone(mobilephoneNumber);
		mmdo.setProvinceNo(mobilephoneProvinceno);
		mmdo.setIccid(iccidParam);
		mmdo.setCenternumber(mobilephoneCenterNumber);

		mmdoMapper.insertSelective(mmdo);

		SdkOrderMapper mapperOrder = dal.getMapper(SdkOrderMapper.class);
		sdkOrder.setPayId(mmdo.getPayId());
		sdkOrder.setAmount(realamount);
		sdkOrder.setStatus(sdkOrder_status);
		sdkOrder.setStatusDetail(sdkOrder_statusdetail);
		sdkOrder.setSdkver(sdkver_Param);
		mapperOrder.insert(sdkOrder);

		// 添加回调订单
		insertSdkNotifyMmdoInfo(dal, sdkOrder, mmdo, channel);

		dal.commit();
	}

	/**
	 * 对sdk_notify_mmdo表插入一条数据，状态初始化为0，即默认失败
	 * 
	 * @param dal
	 * @param sdkOrder
	 * @param sdkOrderMmdo
	 * @param channel
	 */
	private void insertSdkNotifyMmdoInfo(DAL dal, SdkOrder sdkOrder,
			SdkOrderMmdo sdkOrderMmdo, SdkOperatorPayChannel channel) {
		if ("SDKTPPAY".equalsIgnoreCase(channel.getChannelCode())
				|| "SDKXQTPAY".equalsIgnoreCase(channel.getChannelCode())
				|| "CMCCRDOXINHUALESHI".equalsIgnoreCase(channel
						.getChannelCode())
				|| "TELECOMLANGTIAN".equalsIgnoreCase(channel.getChannelCode())
				|| "CTCCLOVEMUSIC".equalsIgnoreCase(channel.getChannelCode())
				|| "SDKBAIXUN".equalsIgnoreCase(channel.getChannelCode())
				|| "SDKBAIXUN_XLMCG".equalsIgnoreCase(channel.getChannelCode())
				|| SDKBAIXUN_TTXHB.equalsIgnoreCase(channel.getChannelCode())
				|| SDKBAIXUN_GTYX.equalsIgnoreCase(channel.getChannelCode())
				|| SDKBAIXUN_WSDZZ.equalsIgnoreCase(channel.getChannelCode())
				|| SDKBAIXUN_CKZZ.equalsIgnoreCase(channel.getChannelCode())
				|| "CMCCMMWATERWEST".equalsIgnoreCase(channel.getChannelCode())
				|| "CMCCMMBAIXUNLINGDONGURL".equalsIgnoreCase(channel
						.getChannelCode())
				|| "CUCCMUSICBASE".equalsIgnoreCase(channel.getChannelCode())
				|| "CMCCGAMEBASE".equalsIgnoreCase(channel.getChannelCode())
				|| "SDKQIPAPAY".equalsIgnoreCase(channel.getChannelCode())
				|| "SDKZHUQUEPAY".equalsIgnoreCase(channel.getChannelCode())
				|| "CUCCYIJIAN".equalsIgnoreCase(channel.getChannelCode())
				|| "CUCCZHANGYUNZY".equalsIgnoreCase(channel.getChannelCode())
				|| "SDKCMCCJIUTIANMIGU".equalsIgnoreCase(channel.getChannelCode())
				|| "CUCCYIJIANWOMUSIC".equalsIgnoreCase(channel.getChannelCode())
				|| "CTCCXINWANG".equalsIgnoreCase(channel.getChannelCode())
				|| "CMCCYONGZHENG".equalsIgnoreCase(channel.getChannelCode())
				|| "CMCCMOPINGDONGMAN".equalsIgnoreCase(channel.getChannelCode())
				) {
			SdkNotifyMmdoMapper sdkNotifyMmdoMapper = dal
					.getMapper(SdkNotifyMmdoMapper.class);
			SdkNotifyMmdo sdkNotifyMmdo = new SdkNotifyMmdo();
			sdkNotifyMmdo.setOrderNo(sdkOrder.getOrderNo());
			if (StringUtils.isNotBlank(sdkOrderMmdo.getTradeid())) {
				sdkNotifyMmdo.setLinkid(sdkOrderMmdo.getTradeid());
			}
			sdkNotifyMmdo.setSpid(sdkOrderMmdo.getReqSendContent());
			sdkNotifyMmdo.setCmd(sdkOrderMmdo.getReqSendContent());
			SdkTelephoneMapper sdkTelephoneMapper = dal
					.getMapper(SdkTelephoneMapper.class);
			SdkTelephoneExample sdkTelephoneExample = new SdkTelephoneExample();
			String imsi = "";
			if (StringUtils.isNotBlank(sdkOrderMmdo.getReqImsi())) {
				imsi = sdkOrderMmdo.getReqImsi();
			}
			sdkTelephoneExample.createCriteria().andImsiEqualTo(imsi);
			SdkTelephone sdkTelephone = sdkTelephoneMapper
					.selectOne(sdkTelephoneExample);
			if (sdkTelephone != null) {
				sdkNotifyMmdo.setKey(String.valueOf(sdkTelephone
						.getProvinceNo()));
				sdkNotifyMmdo.setMobile(sdkTelephone.getMobilephone());
			}
			sdkNotifyMmdo.setSpnum(sdkOrderMmdo.getReqSendNumber());
			sdkNotifyMmdo.setGameId(sdkOrderMmdo.getGameId());
			sdkNotifyMmdo.setAmount(sdkOrderMmdo.getReqOrderAmount());
			sdkNotifyMmdo.setCreateTime(new Date());
			sdkNotifyMmdo.setOperationType(sdkOrderMmdo.getOperationType());
			sdkNotifyMmdo.setPayChannelCode(sdkOrderMmdo.getPayChannelCode());
			int additionalStatus = 0;
			if (sdkOrderMmdo.getAdditionalStatus() == null) {
				additionalStatus = 0;
			} else {
				additionalStatus = 1;
			}
			sdkNotifyMmdo.setAdditionalStatus(additionalStatus);
			// 初始化状态为0
			sdkNotifyMmdo.setNotifyStatus(0);
			sdkNotifyMmdoMapper.insertSelective(sdkNotifyMmdo);
		}
		dal.commit();
	}

	@Override
	protected boolean isLoginRequired() {
		return true;
	}

	
	
	private WimipaySms getMmpmWimi(String imsi, String imei, String wimicode)
			throws Exception {
		HttpClient httpclient = new DefaultHttpClient();
		try {
			String url = Cfg.cfg.getString("sdk.wimipay.smscotent.url");
			StringBuffer query = new StringBuffer(url);
			if (url.contains("?")) {
				query.append("&");
			} else {
				query.append("?");
			}
			query.append("imsi=").append(imsi);
			query.append("&imei=").append(imei);
			query.append("&wimicode=").append(wimicode);
			query.append("&extData=").append(gameSession.getGameId());

			HttpGet httpGet = new HttpGet(query.toString());
			HttpResponse response = httpclient.execute(httpGet);
			HttpEntity entity = response.getEntity();

			logger.debug("mmpm wimi response: " + response);

			String content = EntityUtils.toString(entity, "UTF-8");

			logger.debug("mmpm wimi response content - content = " + content);

			XMap xmap = new XMap();
			xmap.register(WimipaySms.class);
			ByteArrayInputStream in = new ByteArrayInputStream(
					content.getBytes("utf-8"));
			WimipaySms sms = (WimipaySms) xmap.load(in);
			if ("200".equals(sms.getSmsPort())) {
				logger.error("get mmpm wimi error, content = " + content);
			}
			return sms;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
	}

	private String getLeyifuPm(String imsi, String imei, float price,
			String orderNo) {
		HttpClient httpclient = new DefaultHttpClient();
		String content = null;
		String decContent = null;
		try {
			String url = Cfg.cfg.getString("sdk.leyifupm.smscotent.url");
			StringBuffer query = new StringBuffer(url);
			if (url.contains("?")) {
				query.append("&");
			} else {
				query.append("?");
			}
			query.append("imsi=").append(imsi);
			query.append("&imei=").append(imei);
			query.append("&price=").append((int) (price * 100));
			// String cpparam = "Z000000000000" + gameId;
			String cpparam = "Z" + orderNo;
			query.append("&cpparam=").append(cpparam);

			HttpGet httpGet = new HttpGet(query.toString());
			HttpResponse response = httpclient.execute(httpGet);
			HttpEntity entity = response.getEntity();

			logger.debug("leyifupm get sms response: " + response);

			content = EntityUtils.toString(entity, "UTF-8");

			logger.debug("leyifupm get sms - content = " + content);
			if ("error".equals(content) || "0".equals(content)) {
				decContent = content;
			} else {
				byte[] decBytes = Base64.decodeBase64(content);
				decContent = new String(decBytes, "UTF-8");
			}
		} catch (Exception e) {
			logger.error("leyifupm get sms - content = " + content, e);
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return decContent;
	}

	private WoplusSmsRes fetchWoplusSms(SdkOrder order, float amount,
			String imsi, String imei, String payPassageCode) throws Exception {
		HttpClient httpclient = new DefaultHttpClient();
		WoplusSmsRes res = new WoplusSmsRes();
		try {
			String smsUrl;
			String platformId;
			String password;
			String callbackUrl;
			if (WO_PLUS_YOUQU.equals(payPassageCode)) {
				smsUrl = Cfg.cfg.getString("sdk.woplusyouqu.smscontent.url");
				platformId = Cfg.cfg.getString("sdk.woplusyouqu.platformId");
				password = Cfg.cfg.getString("sdk.woplusyouqu.password");
				callbackUrl = Cfg.cfg.getString("sdk.woplusyouqu.callback.url");
			} else {
				smsUrl = Cfg.cfg.getString("sdk.woplus.smscontent.url");
				platformId = Cfg.cfg.getString("sdk.woplus.platformId");
				password = Cfg.cfg.getString("sdk.woplus.password");
				callbackUrl = Cfg.cfg.getString("sdk.woplus.callback.url");
			}

			logger.debug("the wo+ fetch sms api = " + smsUrl);

			HttpPost post = new HttpPost(smsUrl);
			post.setHeader("Authorization",
					String.format(WO_PLUS_AUTHORIZATION, platformId, password));
			post.setHeader("Accept", "application/json;charset=UTF-8");
			post.setHeader("Content-type", "application/json;charset=UTF-8");

			WoplusSmsReq req = new WoplusSmsReq();
			req.setAppKey(game.getAppKey());
			req.setAppName(game.getName());
			req.setCallbackData(String.valueOf(game.getGameId()));
			req.setCallbackUrl(callbackUrl);
			req.setDescription("");
			req.setDeveloperId("");
			req.setDeveloperName("");
			req.setIapId("");
			req.setImei(imei);
			req.setImsi(imsi);
			req.setOutTradeNo(order.getOrderNo());
			req.setPrice(amount);
			req.setQuantity(1);
			req.setSignType("HMAC-SHA1");
			req.setSubject(amount + "元");
			req.setTimeStamp(DateFormatUtils.format(order.getCreateTime(),
					"yyyyMMddHHmmss"));
			req.setTotalFee(amount);
			String signature = signWoplus(req, platformId, password);
			req.setSignature(signature);

			String jsonBody = mapper.writeValueAsString(req);
			logger.debug("the wo+ request sms body = " + jsonBody);
			logger.info("the wo+ request sms body = " + jsonBody);
			post.setEntity(new StringEntity(jsonBody, "UTF-8"));
			HttpResponse response = httpclient.execute(post);

			HttpEntity entity = response.getEntity();
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the wo+ fetch sms response = " + content);
			res = mapper.readValue(content, WoplusSmsRes.class);
			if (!"0".equals(res.getResultCode())) {
				logger.error("the wo+ fetch sms error, content = " + content);
			}
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return res;
	}

	private String signWoplus(WoplusSmsReq req, String platformId,
			String password) throws Exception {
		Map<String, Object> map = new TreeMap<String, Object>();
		BeanInfo bean = Introspector.getBeanInfo(req.getClass());
		PropertyDescriptor[] propertyDescriptors = bean
				.getPropertyDescriptors();
		for (PropertyDescriptor descriptor : propertyDescriptors) {
			String propertyName = descriptor.getName();
			if (!"class".equals(propertyName)) {
				Method readMethod = descriptor.getReadMethod();
				Object result = readMethod.invoke(req);
				if (result != null) {
					map.put(propertyName, result);
				} else {
					map.put(propertyName, null);
				}
			}
		}

		StringBuffer query = new StringBuffer();
		for (String key : map.keySet()) {
			if ("signType".equals(key) || "signature".equals(key)
					|| map.get(key) == null) {
				continue;
			}
			query.append(key).append("=").append(map.get(key)).append("&");
		}
		if (query.length() > 0) {
			query.deleteCharAt(query.length() - 1);
		}
		logger.debug("the wo+ sign string = " + query.toString());
		String encKey = platformId + "&" + password;
		// String encKey = "846edcfe-a7a3-464f-8115-11459022d33e" + "&" +
		// "yk19840529";
		return Hmacsha1.sign(query.toString(), encKey);
	}

	private XmlMobileGameBaseSinglePm getMobileGameBaseSinglePm(String url,
			String imsi, String imei, String consumercode) {
		HttpClient httpclient = new DefaultHttpClient();
		String content = null;
		XmlMobileGameBaseSinglePm pm = null;
		try {
			StringBuffer query = new StringBuffer(url);
			if (url.contains("?")) {
				query.append("&");
			} else {
				query.append("?");
			}
			query.append("imsi=").append(imsi);
			query.append("&imei=").append(imei);
			query.append("&consumercode=").append(consumercode);

			HttpGet httpGet = new HttpGet(query.toString());
			HttpResponse response = httpclient.execute(httpGet);
			HttpEntity entity = response.getEntity();

			logger.debug("mobilegamebasesinglepm get sms response: " + response);

			content = EntityUtils.toString(entity, "UTF-8");

			logger.debug("mobilegamebasesinglepm get sms - content = "
					+ content);
			content = content.replaceAll("&", "&amp;");
			logger.debug("mobilegamebasesinglepm get sms - escape content = "
					+ content);
			XMap xmap = new XMap();
			xmap.register(XmlMobileGameBaseSinglePm.class);
			ByteArrayInputStream in = new ByteArrayInputStream(
					content.getBytes("utf-8"));
			pm = (XmlMobileGameBaseSinglePm) xmap.load(in);
			pm.setSmsContent(StringEscapeUtils.unescapeXml(pm.getSmsContent()));
			logger.debug("mobilegamebasesinglepm get sms - unescape sms content = "
					+ pm.getSmsContent());
		} catch (Exception e) {
			logger.error("mobilegamebasesinglepm get sms - content = "
					+ content, e);
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return pm;
	}

	private List<PaySmsInfo> fetchCmccYxjddjLtzyc(String url, String imsi,
			String imei, String consumercode) {
		HttpClient httpclient = new DefaultHttpClient();
		String content = null;
		try {
			StringBuffer query = new StringBuffer(url);
			if (url.contains("?")) {
				query.append("&");
			} else {
				query.append("?");
			}
			query.append("imei=").append(imei);
			query.append("&imsi=").append(imsi);
			query.append("&code=").append(consumercode);
			query.append("&brand=Xiaomi");
			query.append("&model=2013022");

			logger.debug("the cmccyxjddjltzyc url is : " + query.toString());
			logger.info("the cmccyxjddjltzyc url is : " + query.toString());
			HttpGet httpGet = new HttpGet(query.toString());
			HttpResponse response = httpclient.execute(httpGet);
			HttpEntity entity = response.getEntity();

			InputStream instream = entity.getContent();
			BufferedReader reader = new BufferedReader(new InputStreamReader(
					instream, "UTF-8"));
			List<String> lines = new ArrayList<String>();
			String line = "";
			StringBuffer buff = new StringBuffer();
			while ((line = reader.readLine()) != null) {
				buff.append(line).append("\r\n");
				if (line.contains("registSMS") || line.contains("chargeSMS")) {
					lines.add(line);
				}
			}

			content = buff.toString();
			logger.debug("cmccyxjddj fetch sms, content = " + content);

			if (lines.size() != 2) {
				logger.error("lines size cmccyxjddj fetch sms error, content = "
						+ content);
				return null;
			}

			List<PaySmsInfo> infos = new ArrayList<PaySmsInfo>();
			String regPrefix = "registSMS=";
			String payPrefix = "chargeSMS=";
			for (String str : lines) {
				PaySmsInfo info = new PaySmsInfo();
				info.setRight(true);
				if (str.startsWith(regPrefix)) {
					info.setUpPort(Cfg.cfg
							.getString("sdk.cmccyxjddjltzyc.regport"));
					info.setUpContent(str.substring(regPrefix.length()));
				} else {
					info.setUpPort(Cfg.cfg
							.getString("sdk.cmccyxjddjltzyc.payport"));
					info.setUpContent(str.substring(payPrefix.length()));
				}
				infos.add(info);
			}

			logger.debug("cmccyxjddj fetch sms list, list = " + infos);

			return infos;
		} catch (Exception e) {
			logger.error("cmccyxjddj fetch sms error, content = " + content, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
	}

	public String getMobileSinaLongphoneAndCode() throws Exception {
		HttpClient httpclient = new DefaultHttpClient();
		try {
			// 获取用新浪发送短信时的指令和长号码
			String sendUrl = sinaSendSmsgetLongphoneAndCode;
			logger.debug("the mobile send api = " + sendUrl);
			HttpPost httpost = new HttpPost(sendUrl);
			logger.debug("第一次请求内容是：" + httpost.getURI());
			HttpResponse response = httpclient.execute(httpost);
			HttpEntity entity = response.getEntity();
			logger.debug("the mobile send response: " + response);
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the mobile send response content - content = "
					+ content);
			return content;
		} catch (Exception e) {
			logger.error("the first request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
	}

	public IdoSms getIdoSms(String idocode) throws Exception {
		HttpClient httpclient = new DefaultHttpClient();
		IdoSms idosms = new IdoSms();
		try {
			// 获取用移动阅读基地发送短信时内容
			String sendUrl = idoUrl;
			logger.debug("the ido send api = " + sendUrl);
			// logger.info("the ido send api = " + sendUrl);
			String plaintext = idoChannel + idoSecretkey;
			logger.debug("before md5 the plaintext is：" + plaintext);
			// logger.info("before md5 the plaintext is：" + plaintext);
			String md5string = DigestUtils.md5Hex(plaintext);
			String base64string = Base64.encodeBase64String(md5string
					.getBytes());
			StringBuffer query = new StringBuffer(sendUrl);
			query.append("?");
			query.append("channel=").append(idoChannel);
			query.append("&feeCode=").append(idocode);
			HttpGet httpget = new HttpGet(query.toString());
			logger.debug("the ido send url = " + query.toString());
			// logger.info("the ido send url = " + query.toString());
			httpget.addHeader("clientHash", base64string);
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			logger.debug("the ido send response: " + response);
			// logger.info("the ido send response: " + response);
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the ido send response content - content = " + content);
			// logger.info("the ido send response content - content = " +
			// content);
			idosms = mapper.readValue(content, IdoSms.class);
		} catch (Exception e) {
			logger.error("the ido request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return idosms;
	}

	/*
	 * mm弱联网网络获取:mms方式
	 */
	private String getWnmms(String pid) {
		HttpClient httpclient = new DefaultHttpClient();
		try {
			String sendUrl = wn_mms_Url;
			logger.debug("the wnmms api = " + sendUrl);
			logger.info("the wnmms api = " + sendUrl);
			StringBuffer query = new StringBuffer(sendUrl);
			query.append("pid=").append(pid);
			query.append("&appid=").append(wn_mms_appid);
			query.append("&number=").append("1");
			query.append("&channel=").append("0000000000");
			query.append("&data=").append("1");
			HttpGet httpget = new HttpGet(query.toString());
			logger.debug("the wnmms send url = " + query.toString());
			logger.info("the wnmms send url = " + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			logger.debug("the wnmms send response: " + response);
			logger.info("the wnmms send response: " + response);
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the wnmms send response content - content = "
					+ content);
			logger.info("the wnmms send response content - content = "
					+ content);
			return content;
		} catch (Exception e) {
			logger.error("the wnmms request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
	}

	/*
	 * mm弱联网网络获取:gzmtx方式
	 */
	private String getWngzmtx(String imei, String imsi, String code,
			String gameid, String paychannelcode) {
		HttpClient httpclient = new DefaultHttpClient();
		try {
			String sendUrl = wn_gzmtx_url;
			logger.debug("the gzmtx api = " + sendUrl);
			logger.info("the gzmtx api = " + sendUrl);
			StringBuffer query = new StringBuffer(sendUrl);
			query.append("&imei=").append(imei);
			query.append("&imsi=").append(imsi);
			query.append("&code=").append(code);
			// String data="0000000000000000";
			String dataString = gameid + "," + paychannelcode;
			String data = Base64.encodeBase64String(dataString.getBytes());
			query.append("&data=").append(data);
			HttpGet httpget = new HttpGet(query.toString());
			logger.debug("the gzmtx send url = " + query.toString());
			logger.info("the gzmtx send url = " + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			logger.debug("the gzmtx send response: " + response);
			logger.info("the gzmtx send response: " + response);
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the gzmtx send response content - content = "
					+ content);
			logger.info("the gzmtx send response content - content = "
					+ content);
			return content;
		} catch (Exception e) {
			logger.error("the gzmtx request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
	}

	/*
	 * 获取联通讯翔短信指令内容
	 */
	private JsonCuccXxSms getCuccxx(String orderid, String productid,
			String paycode) {
		HttpClient httpclient = new DefaultHttpClient();
		JsonCuccXxSms jsonCuccXxSms = new JsonCuccXxSms();
		try {
			String sendUrl = cuccxxUrl;
			logger.debug("the cuccxx send api = " + sendUrl);
			// logger.info("the cuccxx send api = " + sendUrl);
			StringBuffer query = new StringBuffer(sendUrl);
			String account = Cfg.cfg.getString("sdk.cuccxx.account");
			query.append("account=").append(account);
			query.append("&orderid=").append(orderid);
			query.append("&productid=").append(productid);
			query.append("&paycode=").append(paycode);
			SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmss");
			Date date = new Date();
			String timestamp = format.format(date);
			query.append("&timestamp=").append(timestamp);
			String key = Cfg.cfg.getString("sdk.cuccxx.key");
			String plaintext = orderid + productid + timestamp + key;
			logger.debug("before md5 the cuccxx plaintext is：" + plaintext);
			String verfiy = DigestUtils.md5Hex(plaintext);
			query.append("&verfiy=").append(verfiy);
			HttpGet httpget = new HttpGet(query.toString());
			logger.debug("the cuccxx send url = " + query.toString());
			// logger.info("the cuccxx send url = " + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			logger.debug("the cuccxx send response: " + response);
			// logger.info("the cuccxx send response: " + response);
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the cuccxx send response content - content = "
					+ content);
			// logger.info("the cuccxx send response content - content = " +
			// content);
			jsonCuccXxSms = mapper.readValue(content, JsonCuccXxSms.class);
		} catch (Exception e) {
			logger.error("the cuccxx request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return jsonCuccXxSms;
	}

	/*
	 * 获取掌盟支付短信指令内容 适合联通，电信，移动MM弱联网
	 */
	private String getZmzf(String imei, String imsi, String price,
			String orderNo, String ipaddr) {
		HttpClient httpclient = new DefaultHttpClient();
		String result = "";
		try {
			String sendUrl = zmzfUrl;
			logger.debug("the zmzf send api = " + sendUrl);
			// logger.info("the cuccxx send api = " + sendUrl);
			StringBuffer query = new StringBuffer(sendUrl);
			String pid = Cfg.cfg.getString("sdk.zmzf.pid");
			query.append("pid=").append(pid);
			query.append("&imei=").append(imei);
			query.append("&imsi=").append(imsi);
			query.append("&price=").append(price);
			query.append("&tradeid=").append(orderNo);
			query.append("&ipaddr=").append(ipaddr);
			HttpGet httpget = new HttpGet(query.toString());
			logger.debug("the zmzf send url = " + query.toString());
			// logger.info("the cuccxx send url = " + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			logger.debug("the zmzf send response: " + response);
			// logger.info("the cuccxx send response: " + response);
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the zmzf send response content - content = "
					+ content);
			// logger.info("the cuccxx send response content - content = " +
			// content);
			result = content;
		} catch (Exception e) {
			logger.error("the zmzf request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return result;
	}

	/*
	 * mm弱联网网络获取:哥会飞渠道 cmccgzmtx
	 */
	private String getCmccgzmtx(String imei, String imsi, String code,
			String gameid, String paychannelcode) {
		HttpClient httpclient = new DefaultHttpClient();
		try {
			String sendUrl = cmcc_gzmtx_url;
			logger.debug("the cmccgzmtx api = " + sendUrl);
			StringBuffer query = new StringBuffer(sendUrl);
			String appKey = Cfg.cfg.getString("sdk.cmccgzmtx.appKey");
			query.append("&appKey=").append(appKey);
			String channelId = Cfg.cfg.getString("sdk.cmccgzmtx.channelId");
			query.append("&channelId=").append(channelId);
			query.append("&imei=").append(imei);
			query.append("&imsi=").append(imsi);
			query.append("&code=").append(code);
			String dataString = gameid + "," + paychannelcode;
			String data = Base64.encodeBase64String(dataString.getBytes());
			query.append("&data=").append(data);
			HttpGet httpget = new HttpGet(query.toString());
			logger.debug("the cmccgzmtx send url = " + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			logger.debug("the cmccgzmtx send response: " + response);
			logger.info("the cmccgzmtx send response: " + response);
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the cmccgzmtx send response content - content = "
					+ content);
			return content;
		} catch (Exception e) {
			logger.error("the cmccgzmtx request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
	}

	/*
	 * 中移游-西游塔防 网络获取
	 */
	private String getCmccXydfSms(String imei, String imsi) {
		HttpClient httpclient = new DefaultHttpClient();
		try {
			String sendUrl = cmcc_xytf_url;
			logger.debug("the cmccxytf api = " + sendUrl);
			StringBuffer query = new StringBuffer(sendUrl);
			query.append("imei=").append(imei);
			query.append("&imsi=").append(imsi);
			String appKey = Cfg.cfg.getString("sdk.cmccxytf.key");
			query.append("&appKey=").append(appKey);
			HttpGet httpget = new HttpGet(query.toString());
			logger.debug("the cmccxytf send url = " + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			logger.debug("the cmccxytf send response: " + response);
			logger.info("the cmccxytf send response: " + response);
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the cmccxytf send response content - content = "
					+ content);
			return content;
		} catch (Exception e) {
			logger.error("the cmccxytf request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
	}

	/*
	 * 联通沃加离线 woplusoffline
	 */
	private String getWoPlusOffLineSmsContent(String appName,
			final SdkWoplusOfflinePaySms paySms) {
		String content1 = "21";

		String content2 = " 1";

		String content3 = Cfg.cfg
				.getString("sdk.external.unicom.woplusoffline.channelid");// channelId
		if (content3.length() < 36) {
			content3 = StringUtils.leftPad(content3, 36);
		} else if (content3.length() > 36) {
			return errorSms(paySms, "channelId超过36个字符", null);
		}

		String content4;
		try {
			content4 = Hex.encodeHexString(appName.getBytes("GBK"))
					.toUpperCase();
			if (content4.length() < 24) {
				content4 = StringUtils.leftPad(content4, 24);
			} else if (content4.length() > 24) {
				return errorSms(paySms, "应用名称 = " + appName + ",字节数超过24位", null);
			}
		} catch (UnsupportedEncodingException e) {
			return errorSms(paySms, "应用名称 = " + appName + ",转换GBK字节数组错误", e);
		}

		String content5 = Cfg.cfg
				.getString("sdk.external.unicom.woplusoffline.apptype");

		String content6;
		try {
			content6 = Hex.encodeHexString(
					paySms.getProductName().getBytes("GBK")).toUpperCase();
			if (content6.length() < 24) {
				content6 = StringUtils.leftPad(content6, 24);
			} else if (content6.length() > 24) {
				return errorSms(paySms, "商品名称 = " + paySms.getProductName()
						+ ",字节数超过24个", null);
			}
		} catch (UnsupportedEncodingException e) {
			return errorSms(paySms, "商品名称 = " + paySms.getProductName()
					+ ",转换GBK字节数组错误", e);
		}

		int amount = (int) (paySms.getMoney() * 100);
		String content8 = Integer.toHexString(amount);
		if (content8.length() < 4) {
			content8 = StringUtils.leftPad(content8, 4);
		} else if (content8.length() > 4) {
			return errorSms(paySms, "商品价格 = " + amount + "分,不能超过9999分", null);
		}

		String content7 = Cfg.cfg
				.getString("sdk.external.unicom.woplusoffline.producttype");

		String content9 = Cfg.cfg
				.getString("sdk.external.unicom.woplusoffline.paytype");

		String content10 = String.valueOf(paySms.getId());
		if (content10.length() < 11) {
			content10 = StringUtils.leftPad(content10, 11);
		} else if (content10.length() > 11) {
			return errorSms(paySms, "支付ID = " + paySms.getId() + ",长度不能超过11位",
					null);
		}

		String srcStr = content1.trim()
				+ content2.trim()
				+ content3.trim()
				+ content4.trim()
				+ content5.trim()
				+ content6.trim()
				+ content8.trim()
				+ content7.trim()
				+ content9.trim()
				+ content10.trim()
				+ Cfg.cfg
						.getString("sdk.external.unicom.woplusoffline.signkey1")
				+ Cfg.cfg
						.getString("sdk.external.unicom.woplusoffline.signkey2");
		String sign = DigestUtils.md5Hex(srcStr);
		String content = content1 + content2 + content3 + content4 + content5
				+ content6 + content8 + content7 + content9 + content10 + sign;
		paySms.setSmsContent(content);
		return content;
	}

	/*
	 * 联通沃加离线 woplusoffline 报错
	 */
	private String errorSms(final SdkWoplusOfflinePaySms paySms, String err,
			Exception e) {
		paySms.setStatus((byte) -1);
		paySms.setSmsContent(err);
		if (e != null) {
			logger.error(err);
		} else {
			logger.error(err, e);
		}

		return "error";
	}

	/**
	 * 用于中移动MM-深圳首游
	 * 
	 * @param args
	 * @throws Exception
	 */
	private XmlCmccmmSzsyRes getCmccmmSzsy(String imsi, String imei,
			String fee, String orderNo, String ip) {
		HttpClient httpclient = new DefaultHttpClient();
		XmlCmccmmSzsyRes res = new XmlCmccmmSzsyRes();
		try {
			String sendUrl = Cfg.cfg.getString("sdk.cmccmmszsy.url");
			;
			logger.debug("the cmccmmszsy api = " + sendUrl);
			StringBuffer query = new StringBuffer(sendUrl);
			query.append("?");
			String cpid = Cfg.cfg.getString("sdk.cmccmmszsy.cpid");
			query.append("cpid=").append(cpid);
			query.append("&imsi=").append(imsi);
			query.append("&imei=").append(imei);
			query.append("&fee=").append(fee);
			query.append("&ext=").append(orderNo);
			query.append("&ip=").append(ip);
			HttpGet httpget = new HttpGet(query.toString());
			logger.debug("the cmccmmszsy send url = " + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			logger.debug("the cmccmmszsy send response: " + response);
			// logger.info("the cmccmmszsy send response: " + response);
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the cmccmmszsy send response content - content = "
					+ content);
			res = mapper.readValue(content, XmlCmccmmSzsyRes.class);
			return res;
		} catch (Exception e) {
			logger.error("the cmccmmszsy request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
	}

	/**
	 * 联通易简支付通道
	 * 
	 * @param paramString1
	 * @param paramString2
	 * @return
	 */
	private JsonCuccYijianRes getCuccYijianContent(String orderId,
			String money, String imsi, String imei, String ipAddr,
			String extData, String feeName) {
		HttpClient httpclient = new DefaultHttpClient();
		JsonCuccYijianRes jsonCuccYijianRes = new JsonCuccYijianRes();
		try {
			String sendUrl = Cfg.cfg.getString("sdk.cuccyijian.url");
			logger.debug("the cuccyijian send api = " + sendUrl);
			// logger.info("the cuccxx send api = " + sendUrl);
			HttpPost post = new HttpPost(sendUrl);
			JsonCuccYijianReqChannel jsonCuccYijianReqChannel = new JsonCuccYijianReqChannel();
			jsonCuccYijianReqChannel.setIpAddr(ipAddr);
			jsonCuccYijianReqChannel.setExtData(extData);
			String appId = Cfg.cfg.getString("sdk.cuccyijian.appId");
			jsonCuccYijianReqChannel.setAppId(appId);
			jsonCuccYijianReqChannel.setImei(imei);
			jsonCuccYijianReqChannel.setMoney(money);
			jsonCuccYijianReqChannel.setFeeName(feeName);
			jsonCuccYijianReqChannel.setImsi(imsi);
			jsonCuccYijianReqChannel.setOrderId(orderId);
			JsonCuccYijianReqParam jsonCuccYijianReqParam = new JsonCuccYijianReqParam();
			String version = Cfg.cfg.getString("sdk.cuccyijian.version");
			jsonCuccYijianReqParam.setVersion(version);
			String operation = Cfg.cfg.getString("sdk.cuccyijian.operation");
			jsonCuccYijianReqParam.setOperation(operation);
			jsonCuccYijianReqParam.setReqChannel(jsonCuccYijianReqChannel);
			;
			String jsonBody = mapper.writeValueAsString(jsonCuccYijianReqParam);
			logger.debug("the cuccyijian send jsonBody = " + jsonBody);
			logger.info("the cuccyijian send jsonBody = " + jsonBody);
			post.setEntity(new ByteArrayEntity(jsonBody.getBytes()));
			HttpResponse response = httpclient.execute(post);
			HttpEntity entity = response.getEntity();
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the cuccyijian response = " + content);
			logger.info("the cuccyijian response = " + content);
			jsonCuccYijianRes = mapper.readValue(content,
					JsonCuccYijianRes.class);
			logger.debug("the cuccyijian jsonCuccYijianRes ="
					+ jsonCuccYijianRes.toString());
//			 logger.info("the cuccyijian jsonCuccYijianRes ="+jsonCuccYijianRes.toString());
		} catch (Exception e) {
			logger.error("the cuccyijian request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return jsonCuccYijianRes;
	}

	/**
	 * 电信朗天获取短信内容
	 * 
	 * @param fee
	 * @param ip
	 * @param extra
	 * @param imsi
	 * @param gameName
	 * @param chargeName
	 * @return
	 */
	private JsonLangTianRes getLangTianContent(String fee, String ip,
			String extra, String imsi, String gameName, String chargeName) {
		HttpClient httpclient = new DefaultHttpClient();
		JsonLangTianRes res = new JsonLangTianRes();
		try {
			String sendUrl = Cfg.cfg.getString("sdk.telecomlangtian.url");
			logger.debug("the telecomlangtian api = " + sendUrl);
			HttpPost httpost = new HttpPost(sendUrl);
			String channelId = Cfg.cfg
					.getString("sdk.telecomlangtian.channelId");
			String key = Cfg.cfg.getString("sdk.telecomlangtian.key");
			String s = channelId + fee + ip + extra + gameName + chargeName
					+ key;
			logger.debug("befor md5,the plain is: " + s);
			String plaintext = channelId + fee + ip + extra
					+ URLEncoder.encode(gameName, "utf-8")
					+ URLEncoder.encode(chargeName, "utf-8") + key;
			logger.debug("befor md5,the plain is: " + plaintext);
			String mac = DigestUtils.md5Hex(plaintext);
			logger.debug("after md5,the plain is: " + mac);

			List<NameValuePair> nvps = new ArrayList<NameValuePair>();
			nvps.add(new BasicNameValuePair("channelId", channelId));
			nvps.add(new BasicNameValuePair("fee", fee));
			nvps.add(new BasicNameValuePair("ip", ip));
			nvps.add(new BasicNameValuePair("extra", extra));
			nvps.add(new BasicNameValuePair("imsi", imsi));
			nvps.add(new BasicNameValuePair("gameName", gameName));
			nvps.add(new BasicNameValuePair("chargeName", chargeName));
			nvps.add(new BasicNameValuePair("mac", mac.toUpperCase()));
			httpost.setEntity(new UrlEncodedFormEntity(nvps, "UTF-8"));
			HttpResponse response = httpclient.execute(httpost);
			HttpEntity entity = response.getEntity();
			logger.debug("the telecomlangtian send response: " + response);
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the telecomlangtian send response content - content = "
					+ content);
			res = mapper.readValue(content, JsonLangTianRes.class);
			return res;
		} catch (Exception e) {
			logger.error("the telecomlangtian request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
	}

	/**
	 * (验证码模式)移动永正电子(发起订单)获取短信内容
	 * 
	 * @param price
	 * @param orderNo
	 * @return
	 */
	public JsonCmccYongzhengReqOrder getYongzhengContent(String price, String orderNo,String imsi,String appname) {
		HttpClient httpclient = new DefaultHttpClient();
		JsonCmccYongzhengReqOrder res = new JsonCmccYongzhengReqOrder();
		try {
			String sendUrl = Cfg.cfg.getString("sdk.cmccyongzheng.reqorderurl");
			StringBuffer query = new StringBuffer(sendUrl);
			String channelId = Cfg.cfg.getString("sdk.cmccyongzheng.channelId");
			query.append("channelId=").append(channelId);
			query.append("&price=").append(price);
			query.append("&backUp=").append(orderNo);
			query.append("&imsi=").append(imsi);
			query.append("&appname=").append(appname);
			HttpGet httpget = new HttpGet(query.toString());
			logger.debug("the cmccyongzheng send url = " + query.toString());
			logger.info("the cmccyongzheng send url = " + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the cmccyongzheng send response content - content = "
					+ content);
			logger.info("the cmccyongzheng send response content - content = "
					+ content);
			res = mapper.readValue(content, JsonCmccYongzhengReqOrder.class);
		} catch (Exception e) {
			logger.error("the cmccyongzheng request error = " + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return res;
	}
	
	/**
	 * (验证码模式)移动永正电子获取短信验证码
	 * @param orderNo
	 * @param mobilephone
	 */
	public JsonCmccYongzhengReqOrder getCmccYongzhengVerifyCode(String orderNo,String mobilephone){
		HttpClient httpclient = new DefaultHttpClient();
		JsonCmccYongzhengReqOrder res = new JsonCmccYongzhengReqOrder();
		try {
			String sendUrl = Cfg.cfg.getString("sdk.cmccyongzheng.verificationurl");
			StringBuffer query = new StringBuffer(sendUrl);
			query.append("orderNo=").append(orderNo);
			query.append("&msisdn=").append(mobilephone);
			HttpGet httpget = new HttpGet(query.toString());
			logger.debug("the cmccyongzheng verifycode send url = " + query.toString());
//			logger.info("the cmccyongzheng verifycode send url = " + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the cmccyongzheng verifycode send response content - content = "
					+ content);
			logger.info("the cmccyongzheng verifycode send response content - content = "
					+ content);
			res = mapper.readValue(content, JsonCmccYongzhengReqOrder.class);
		} catch (Exception e) {
			logger.error("the cmccyongzheng verifycode request error = " + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return res;
	}
	
	/**
	 * 联通音乐基地获取短信内容
	 * 
	 * @param callNumber
	 * @param productId
	 * @param iMei
	 * @param iMsi
	 * @return
	 */
	private JsonCuccMusicbaseRes getCuccMusicbaseContent(String callNumber,
			String productId, String iMei, String iMsi) {
		HttpClient httpclient = new DefaultHttpClient();
		JsonCuccMusicbaseRes res = new JsonCuccMusicbaseRes();
		try {
			String sendUrl = Cfg.cfg.getString("sdk.cuccmusicbase.url");
			StringBuffer query = new StringBuffer(sendUrl);
			query.append("iMei=").append(iMei);
			query.append("&iMsi=").append(iMsi);
			query.append("&callNumber=").append(callNumber);
			String appId = Cfg.cfg.getString("sdk.cuccmusicbase.appId");
			query.append("&appId=").append(appId);
			query.append("&productId=").append(productId);
			String pNumber = Cfg.cfg.getString("sdk.cuccmusicbase.pNumber");
			SimpleDateFormat time = new SimpleDateFormat("MMddHHmmss");
			Date now = new Date();
			String tradeId = pNumber + time.format(now);
			query.append("&tradeId=").append(tradeId);
			query.append("&pNumber=").append(pNumber);
			HttpGet httpget = new HttpGet(query.toString());
			logger.debug("the cuccmusicbase send url = " + query.toString());
			// logger.info("the cuccmusicbase send url = " + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			logger.debug("the cuccmusicbase send response: " + response);
			// logger.info("the cuccmusicbase send response: " + response);
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the cuccmusicbase send response content - content = "
					+ content);
			// logger.info("the cuccmusicbase send response content - content = "
			// +
			// content);
			res = mapper.readValue(content, JsonCuccMusicbaseRes.class);
		} catch (Exception e) {
			logger.error("the cuccmusicbase request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return res;
	}

	/**
	 * mm强联百讯灵动url获取短信内容
	 * 
	 * @param app
	 * @param setting
	 * @param paycode
	 * @param imei
	 * @param imsi
	 * @param userdata
	 * @param ip
	 * @return
	 */
	private JsonCmccmmbaixunlingdongRes getCmccmmBaixunlingdongUrlContent(
			String app, String setting, String paycode, String imei,
			String imsi, String userdata, String ip) {
		HttpClient httpclient = new DefaultHttpClient();
		JsonCmccmmbaixunlingdongRes res = new JsonCmccmmbaixunlingdongRes();
		try {
			String sendUrl = Cfg.cfg
					.getString("sdk.cmccmmbaixunlingdongUrl.url");
			StringBuffer query = new StringBuffer(sendUrl);
			query.append("app=").append(app);
			String channel = "urlpay";
			query.append("&channel=").append(channel);
			query.append("&setting=").append(setting);
			String type = "api";
			query.append("&type=").append(type);
			query.append("&paycode=").append(paycode);
			query.append("&imei=").append(imei);
			query.append("&imsi=").append(imsi);
			query.append("&userdata=").append(userdata);
			query.append("&ip=").append(ip);

			HttpGet httpget = new HttpGet(query.toString());
			logger.debug("the cmccmmbaixunlingdongUrl send url = "
					+ query.toString());
			// logger.info("the cmccmmbaixunlingdongUrl send url = " +
			// query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			logger.debug("the cmccmmbaixunlingdongUrl send response: "
					+ response);
			// logger.info("the cmccmmbaixunlingdongUrl send response: " +
			// response);
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the cmccmmbaixunlingdongUrl send response content = "
					+ content);
			// logger.info("the cmccmmbaixunlingdongUrl send response content = "+content);
			res = mapper.readValue(content, JsonCmccmmbaixunlingdongRes.class);
		} catch (Exception e) {
			logger.error("the cmccmmbaixunlingdongUrl request error is :" + e,
					e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return res;
	}

	/**
	 * 联通掌云中音通道
	 * 
	 * @param imei
	 * @param imsi
	 * @param price
	 * @param orderNo
	 * @param ipaddr
	 * @param phone
	 * @return
	 */
	private String getCuccZhangyunZhongyinContent(String imei, String imsi,
			String price, String orderNo, String ipaddr, String phone) {
		HttpClient httpclient = new DefaultHttpClient();
		String result = "";
		try {
			String sendUrl = Cfg.cfg.getString("sdk.cucczhangyunzy.requrl");
			StringBuffer query = new StringBuffer(sendUrl);
			// pid使用同一个
			String pid = Cfg.cfg.getString("sdk.zmzf.pid");
			query.append("pid=").append(pid);
			query.append("&imei=").append(imei);
			query.append("&imsi=").append(imsi);
			query.append("&price=").append(price);
			query.append("&tradeid=").append(orderNo);
			query.append("&ipaddr=").append(ipaddr);
			query.append("&phone=").append(phone);
			HttpGet httpget = new HttpGet(query.toString());
			logger.debug("the cucczhangyunzy reqest url = " + query.toString());
			logger.info("the cucczhangyunzy reqest url = " + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the cucczhangyunzy response of reqest url, the content =" + content);
//			logger.info("the cucczhangyunzy response of reqest url, the content =" + content);
			result = content;
		} catch (Exception e) {
			logger.error("the cucczhangyunzy request error ="+e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return result;
	}

	/**
	 * 联通易简沃音乐支付通道
	 * 
	 * @param paramString1
	 * @param paramString2
	 * @return
	 */
	private JsonCuccYijianRes getCuccYijianWoMusicContent(String orderId,
			String money, String imsi, String imei, String ipAddr,
			String extData, String feeName,String mobile) {
		HttpClient httpclient = new DefaultHttpClient();
		JsonCuccYijianRes jsonCuccYijianRes = new JsonCuccYijianRes();
		try {
			String sendUrl = Cfg.cfg.getString("sdk.cuccyijian.url");
			logger.debug("the cuccyijianwomusic send api = " + sendUrl);
			// logger.info("the cuccyijianwomusic send api = " + sendUrl);
			HttpPost post = new HttpPost(sendUrl);
			JsonCuccYijianReqChannel jsonCuccYijianReqChannel = new JsonCuccYijianReqChannel();
			jsonCuccYijianReqChannel.setIpAddr(ipAddr);
			jsonCuccYijianReqChannel.setExtData(extData);
			String appId = Cfg.cfg.getString("sdk.cuccyijianwomusic.appId");
			jsonCuccYijianReqChannel.setAppId(appId);
			jsonCuccYijianReqChannel.setImei(imei);
			jsonCuccYijianReqChannel.setMoney(money);
			jsonCuccYijianReqChannel.setFeeName(feeName);
			jsonCuccYijianReqChannel.setImsi(imsi);
			jsonCuccYijianReqChannel.setOrderId(orderId);
			jsonCuccYijianReqChannel.setMobile(mobile);
			JsonCuccYijianReqParam jsonCuccYijianReqParam = new JsonCuccYijianReqParam();
			String version = Cfg.cfg.getString("sdk.cuccyijian.version");
			jsonCuccYijianReqParam.setVersion(version);
			String operation = Cfg.cfg.getString("sdk.cuccyijian.operation");
			jsonCuccYijianReqParam.setOperation(operation);
			jsonCuccYijianReqParam.setReqChannel(jsonCuccYijianReqChannel);
			
			String jsonBody = mapper.writeValueAsString(jsonCuccYijianReqParam);
			logger.debug("the cuccyijianwomusic send jsonBody = " + jsonBody);
			logger.info("the cuccyijianwomusic send jsonBody = " + jsonBody);
			post.setEntity(new ByteArrayEntity(jsonBody.getBytes()));
			HttpResponse response = httpclient.execute(post);
			HttpEntity entity = response.getEntity();
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the cuccyijianwomusic response = " + content);
			logger.info("the cuccyijianwomusic response = " + content);
			jsonCuccYijianRes = mapper.readValue(content,
					JsonCuccYijianRes.class);
			logger.debug("the cuccyijianwomusic jsonCuccYijianRes ="
					+ jsonCuccYijianRes.toString());
//			 logger.info("the cuccyijianwomusic jsonCuccYijianRes ="+jsonCuccYijianRes.toString());
		} catch (Exception e) {
			logger.error("the cuccyijianwomusic request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return jsonCuccYijianRes;
	}
	
	/**
	 * 电信欣网网络获取支付通道
	 * @param timestamp
	 * @param imsi
	 * @param orderNo
	 * @param fee
	 * @return
	 */
	private JsonCtccXinwangRes getCtccXinwangContent(String timestamp,String imsi,String orderNo,String fee){
		HttpClient httpclient = new DefaultHttpClient();
		JsonCtccXinwangRes res=new JsonCtccXinwangRes();
		try {
			String sendUrl = Cfg.cfg.getString("sdk.ctccxinwang.url");
			logger.debug("the ctccxinwang api = " + sendUrl);
			HttpPost httpost = new HttpPost(sendUrl);
			httpost.setHeader("Content-type", "application/x-www-form-urlencoded");
			String method=Cfg.cfg.getString("sdk.ctccxinwang.method");
			String channel = Cfg.cfg.getString("sdk.ctccxinwang.channel");
			String ver=Cfg.cfg.getString("sdk.ctccxinwang.ver");
			String key=Cfg.cfg.getString("sdk.ctccxinwang.key");
			
			SortedMap<String,String> map = new TreeMap<String,String>() ;
			map.put("channel", channel);
			map.put("imsi", imsi);
			map.put("method", method);
			map.put("timestamp", timestamp);
			map.put("ver", ver);
			map.put("id", orderNo);
			map.put("fee", fee);
			String s1="";
			for(Map.Entry<String,String> me:map.entrySet()){  
				s1=s1+me.getKey()+me.getValue();
	        } 
			logger.debug("the ctccxinwang before UrlEncode, the string ="+s1+key);
			String s2=URLEncoder.encode(s1+key, "utf-8");
			logger.debug("the ctccxinwang after UrlEncode, the string ="+s2);
			byte[] data = s2.getBytes("UTF-8");
			String sig=DigestUtils.shaHex(data);
			logger.debug("the ctccxinwang , the sig ="+sig);
			
			List<NameValuePair> nvps = new ArrayList<NameValuePair>();
			nvps.add(new BasicNameValuePair("method", method));
			nvps.add(new BasicNameValuePair("channel", channel));
			nvps.add(new BasicNameValuePair("timestamp", timestamp));
			nvps.add(new BasicNameValuePair("ver", ver));
			nvps.add(new BasicNameValuePair("imsi", imsi));
			nvps.add(new BasicNameValuePair("id", orderNo));
			nvps.add(new BasicNameValuePair("fee", fee));
			nvps.add(new BasicNameValuePair("sig", sig));
			httpost.setEntity(new UrlEncodedFormEntity(nvps, "UTF-8"));
			HttpResponse response = httpclient.execute(httpost);
			HttpEntity entity = response.getEntity();
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the ctccxinwang send response content - content = "
					+ content);
			logger.info("the ctccxinwang send response content - content = "
					+ content);
			String oldChar="per_"+orderNo+"_"+fee;
			String newChar="per_orderId_amount";
			content=content.replace(oldChar, newChar);
			logger.debug("the ctccxinwang replace after, content ="+content);
			res = mapper.readValue(content, JsonCtccXinwangRes.class);
			return res;
		} catch (Exception e) {
			logger.error("the ctccxinwang request error =" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
	}
	
	/**
	 * 移动 动漫广东
	 * @param imei
	 * @param imsi
	 * @param price
	 * @return
	 */
	private JsonCmccDongmanRes getCmccDongmanContent(String imei,String imsi,String price){
		HttpClient httpclient = new DefaultHttpClient();
		JsonCmccDongmanRes res=new JsonCmccDongmanRes();
		try {
			String sendUrl = Cfg.cfg.getString("sdk.cmccdongman.url");
			StringBuffer query = new StringBuffer(sendUrl);
			query.append("imei=").append(imei);
			query.append("&imsi=").append(imsi);
			query.append("&price=").append(price);
			String chapterId=Cfg.cfg.getString("sdk.cmccdongman.chapterId");
			query.append("&chapterId=").append(chapterId);
			String channel=Cfg.cfg.getString("sdk.cmccdongman.channel");
			query.append("&channel=").append(channel);
			String key=Cfg.cfg.getString("sdk.cmccdongman.key");
			query.append("&key=").append(key);
			HttpGet httpget = new HttpGet(query.toString());
//			logger.debug("the cmccdongman send url = " + query.toString());
			logger.info("the cmccdongman send url = " + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			String content = EntityUtils.toString(entity, "UTF-8");
//			logger.debug("the cmccdongman send response content - content = "
//					+ content);
			logger.info("the cmccdongman send response content - content = "
					+ content);
			res = mapper.readValue(content, JsonCmccDongmanRes.class);
		} catch (Exception e) {
			logger.error("the cmccdongman request error =" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return res;
	}
	
	/**
	 * 移动咪咕动漫（魔屏）DDO网页计费
	 * @param mobile
	 * @param payCode
	 * @param clientOrderNum
	 * @return
	 */
	public JsonCmccMopingDongman getCmccMopingDongmanContent(String mobile,String payCode,String clientOrderNum){
		HttpClient httpclient = new DefaultHttpClient();
		JsonCmccMopingDongman res=new JsonCmccMopingDongman();
		try {
			String appKey=Cfg.cfg.getString("sdk.cmccmopingdongman.appKey");
			String appSecret=Cfg.cfg.getString("sdk.cmccmopingdongman.appSecret");
			MoscreenTool tool=new MoscreenTool(appKey, appSecret);
			Map<String,String> params=new HashMap<String,String>();
			params.put("mobile",mobile);
		    params.put("payCode",payCode);
		    String promtson_id=Cfg.cfg.getString("sdk.cmccmopingdongman.promtson_id");
			params.put("promtson_id", promtson_id);
			params.put("clientOrderNum", clientOrderNum);
			String url = Cfg.cfg.getString("sdk.cmccmopingdongman.url");
			String sendUrl=tool.buildUrlWithSign(url,params);
			
			HttpGet httpget = new HttpGet(sendUrl);
//			logger.debug("the cmccmopingdongman send url = " + query.toString());
			logger.info("the cmccmopingdongman send url = " + sendUrl);
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			String content = EntityUtils.toString(entity, "UTF-8");
			content=content.replace("'", "\"");
//			logger.debug("the cmccmopingdongman send response content - content = "
//					+ content);
			logger.info("the cmccmopingdongman send response content - content = "
					+ content);
			res = mapper.readValue(content, JsonCmccMopingDongman.class);
		} catch (Exception e) {
			logger.error("the cmccmopingdongman request error =" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
		return res;
	}
	
	public static void main(String args[]) throws Exception {
//		 Pay_mmdo p=new Pay_mmdo();
//		 String phone_chengdu="15928876607";
//		 String paycode="800000000107";
//		 String clientOrderNum="1512161020440101";
////		 String phone_neimenggu="13674767652";
//		 JsonCmccMopingDongman res=p.getCmccMopingDongmanContent(phone_chengdu,paycode,clientOrderNum);
//		 System.out.println(res.toString());
//		 System.out.println(res.getUrl());
		 
		 String appname="内测游戏";
		 String result=URLEncoder.encode(appname, "utf-8");
		 System.out.println(result);
	}
}
