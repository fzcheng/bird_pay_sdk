package com.cheyooh.service.sdk.action.notify;

import java.util.Date;

import org.apache.commons.codec.binary.Base64;
import org.json.JSONException;
import org.json.JSONObject;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.ResultXJContent;
import com.cheyooh.service.sdk.db.dao.SdkOrderMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderWiipayMapper;
import com.cheyooh.service.sdk.db.entity.SdkOrder;
import com.cheyooh.service.sdk.db.entity.SdkOrderWiipay;
import com.cheyooh.service.sdk.idata.CmdWiiPayOrder;
import com.cheyooh.service.sdk.tools.StringTool;


public class WiipayNotify extends AbstractNotifyService<CmdWiiPayOrder> {

	@Override
	protected Result verify(CmdWiiPayOrder cmd) {
		return null;
	}

	@Override
	protected Result execute(CmdWiiPayOrder cmd) {
		 DAL dal=DALFactory.createDAL();
		 try{
			 SdkOrderWiipayMapper mapper_wiipay=dal.getMapper(SdkOrderWiipayMapper.class);
			 SdkOrderMapper mapper_order=dal.getMapper(SdkOrderMapper.class);
			 
			 byte[] keyBytes;
			 String devPrivate=cmd.getDevPrivate();
			  
			 keyBytes=Base64.decodeBase64(devPrivate);
			 String jsonString=new String(keyBytes);
			 
			 JSONObject json=new JSONObject(jsonString);
			 String order_id=json.getString("order_id");
			 
			 SdkOrder order=mapper_order.selectByPrimaryKey(order_id);
			 if(order!=null){
				 SdkOrderWiipay wiipay=mapper_wiipay.selectByPrimaryKey(order.getPayId());
				 if(wiipay!=null){
					 wiipay.setNotifyAppcode(cmd.getAppCode());
					 wiipay.setNotifyBookno(cmd.getBookNo());
					 wiipay.setNotifyChannelcode(cmd.getChannelCode());
					 wiipay.setNotifyDate(new Date());
					 wiipay.setNotifyImsi(cmd.getImsi());
					 wiipay.setNotifyOperatortype(cmd.getOperatorType());
					 wiipay.setNotifyOperatortypetile(cmd.getOperatorTypeTile());
					 wiipay.setNotifyPaycode(cmd.getPayCode());
					 wiipay.setNotifyPrice(Float.valueOf(cmd.getPrice()));
					 wiipay.setNotifyState(cmd.getState());
					 wiipay.setNotifySyntype(cmd.getSynType());
					 wiipay.setNotifyTel(cmd.getTel());
					 
					 order.setCompleteTime(new Date(System.currentTimeMillis()));
					 if(cmd.getState().equals("success")){
						 order.setStatus(1);
					 }else {
						order.setStatus(3);
					 }
					 order.setStatusDetail(StringTool.max(cmd.getState(),200));
					 
					 mapper_order.updateByPrimaryKeySelective(order);
					 mapper_wiipay.updateByPrimaryKeySelective(wiipay);
					 dal.commit();
					 
					 NotifyOrder.doNotify(order);
					 
					 logger.info("Paid status: "+order.getStatus()+"("+wiipay.getNotifyPaycode()+"), payid: "+order.getPayId());
					 
					 return success();
					 
				 }
				 else{
					    logger.error("fail: OrderNo not exists: "+order_id);
						return fail(cmd,"fail: OrderNo not exists: "+order_id);
					}
			 }else{
				 logger.error("fail: OrderNo not exists: "+order_id);
					return fail(cmd,"fail: OrderNo not exists: "+order_id);
				}
			  
		 } catch (JSONException e) {
			 logger.error(e);
			 return fail(cmd,"Exception: "+e.getMessage()+", class: ".getClass());
		} finally{
			 dal.close();
		 }
	}
	
	private Result success(){
		return new Result(new ResultXJContent("success","success"));
	}
	
	private Result fail(CmdWiiPayOrder cmd,String msg){
		//log
		return new Result(new ResultXJContent(msg,msg));
	}

}
