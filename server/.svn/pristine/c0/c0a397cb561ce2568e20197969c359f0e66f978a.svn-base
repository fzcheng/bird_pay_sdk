/**
 * 
 */
package com.cheyooh.service.sdk.action.notify;

import java.beans.BeanInfo;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Method;
import java.util.Date;
import java.util.Map;
import java.util.TreeMap;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Cmd;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.ResultXJContent;
import com.cheyooh.service.sdk.cfg.Cfg;
import com.cheyooh.service.sdk.db.dao.SdkNotifyMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMmdoMapper;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdo;
import com.cheyooh.service.sdk.db.entity.SdkOrder;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdo;
import com.cheyooh.service.sdk.idata.gameserver.WoplusNotifyReq;
import com.cheyooh.service.sdk.tools.Hmacsha1;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * @author Merlin
 *
 */
public class WoplusYouquNotify extends AbstractNotifyService<Cmd> {
  private static final Integer CHINA_UNICOM = 2;
  private static final String RESPONSE_BODY = "{\"resultCode\":\"%d\"}";
  private static final String WO_PLUS_YOUQU = "woplusyouqu";
  private static final ObjectMapper mapper = new ObjectMapper();
  static {
    //mapper.setPropertyNamingStrategy(PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES);
    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
  }
  /* (non-Javadoc)
   * @see com.cheyooh.service.framework.basic.Service#verify(com.cheyooh.service.framework.idata.Cmd)
   */
  @Override
  protected Result verify(Cmd cmd) {
    return null;
  }

  /* (non-Javadoc)
   * @see com.cheyooh.service.framework.basic.Service#execute(com.cheyooh.service.framework.idata.Cmd)
   */
  @Override
  protected Result execute(Cmd cmd) {
    DAL dal = DALFactory.createDAL();
    try {
      HttpServletRequest request = cmd.getServiceContext().getRequest();
      InputStream in = request.getInputStream();
      BufferedReader reader = new BufferedReader(new InputStreamReader(in, "UTF-8"));
      StringBuffer jsonBuff = new StringBuffer();
      String line;
      while ((line = reader.readLine()) != null) {
        jsonBuff.append(line);
      }
      
      String jsonStr = jsonBuff.toString();
      logger.debug("wo plus notify data : " + jsonStr);
      
      //WoplusNotifyReq notifyReq = mapper.readValue(jsonStr, WoplusNotifyReq.class);
      Map<String, String> jsonMap = mapper.readValue(jsonStr, new TypeReference<TreeMap<String,String>>(){});
      
      String sign = signWoplus(jsonMap);
      if (!sign.equals(jsonMap.get("signature"))) {
        logger.error("wo plus notify data = " + jsonStr);
        logger.error("the wo plus notify signature error, sign = " + sign + ", notify sign = " + jsonMap.get("signature"));
        return response(7);
      }
      
      Date time = new Date();
      String orderNo = jsonMap.get("outTradeNo");
      String notifyStatus = jsonMap.get("status");
      String chargeResultCode = jsonMap.get("chargeResultCode");
      if (!"4".equals(notifyStatus)) {
        logger.error("the wo plus notify pay fail, notify = " + jsonStr);
        updateOrder(dal, orderNo, 3, "notify status : " + notifyStatus + "," + chargeResultCode, time);
        dal.commit();
        return response(0);
      }
      
      Integer gameId = parseInt(jsonMap.get("callbackData"));
      
      SdkNotifyMmdo notifyMmdo = new SdkNotifyMmdo();
      notifyMmdo.setAmount(parseFloat(jsonMap.get("totalFee")));
      notifyMmdo.setCmd("WO+");
      notifyMmdo.setCreateTime(time);
      notifyMmdo.setGameId(gameId);
      //notifyMmdo.setKey(key);
      notifyMmdo.setLinkid(jsonMap.get("transactionId"));
      //notifyMmdo.setMobile(notify.getFeeMsisdn());
      notifyMmdo.setOperationType(CHINA_UNICOM);
      notifyMmdo.setPayChannelCode(WO_PLUS_YOUQU);
      //notifyMmdo.setSpid(notify.getPayCode());
      //notifyMmdo.setSpnum(spnum);
      SdkNotifyMmdoMapper notifyMmdoDao = dal.getMapper(SdkNotifyMmdoMapper.class);
      notifyMmdoDao.insertSelective(notifyMmdo);
      
      updateOrder(dal, orderNo, 1, null, time);
      
      dal.commit();
      
      return response(0);
    } catch (Exception e) {
      logger.error("read the wo plus pay notify error!", e);
      return response(1);
    } finally {
      dal.close();
    }
  }

  @SuppressWarnings("unused")
  private String signWoplus(WoplusNotifyReq req) throws Exception {
    Map<String, Object> map = new TreeMap<String, Object>();
    BeanInfo bean = Introspector.getBeanInfo(req.getClass());
    PropertyDescriptor[] propertyDescriptors = bean.getPropertyDescriptors();
    for (PropertyDescriptor descriptor : propertyDescriptors) {
      String propertyName = descriptor.getName();
      if (!"class".equals(propertyName)) {
        Method readMethod = descriptor.getReadMethod();
        Object result = readMethod.invoke(req);
        if (result != null) {
          map.put(propertyName, result);
        } else {
          map.put(propertyName, null);
        }
      }
    }

    StringBuffer query = new StringBuffer();
    for (String key : map.keySet()) {
      if ("signType".equals(key) || "signature".equals(key) || map.get(key) == null) {
        continue;
      }
      query.append(key).append("=").append(map.get(key)).append("&");
    }
    if (query.length() > 0) {
      query.deleteCharAt(query.length() - 1);
    }
    String encKey = Cfg.cfg.getString("sdk.woplusyouqu.platformId") + "&" + Cfg.cfg.getString("sdk.woplusyouqu.password");
    return Hmacsha1.sign(query.toString(), encKey);
  }
  
  private String signWoplus(Map<String, String> map) throws Exception {
    StringBuffer query = new StringBuffer();
    for (String key : map.keySet()) {
      if ("signType".equals(key) || "signature".equals(key) || map.get(key) == null) {
        continue;
      }
      query.append(key).append("=").append(map.get(key)).append("&");
    }
    if (query.length() > 0) {
      query.deleteCharAt(query.length() - 1);
    }
    String encKey = Cfg.cfg.getString("sdk.woplusyouqu.platformId") + "&" + Cfg.cfg.getString("sdk.woplusyouqu.password");
    return Hmacsha1.sign(query.toString(), encKey);
  }
  
  private Result response(int status) {
    String res = String.format(RESPONSE_BODY, status);
    return new Result(new ResultXJContent(res, res));
  }
  
  private Integer parseInt(String numStr) {
    try {
      return Integer.valueOf(numStr);
    } catch (NumberFormatException e) {
      logger.error(e);
      return null;
    }
  }
  
  private Float parseFloat(String numStr) {
    try {
      return Float.valueOf(numStr);
    } catch (NumberFormatException e) {
      logger.error(e);
      return null;
    }
  }
  private void updateOrder(final DAL dal, final String orderNo, final int status, final String statusDetail, final Date notifyTime) {
    if (StringUtils.isBlank(orderNo)) {
      logger.error("read the wo plus pay notify error, order no is empty");
      return;
    }
    
    SdkOrderMapper orderMapper = dal.getMapper(SdkOrderMapper.class);
    SdkOrder order = orderMapper.selectByPrimaryKey(orderNo);
    if (order == null) {
      logger.error("read the wo plus pay notify error, can not found the order = " + orderNo);
      return;
    }
    
    if (order.getStatus() == 0) {
      order.setStatus(status);
      order.setStatusDetail(statusDetail);
      orderMapper.updateByPrimaryKeySelective(order);
      
      SdkOrderMmdoMapper orderMmdoMapper = dal.getMapper(SdkOrderMmdoMapper.class);
      SdkOrderMmdo orderMmdo = orderMmdoMapper.selectByPrimaryKey(order.getPayId());
      if (orderMmdo != null && status == 1) {
        orderMmdo.setRespTime(notifyTime);
        orderMmdo.setRespStatus(1);
        orderMmdoMapper.updateByPrimaryKeySelective(orderMmdo);
      } else {
        logger.error("read the wo plus pay notify error, can not found the order mmdo = " + order.getPayId());
      }
    } else {
      logger.warn("read the wo plus pay notify warning, the order have deal, order no = " + orderNo);
    }
  }
}
