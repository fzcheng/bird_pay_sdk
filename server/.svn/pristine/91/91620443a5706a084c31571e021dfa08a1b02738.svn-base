/**
 * 
 */
package com.cheyooh.service.sdk.action.notify;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Date;

import org.nuxeo.common.xmap.XMap;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Cmd;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.ResultXJContent;
import com.cheyooh.service.sdk.db.dao.SdkNotifyMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkNotifyWimiMapper;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdo;
import com.cheyooh.service.sdk.db.entity.SdkNotifyWimi;
import com.cheyooh.service.sdk.idata.gameserver.XmlWimipayMmNotify;

/**
 * @author Merlin
 * 
 */
public class MmpmWimiNotify extends AbstractNotifyService<Cmd> {
  private static final Integer CHINA_MOBILE = 1;
  private static final String MMPMWIMI = "mmpmwimi";
  /*
   * (non-Javadoc)
   * 
   * @see com.cheyooh.service.framework.basic.Service#verify(com.cheyooh.service.framework.idata.Cmd)
   */
  @Override
  protected Result verify(Cmd cmd) {
    return null;
  }

  /*
   * (non-Javadoc)
   * 
   * @see com.cheyooh.service.framework.basic.Service#execute(com.cheyooh.service.framework.idata.Cmd)
   */
  @Override
  protected Result execute(Cmd cmd) {
    try {
      InputStream in = cmd.getServiceContext().getRequest().getInputStream();
      BufferedReader reader = new BufferedReader(new InputStreamReader(in, "UTF-8"));
      StringBuffer xmlBuff = new StringBuffer();
      String line;
      while ((line = reader.readLine()) != null) {
        xmlBuff.append(line);
      }
      String xml = xmlBuff.toString();
      logger.debug("wimi pay notify xml : " + xml);

      XmlWimipayMmNotify notify = parseNotify(xml);
      handleNotify(notify, xml);
    } catch (Exception e) {
      logger.error("read the wimi pay notify error!", e);
      fail("Exception: " + e.getMessage() + ", class: ".getClass());
    }
    return success();
  }

  private Result handleNotify(XmlWimipayMmNotify notify, String respXml) {
    DAL dal = DALFactory.createDAL();
    try {
      Integer gameId = getGameId(notify);
      
      SdkNotifyMmdo notifyMmdo = new SdkNotifyMmdo();
      notifyMmdo.setAmount(notify.getPrice()/100);
      //notifyMmdo.setCmd();
      notifyMmdo.setCreateTime(new Date());
      notifyMmdo.setGameId(gameId);
      //notifyMmdo.setKey(key);
      notifyMmdo.setLinkid(notify.getTradeId());
      notifyMmdo.setMobile(notify.getFeeMsisdn());
      notifyMmdo.setOperationType(CHINA_MOBILE);
      notifyMmdo.setSpid(notify.getPayCode());
      notifyMmdo.setPayChannelCode(MMPMWIMI);
      //notifyMmdo.setSpnum(spnum);
      SdkNotifyMmdoMapper notifyMmdoDao = dal.getMapper(SdkNotifyMmdoMapper.class);
      notifyMmdoDao.insertSelective(notifyMmdo);
      
      SdkNotifyWimi notifyWimi = new SdkNotifyWimi();
      notifyWimi.setActionTime(notify.getActionTime());
      notifyWimi.setAmount(notify.getPrice()/100);//微米MM通知价格单位为分，转为元存储
      notifyWimi.setGameId(gameId);
      //notifyWimi.setMobile(mobile);
      notifyWimi.setNotifyResp(respXml);
      notifyWimi.setNotifyTime(new Date());
      notifyWimi.setOperationType(CHINA_MOBILE);
      notifyWimi.setOrderId(notify.getOrderId());
      
      
      SdkNotifyWimiMapper wimiMapper = dal.getMapper(SdkNotifyWimiMapper.class);
      wimiMapper.insertSelective(notifyWimi);
      dal.commit();
    } catch (Exception e) {
      fail("fail");
      logger.error(e);
    } finally {
      dal.close();
    }
    return success();
  }

  private XmlWimipayMmNotify parseNotify(String xml) throws Exception {
    XMap xmap = new XMap();
    xmap.register(XmlWimipayMmNotify.class);

    ByteArrayInputStream in = new ByteArrayInputStream(xml.getBytes("UTF-8"));
    XmlWimipayMmNotify notify = (XmlWimipayMmNotify) xmap.load(in);

    return notify;
  }
  
  private Integer getGameId(XmlWimipayMmNotify notify) {
    try {
      return Integer.valueOf(notify.getExData());
    } catch (NumberFormatException e) {
      logger.error(e);
      return null;
    }
  }

  private Result success() {
    return new Result(new ResultXJContent("success", "success"));
  }

  private Result fail(String msg) {
    // log
    return new Result(new ResultXJContent(msg, msg));
  }
}
