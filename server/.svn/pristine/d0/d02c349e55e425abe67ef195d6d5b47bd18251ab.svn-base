package com.cheyooh.service.sdk.action.client;

import java.util.Date;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.sdk.cfg.Cfg;
import com.cheyooh.service.sdk.db.dao.SdkNotifyMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkTelephoneMapper;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdo;
import com.cheyooh.service.sdk.db.entity.SdkOrder;
import com.cheyooh.service.sdk.db.entity.SdkOrderExample;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdo;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdoExample;
import com.cheyooh.service.sdk.db.entity.SdkTelephone;
import com.cheyooh.service.sdk.db.entity.SdkTelephoneExample;
import com.cheyooh.tools.log.Logger;

public class CmccXytfConfirmReqThread extends Thread {
	private Logger logger = new Logger(this.getClass());

	private static final String cmcc_xytf_url=Cfg.cfg.getString("sdk.cmccxytf.url");

	private String orderNo;
	
	private String imei;
	
	private String imsi;
	
	private String paycode;
	
	public CmccXytfConfirmReqThread(String orderNo,String imei,String imsi,String paycode) {
		this.orderNo=orderNo;
		this.imei=imei;
		this.imsi=imsi;
		this.paycode=paycode;
	}

	@Override
	public void run() {
		DAL dal = DALFactory.createDAL();
		boolean flag = true;
		try {
			for (int i = 0,j=0; i < 3; i++) {
				try {
					
					try {
						if(i==0){
							j=i+1;
						}
						if(i==1){
							j=i+2;
						}
						if(i==2){
							j=i+3;
						}
						Thread.sleep(j*1000);
					} catch (InterruptedException e) {
						logger.warn("sleep error!", e);
					}
					
					logger.debug("the cmccxytf confirm request "+i );
					String contentResult=getCmccXydfSms(imei,
							imsi, paycode);
					if(contentResult.contains("计费成功")){
						logger.debug("the cmccxytf success");
						SdkOrderMapper sdkOrderMapper = dal.getMapper(SdkOrderMapper.class);
						SdkOrderExample sdkOrderExample=new SdkOrderExample();
						sdkOrderExample.createCriteria().andOrderNoEqualTo(orderNo);
						SdkOrder sdkOrder=sdkOrderMapper.selectOne(sdkOrderExample);
						if(sdkOrder!=null){
							SdkOrderMmdoMapper sdkOrderMmdoMapper=dal.getMapper(SdkOrderMmdoMapper.class);
							SdkOrderMmdoExample SdkOrderMmdoExample=new SdkOrderMmdoExample();
							SdkOrderMmdoExample.createCriteria().andPayIdEqualTo(sdkOrder.getPayId());
							SdkOrderMmdo sdkOrderMmdo=sdkOrderMmdoMapper.selectOne(SdkOrderMmdoExample);
							if(sdkOrderMmdo!=null){
								SdkNotifyMmdo sdkNotifyMmdo = new SdkNotifyMmdo();
								sdkNotifyMmdo.setLinkid(orderNo);
								sdkNotifyMmdo.setSpid(sdkOrderMmdo.getReqSendContent());
								sdkNotifyMmdo.setCmd(sdkOrderMmdo.getRespSendContent());
								SdkTelephoneMapper sdkTelephoneMapper=dal.getMapper(SdkTelephoneMapper.class);
								SdkTelephoneExample sdkTelephoneExample=new SdkTelephoneExample();
								sdkTelephoneExample.createCriteria().andImsiEqualTo(imei);
								SdkTelephone sdkTelephone=sdkTelephoneMapper.selectOne(sdkTelephoneExample);
								if(sdkTelephone!=null){
									sdkNotifyMmdo.setMobile(sdkTelephone.getMobilephone());
								}
								sdkNotifyMmdo.setSpnum(sdkOrderMmdo.getRespSendNumber());
								// notifyMmdo.setKey();
								sdkNotifyMmdo.setGameId(sdkOrderMmdo.getGameId());
								sdkNotifyMmdo.setAmount(sdkOrderMmdo.getReqOrderAmount());
								sdkNotifyMmdo.setCreateTime(new Date());
								sdkNotifyMmdo.setOperationType(sdkOrderMmdo.getOperationType());
								sdkNotifyMmdo.setPayChannelCode("cmccxytf");
								SdkNotifyMmdoMapper sdkNotifyMmdoMapper = dal
										.getMapper(SdkNotifyMmdoMapper.class);
								sdkNotifyMmdoMapper.insertSelective(sdkNotifyMmdo);
							}
						}
						flag=false;
					}

				} catch (Exception e) {
					logger.warn("the CmccXytfConfirmReq error!", e);
				}

				if(!flag){
					break;
				}
	
			}
		} catch (Exception e) {
			logger.error("the run error is : " + e);
			return;
		} finally {
			dal.commit();
			dal.close();
		}
		
	}

	/*
	 * 中移游-西游塔防 网络获取
	 */
	private String getCmccXydfSms(String imei,String imsi,String paycode){
		HttpClient httpclient = new DefaultHttpClient();
		try {
			String sendUrl = cmcc_xytf_url;
			logger.debug("the cmccxytfConfirm api = " + sendUrl);
			StringBuffer query = new StringBuffer(sendUrl);
			query.append("imei=").append(imei);
			query.append("&imsi=").append(imsi);
			String appKey=Cfg.cfg.getString("sdk.cmccxytf.key");
			query.append("&appKey=").append(appKey);
			query.append("&os=").append("4.0.2");
			query.append("&model=").append("xiaomi");
			query.append("&paycode=").append(paycode);
			HttpGet httpget = new HttpGet(query.toString());
			logger.debug("the cmccxytfConfirm send url = " + query.toString());
			HttpResponse response = httpclient.execute(httpget);
			HttpEntity entity = response.getEntity();
			logger.debug("the cmccxytfConfirm send response: " + response);
//			logger.info("the cmccxytfConfirm send response: " + response);
			String content = EntityUtils.toString(entity, "UTF-8");
			logger.debug("the cmccxytfConfirm send response content - content = "
					+ content);
//			logger.info("the cmccxytfConfirm send response content - content = "
//					+ content);
			return content;
		} catch (Exception e) {
			logger.error("the cmccxytfConfirm request error is :" + e, e);
			return null;
		} finally {
			httpclient.getConnectionManager().shutdown();
		}
	}
	
}
