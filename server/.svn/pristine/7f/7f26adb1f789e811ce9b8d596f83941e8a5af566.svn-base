package com.cheyooh.service.sdk.action.notify;

import java.util.Date;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Cmd;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.ResultXJContent;
import com.cheyooh.service.sdk.cfg.Cfg;
import com.cheyooh.service.sdk.db.dao.SdkOrderMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderTenpayMapper;
import com.cheyooh.service.sdk.db.entity.SdkOrder;
import com.cheyooh.service.sdk.db.entity.SdkOrderTenpay;
import com.cheyooh.service.sdk.tools.StringTool;
import com.tenpay.ResponseHandler;

/**
 * 财付通回调URL
 * 
 * @author zhouzg@cheyooh.com
 *
 */
public class TenpayCallback extends AbstractNotifyService<Cmd>{

	@Override
	protected Result verify(Cmd cmd) {
		 
		return null;
	}

	@Override
	protected Result execute(Cmd cmd) {
		//---------------------------------------------------------
		//财付通wap支付后台回调处理示例，商户按照此文档进行开发即可
		//---------------------------------------------------------

		//密钥
		String key = Cfg.cfg.getString("sdk.pay.tenpay.keyValue");


		//创建实例
		ResponseHandler resHandler = new ResponseHandler(cmd.getServiceContext().getRequest(),cmd.getServiceContext().getResponse());

		resHandler.setKey(key);

		//uri编码,tomcat需要
		try{
			resHandler.setUriEncoding("ISO-8859-1");
		}catch(Exception e){
			logger.error(e);
		}
		
		//判断签名
		if(resHandler.isTenpaySign()) {
			//支付结果
			String pay_result = resHandler.getParameter("pay_result");
			String sp_billno = resHandler.getParameter("sp_billno");
			
			if(pay_result.equals("0")) {
				logger.info("后台通知，支付成功,sp_billno=" + sp_billno);
				
				//------------------------------
				//处理业务开始
				//------------------------------
				
				return processOrder(resHandler);					
				//------------------------------
				//处理业务完毕
				//------------------------------				 		
			}else {
				logger.error("后台通知，支付失败,pay_result=" + pay_result);
				return fail("fail");
			}			
		} else {			
			logger.error("后台通知，验证签名失败");
			return fail("fail");			
		}		  
	}
	
	private Result processOrder(ResponseHandler resHandler){
		String sp_billno = resHandler.getParameter("sp_billno");
		
		DAL dal=DALFactory.createDAL();
		try{
			SdkOrderTenpayMapper mapper_tenpay=dal.getMapper(SdkOrderTenpayMapper.class);
			SdkOrderMapper mapper_order=dal.getMapper(SdkOrderMapper.class);
			
			SdkOrder order=mapper_order.selectByPrimaryKey(sp_billno);
			if(order!=null){ 			
				SdkOrderTenpay tenpay=mapper_tenpay.selectByPrimaryKey(order.getPayId());
				if(tenpay!=null){					
					setupOrderStatus(resHandler,order,tenpay);
					
					mapper_tenpay.updateByPrimaryKeySelective(tenpay);
					mapper_order.updateByPrimaryKeySelective(order);
					dal.commit();
					
					NotifyOrder.doNotify(order);
					
					logger.info("Paid status: "+order.getStatus()+"("+tenpay.getNotifyPayResult()+"), payid: "+order.getPayId());
					
 					return success();
				}else{
					return fail("fail: OrderPay not exists: "+order.getPayId());
				}
			}else{
				return fail("fail: OrderNo not exists: "+sp_billno);
			}
		}catch(Exception e){
			logger.error(e);
			
			return fail("Exception: "+e.getMessage()+", class: ".getClass());
		}finally{
			dal.close();
		}
	}
	
	
	private void setupOrderStatus(ResponseHandler res,SdkOrder order,SdkOrderTenpay tenpay){
		float total_fee=Integer.parseInt(res.getParameter("total_fee"))/100f;
		
		tenpay.setNotifyCharset(res.getParameter("charset"));
		tenpay.setNotifyPayResult(Integer.parseInt("pay_result"));
		tenpay.setNotifyTransactionId(res.getParameter("transaction_id"));
		tenpay.setNotifySpBillno(res.getParameter("sp_billno"));
		tenpay.setNotifyTotalFee(total_fee);
		tenpay.setNotifyFeeType(res.getParameter("fee_type"));
		tenpay.setNotifyBargainorId(res.getParameter("bargainor_id"));
		tenpay.setNotifyAttach(res.getParameter("attach"));
		
		//下面的参数在Callback中可能没有值
		tenpay.setNotifyBankBillno(res.getParameter("bank_billno"));
		tenpay.setNotifyBankType(Integer.parseInt(res.getParameter("notifyBankType")));
		tenpay.setNotifyPayInfo(res.getParameter("pay_info"));
		tenpay.setNotifyPurchaseAlias(res.getParameter("purchase_alias"));
		tenpay.setNotifyTime(new Date());
		tenpay.setNotifyTimeEnd(res.getParameter("time_end"));
		tenpay.setNotifyVer(res.getParameter("ver"));		
		
		order.setCompleteTime(tenpay.getNotifyTime());
		if(tenpay.getNotifyPayResult()==0){ 
			//订单成功
			order.setStatus(1);
		}else{
			//订单失败
			order.setStatus(3);
		}
		order.setStatusDetail(StringTool.max(tenpay.getNotifyPayInfo(),200));
	}

	private Result success(){
		return new Result(new ResultXJContent("success","success"));
	}
	
	private Result fail(String msg){
		//log
		return new Result(new ResultXJContent(msg,msg));
	}
}
