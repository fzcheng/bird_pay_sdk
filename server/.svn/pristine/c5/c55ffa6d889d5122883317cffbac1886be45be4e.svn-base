/**
 * 
 */
package com.cheyooh.service.sdk.action.notify;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.DateFormatUtils;
import org.nuxeo.common.xmap.XMap;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Cmd;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.ResultXJContent;
import com.cheyooh.service.sdk.db.dao.SdkNotifyMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMmdoMapper;
import com.cheyooh.service.sdk.db.dao.SdkSwbInfoMapper;
import com.cheyooh.service.sdk.db.dao.SdkTelephoneMapper;
import com.cheyooh.service.sdk.db.entity.SdkNotifyMmdo;
import com.cheyooh.service.sdk.db.entity.SdkOrder;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdo;
import com.cheyooh.service.sdk.db.entity.SdkSwbInfo;
import com.cheyooh.service.sdk.db.entity.SdkSwbInfoExample;
import com.cheyooh.service.sdk.db.entity.SdkTelephone;
import com.cheyooh.service.sdk.db.entity.SdkTelephoneExample;
import com.cheyooh.service.sdk.idata.gameserver.XmlWoappstoreCallBackRes;
import com.cheyooh.service.sdk.idata.gameserver.XmlWoappstoreCallbackReq;
import com.cheyooh.service.sdk.idata.gameserver.XmlWoappstoreVerifyOrderReq;
import com.cheyooh.service.sdk.idata.gameserver.XmlWoappstoreVerifyOrderRes;

/**
 * @author Merlin
 * 
 */
public class WoappstoreNotify extends AbstractNotifyService<Cmd> {
	private static final Integer CHINA_UNICOM = 2;
	private static final String WOAPPSTORE = "woappstore";

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#verify(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@Override
	protected Result verify(Cmd cmd) {
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.cheyooh.service.framework.basic.Service#execute(com.cheyooh.service
	 * .framework.idata.Cmd)
	 */
	@Override
	protected Result execute(Cmd cmd) {
		DAL dal = DALFactory.createDAL();
		String resStr = "";
		try {
			HttpServletRequest request = cmd.getServiceContext().getRequest();
			String serviceid = request.getParameter("serviceid");
			logger.info("woappstore pay notify serviceid = " + serviceid);
			InputStream in = request.getInputStream();
			BufferedReader reader = new BufferedReader(new InputStreamReader(
					in, "UTF-8"));
			StringBuffer xmlBuff = new StringBuffer();
			String line;
			while ((line = reader.readLine()) != null) {
				xmlBuff.append(line);
			}
			String xml = xmlBuff.toString();
			logger.debug("woappstore pay notify xml : " + xml);
			if (StringUtils.isNotBlank(serviceid)) {
				resStr = verifyOrder(cmd, dal, xml);
			} else {
				resStr = handleOrderNotify(cmd, dal, xml);
			}
		} catch (Exception e) {
			logger.error("read the woappstore pay notify error!", e);
			return response("Exception: " + e.getMessage()
					+ ", class: ".getClass());
		} finally {
			dal.close();
		}
		Result result = response(resStr);
		logger.info("the woappstore pay notify is :"
				+ result.getXml("WoappstoreNotify"));
		return result;
	}

	@SuppressWarnings("null")
	private String verifyOrder(Cmd cmd, DAL dal, String xml) throws Exception {
		XmlWoappstoreVerifyOrderReq req = parseVerifyOrderReq(xml);

		XmlWoappstoreVerifyOrderRes res = new XmlWoappstoreVerifyOrderRes();

		String orderNo = req.getOrderid().substring(8);
		SdkOrderMapper orderDao = dal.getMapper(SdkOrderMapper.class);
		SdkOrder order = orderDao.selectByPrimaryKey(orderNo);

		if (order == null) {
			order.setStatus(3);
			res.setCheckOrderIdRsp(1);
			logger.error("the woappstore verify order pay, order can not found, request xml : "
					+ xml);
			return res.toXml();
		}
		Integer gameId = 0;
		gameId = order.getGameId();

		String key = "";
		SdkSwbInfoMapper sdkSwbInfoMapper = dal
				.getMapper(SdkSwbInfoMapper.class);
		SdkSwbInfoExample sdkSwbInfoExample = new SdkSwbInfoExample();
		sdkSwbInfoExample.createCriteria().andOperatorTypeEqualTo(CHINA_UNICOM)
				.andGameIdEqualTo(gameId);
		SdkSwbInfo sdkSwbInfo = sdkSwbInfoMapper.selectOne(sdkSwbInfoExample);
		if (sdkSwbInfo != null) {
			key = sdkSwbInfo.getAppKey();
		}

		String sign = DigestUtils.md5Hex("orderid=" + req.getOrderid()
				+ "&Key=" + key);

		if (!sign.equalsIgnoreCase(req.getSignMsg())) {
			res.setCheckOrderIdRsp(1);
			order.setStatus(3);
			logger.error("the woappstore verify order pay sign error! request xml : "
					+ xml);
			return res.toXml();
		}

		order.setStatus(2);
		orderDao.updateByPrimaryKeySelective(order);

		SdkOrderMmdoMapper orderMmdoDao = dal
				.getMapper(SdkOrderMmdoMapper.class);
		SdkOrderMmdo orderMmdo = orderMmdoDao.selectByPrimaryKey(order
				.getPayId());
		String uid = "";
		String ip = "";
		String serviceid = "";
		if (orderMmdo != null) {
			uid = String.valueOf(orderMmdo.getUid());
			ip = formatIp(orderMmdo.getIpAddr());
			String[] c = null;
			if (orderMmdo.getReqSendContent().contains("@")) {
				c = orderMmdo.getReqSendContent().split("@");
				serviceid = c[1];
			}
		}
		res.setGameaccount(uid);
		res.setCheckOrderIdRsp(0);
		String channel = "00012243";
		String cpID = "";
		if (sdkSwbInfo != null) {
			channel = sdkSwbInfo.getChannel();
			cpID = sdkSwbInfo.getChannel();
		}

		String macAddr = orderMmdo.getMacAddr();
		if (macAddr != null) {
			macAddr = macAddr.replaceAll(":", "");
		} else {
			macAddr = "";
		}
		res.setMacaddress(macAddr);
		res.setIpaddress(ip);
		res.setServiceid(serviceid);
		res.setChannelid(channel);
		res.setCpid(cpID);
		res.setOrdertime(DateFormatUtils.format(order.getCreateTime(),
				"yyyyMMddHHmmss"));
		res.setImei(orderMmdo.getImei());
		res.setAppversion(cmd.getServiceContext().getRequest()
				.getParameter("version"));

		dal.commit();
		return res.toXml();
	}

	/**
	 * @param ip
	 * @return
	 */
	private String formatIp(String ip) {
		StringBuffer buff = new StringBuffer();
		if (ip != null) {
			String[] sections = ip.split(".");
			for (String section : sections) {
				if (section.length() == 3) {
					buff.append(section);
				} else if (section.length() == 2) {
					buff.append("0" + section);
				} else {
					buff.append("00" + section);
				}
			}
		}
		return buff.toString();
	}

	private XmlWoappstoreVerifyOrderReq parseVerifyOrderReq(String xml)
			throws Exception {
		XMap xmap = new XMap();
		xmap.register(XmlWoappstoreVerifyOrderReq.class);

		ByteArrayInputStream in = new ByteArrayInputStream(
				xml.getBytes("UTF-8"));
		XmlWoappstoreVerifyOrderReq req = (XmlWoappstoreVerifyOrderReq) xmap
				.load(in);

		return req;
	}

	@SuppressWarnings("null")
	private String handleOrderNotify(Cmd cmd, DAL dal, String xml)
			throws Exception {
		XmlWoappstoreCallbackReq req = parseCallbackReq(xml);
		XmlWoappstoreCallBackRes res = new XmlWoappstoreCallBackRes();

		String orderNo = req.getOrderid().substring(8);
		SdkOrderMapper orderDao = dal.getMapper(SdkOrderMapper.class);
		SdkOrder order = orderDao.selectByPrimaryKey(orderNo);
		if (order == null) {
			order.setStatus(3);
			res.setCallbackRsp(3);
			logger.error("the woappstore order can not found! request xml : "
					+ xml);
			return res.toXml();
		}

		Integer gameId = 0;
		gameId = order.getGameId();
		String key = "";
		SdkSwbInfoMapper sdkSwbInfoMapper = dal
				.getMapper(SdkSwbInfoMapper.class);
		SdkSwbInfoExample sdkSwbInfoExample = new SdkSwbInfoExample();
		sdkSwbInfoExample.createCriteria().andOperatorTypeEqualTo(CHINA_UNICOM)
				.andGameIdEqualTo(gameId);
		SdkSwbInfo sdkSwbInfo = sdkSwbInfoMapper.selectOne(sdkSwbInfoExample);
		if (sdkSwbInfo != null) {
			key = sdkSwbInfo.getAppKey();
		}

		String sign = DigestUtils.md5Hex(req.generateSignString() + "&Key="
				+ key);

		if (!sign.equalsIgnoreCase(req.getSignMsg())) {
			order.setStatus(3);
			res.setCallbackRsp(2);
			logger.error("the woappstore callback pay sign error! request xml : "
					+ xml);
			return res.toXml();
		}

		SdkOrderMmdoMapper orderMmdoDao = dal
				.getMapper(SdkOrderMmdoMapper.class);
		SdkOrderMmdo orderMmdo = orderMmdoDao.selectByPrimaryKey(order
				.getPayId());
		logger.info("the woappstore handle order pay orderNo is :"+orderNo+", the status is :"
				+ req.getStatus());
		if ("0".equals(req.gethRet())) {
			order.setStatus(1);
			orderMmdo.setRespStatus(1);

			SdkNotifyMmdo notifyMmdo = new SdkNotifyMmdo();
			try {
				notifyMmdo.setAmount(Float.parseFloat(req.getPayfee()) / 100);
			} catch (Exception e) {
				logger.warn("read the woappstore parse price error!", e);
			}
			String[] c = null;
			String cmdContent = "";
			if (orderMmdo.getReqSendContent().contains("@")) {
				c = orderMmdo.getReqSendContent().split("@");
				cmdContent = c[0];
			}
			notifyMmdo.setCmd(cmdContent);
			notifyMmdo.setCreateTime(new Date());
			notifyMmdo.setGameId(order.getGameId());
			String province = "";
			String phone = "";
			SdkTelephoneMapper sdkTelephoneMapper = dal
					.getMapper(SdkTelephoneMapper.class);
			SdkTelephoneExample sdkTelephoneExample = new SdkTelephoneExample();
			String imsi="";
			if(StringUtils.isNotEmpty(orderMmdo.getRespImsi())&&StringUtils.isNotBlank(orderMmdo.getRespImsi())){
				imsi=orderMmdo.getRespImsi();
			}
			sdkTelephoneExample.createCriteria().andImsiEqualTo(imsi);
			SdkTelephone sdkTelephone = sdkTelephoneMapper
					.selectOne(sdkTelephoneExample);
			if (sdkTelephone != null) {
				province = String.valueOf(sdkTelephone.getProvinceNo());
				phone = sdkTelephone.getMobilephone();
			}
			notifyMmdo.setKey(province);
			notifyMmdo.setMobile(phone);
			notifyMmdo.setLinkid(req.getOrderid());
			notifyMmdo.setOperationType(CHINA_UNICOM);
			notifyMmdo.setSpid(req.getConsumeCode());
			notifyMmdo.setPayChannelCode(WOAPPSTORE);
			notifyMmdo.setSpnum(orderMmdo.getRespSendNumber());
			SdkNotifyMmdoMapper notifyMmdoDao = dal
					.getMapper(SdkNotifyMmdoMapper.class);
			notifyMmdoDao.insertSelective(notifyMmdo);
		} else {
			order.setStatus(3);
			orderMmdo.setRespStatus(0);
		}
		orderDao.updateByPrimaryKeySelective(order);
		orderMmdoDao.updateByPrimaryKeySelective(orderMmdo);

		res.setCallbackRsp(1);

		dal.commit();
		return res.toXml();
	}

	
	private XmlWoappstoreCallbackReq parseCallbackReq(String xml)
			throws Exception {
		XMap xmap = new XMap();
		xmap.register(XmlWoappstoreCallbackReq.class);

		ByteArrayInputStream in = new ByteArrayInputStream(
				xml.getBytes("UTF-8"));
		XmlWoappstoreCallbackReq req = (XmlWoappstoreCallbackReq) xmap.load(in);

		return req;
	}

	private Result response(String msg) {
		return new Result(new ResultXJContent(msg, msg));
	}
}
