/**
 * 
 */
package com.cheyooh.service.sdk.action.notify;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;

import com.cheyooh.service.dal.DAL;
import com.cheyooh.service.dal.DALFactory;
import com.cheyooh.service.framework.idata.Result;
import com.cheyooh.service.framework.idata.ResultXJContent;
import com.cheyooh.service.sdk.db.dao.SdkNotifySinaMonthlyMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMapper;
import com.cheyooh.service.sdk.db.dao.SdkOrderMmdoMapper;
import com.cheyooh.service.sdk.db.entity.SdkNotifySinaMonthly;
import com.cheyooh.service.sdk.db.entity.SdkNotifySinaMonthlyExample;
import com.cheyooh.service.sdk.db.entity.SdkOrder;
import com.cheyooh.service.sdk.db.entity.SdkOrderMmdo;
import com.cheyooh.service.sdk.idata.notify.CmdSinaMonthlyUpPmReceive;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * @author Merlin
 * 
 */
public class SinaMonthlyUpPmReceive extends AbstractNotifyService<CmdSinaMonthlyUpPmReceive> {
  private static final String SUCCESS = "succ";
  private static final String FAILURE = "fail";
  private static final ObjectMapper mapper = new ObjectMapper();
  static {
    // mapper.setPropertyNamingStrategy(PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES);
    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
  }

  /*
   * (non-Javadoc)
   * 
   * @see com.cheyooh.service.framework.basic.Service#verify(com.cheyooh.service.framework.idata.Cmd)
   */
  @Override
  protected Result verify(CmdSinaMonthlyUpPmReceive cmd) {
    return null;
  }

  /*
   * (non-Javadoc)
   * 
   * @see com.cheyooh.service.framework.basic.Service#execute(com.cheyooh.service.framework.idata.Cmd)
   */
  @Override
  protected Result execute(CmdSinaMonthlyUpPmReceive cmd) {
    DAL dal = DALFactory.createDAL();
    try {
      Map<String, String> params = getParams(cmd.getServiceContext().getRequest());
      String rawData = null;
      try {
        rawData = mapper.writeValueAsString(params);
      } catch (Exception e) {
        logger.error("the sina monthly pm receive error!", e);
      }
      
      if (StringUtils.isBlank(cmd.getMobile()) || StringUtils.isBlank(cmd.getMsg())) {
        logger.info("the sina monthly pm receive, connot read the mobile or msg, data = " + rawData);
        return fail();
      }
      
      SdkOrderMapper orderMapper = dal.getMapper(SdkOrderMapper.class);
      SdkOrder order = orderMapper.selectByPrimaryKey(cmd.getBusinesslinkid());
      if (order == null) {
        logger.error("the sina monthly pm receive, cannot find the order, data = " + rawData);
        return fail();
      }

      SdkOrderMmdoMapper mmdoMapper = dal.getMapper(SdkOrderMmdoMapper.class);
      SdkOrderMmdo orderMmdo = mmdoMapper.selectByPrimaryKey(order.getPayId());
      if (orderMmdo == null) {
        logger.error("the sina monthly pm receive, cannot find the mmdo order, data = " + rawData);
        return fail();
      }

      SdkNotifySinaMonthlyMapper monthlyMapper = dal.getMapper(SdkNotifySinaMonthlyMapper.class);
      SdkNotifySinaMonthlyExample example = new SdkNotifySinaMonthlyExample();
      example.createCriteria().andOrderNoEqualTo(cmd.getBusinesslinkid());
      SdkNotifySinaMonthly monthly = monthlyMapper.selectOne(example);
      Date now = new Date();
      if (monthly != null && StringUtils.isEmpty(monthly.getState())) {
        logger.error("the sina monthly pm receive have handle, the sms receive is existed! data = " + rawData);
        return success();
      }
      
      if (monthly == null) {
        monthly = new SdkNotifySinaMonthly();
        monthly.setCreatedTime(now);
      }

      // monthly.setDownPort(downPort);
      monthly.setLinkId(cmd.getLinkid());
      monthly.setMobile(cmd.getMobile());
      // monthly.setNotifyRawData(notifyRawData);
      monthly.setOrderNo(cmd.getBusinesslinkid());
      // monthly.setState(state);
      monthly.setUpCmd(cmd.getMsg());
      monthly.setUpdatedTime(now);
      monthly.setUpPort(cmd.getLongphone());
      monthly.setUpSmsRawData(rawData);

      monthly.setGameId(order.getGameId());
      monthly.setOperatorType(orderMmdo.getOperationType());
      monthly.setAmount(order.getAmount());
      if (monthly.getId() == null) {
        monthlyMapper.insertSelective(monthly);
      } else {
        monthlyMapper.updateByPrimaryKeySelective(monthly);
      }

      dal.commit();
    } finally {
      dal.close();
    }
    return success();
  }

  private Result success() {
    return new Result(new ResultXJContent(SUCCESS, SUCCESS));
  }

  private Result fail() {
    return new Result(new ResultXJContent(FAILURE, FAILURE));
  }

  protected Map<String, String> getParams(HttpServletRequest request) {
    Map<String, String> params = new HashMap<String, String>();
    logger.debug("================ param list ================");
    Set<String> keySet = request.getParameterMap().keySet();
    for (String key : keySet) {
      String value = request.getParameter(key);
      logger.debug(key + " = " + value);
      params.put(key, value);
    }
    return params;
  }

}
